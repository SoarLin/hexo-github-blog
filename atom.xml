<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SoarLin</title>
  <icon>https://www.gravatar.com/avatar/141a62d46312011efbd488c0f2d4f615</icon>
  <subtitle>工作中的知識累積</subtitle>
  <link href="https://soarlin.github.io/atom.xml" rel="self"/>
  
  <link href="https://soarlin.github.io/"/>
  <updated>2021-07-18T11:02:45.153Z</updated>
  <id>https://soarlin.github.io/</id>
  
  <author>
    <name>Soar Lin</name>
    <email>soar.lin@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>透過 Webpack 傳入變數到 pug, scss 檔案內</title>
    <link href="https://soarlin.github.io/2021/04/09/Webpack%E5%82%B3%E5%85%A5%E8%AE%8A%E6%95%B8%E5%88%B0pug-scss%E6%AA%94%E6%A1%88/"/>
    <id>https://soarlin.github.io/2021/04/09/Webpack%E5%82%B3%E5%85%A5%E8%AE%8A%E6%95%B8%E5%88%B0pug-scss%E6%AA%94%E6%A1%88/</id>
    <published>2021-04-09T14:08:57.000Z</published>
    <updated>2021-07-18T11:02:45.153Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做前端切版的時候，遇到了一個以前沒注意到的問題，就是在本機端開發時，存取圖片或其他檔案都預設從根目錄開始找 (e.g. <code>/images/...</code>)，可是當專案開發完，要發佈到其他位置時，圖片等檔案的位置就會有所變更，這時候圖片的路徑就會找不到檔案了，必須要再手動調整過，當然不可能每次都手動一個一個改路徑。</p><p>所以開始著手研究怎麼把路徑的變數，透過 webpack 編譯階段判斷目前是開發環境，還是 production 環境，來改變圖片等檔案的前綴路徑。底下就以 <a href="https://github.com/SoarLin/pug-sass-template">pug-sass-template</a> 專案來說明幾個重要的步驟。</p><h2 id="Step-1-Webpack-Get-Environment-Variables"><a href="#Step-1-Webpack-Get-Environment-Variables" class="headerlink" title="Step 1 - Webpack Get Environment Variables"></a>Step 1 - Webpack Get Environment Variables</h2><blockquote><p>參考： <a href="https://webpack.js.org/guides/environment-variables/">https://webpack.js.org/guides/environment-variables/</a></p></blockquote><p>上面網址提供的範例在傳入參數時，一個與多個在接收時，其實有所不同，這邊也是踩了雷才注意到<br><strong>Webpack 版本 : 4.43.0</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 傳入兩組 env 時</span><br><span class="line">npx webpack --env NODE_ENV=local --env production --progress</span><br><span class="line"></span><br><span class="line">// 在 webpack 內</span><br><span class="line">module.exports = (env) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;env:&#x27;, env); // [ &#x27;NODE_ENV=local&#x27;, &#x27;production&#x27; ]</span><br><span class="line">  console.log(&#x27;Production: &#x27;, env.production); // true</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: &#x27;bundle.js&#x27;,</span><br><span class="line">      path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>傳入兩組 env 值的時候，所收到的 env 其實是一組陣列，各別是 <code>--env XXXXX</code> 裡面的 <code>XXXXX</code>，但是當傳入的只有一組 env 時，例如：<code>--env production</code>這時候 env 就是 <code>production</code> 這個值，就<strong>不再是陣列了</strong></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 傳入一組 env 時</span><br><span class="line">npx webpack --env production --progress</span><br><span class="line"></span><br><span class="line">// 在 webpack 內</span><br><span class="line">module.exports = (env) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;env:&#x27;, env); // &#x27;production&#x27;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: &#x27;bundle.js&#x27;,</span><br><span class="line">      path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>雖然目前 webpack 參考的頁面是 v5.31.0 版，可是沒特別寫出這個差異，讓我一直踩雷踩到懷疑人生了…</p><p>另外，可以也使用 mode 來傳入環境變數</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx webpack --mode production --progress</span><br><span class="line"></span><br><span class="line">module.exports = (env, options) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;options.mode:&#x27;, options.mode); // &#x27;production&#x27;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: &#x27;bundle.js&#x27;,</span><br><span class="line">      path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Step-2-Pass-Variables-Into-PUG-files"><a href="#Step-2-Pass-Variables-Into-PUG-files" class="headerlink" title="Step 2 - Pass Variables Into PUG files"></a>Step 2 - Pass Variables Into PUG files</h2><blockquote><p>參考： <a href="https://www.npmjs.com/package/pug-html-loader">https://www.npmjs.com/package/pug-html-loader</a></p></blockquote><p>根據這個套件的說明，可以簡單地透過在 <code>options</code> 裡面加入 <code>data</code> 來將要傳入 pug 的變數傳進去即可。而 data 的格式，寫成 JSON 即可。結合一下上面的步驟一，就可以來調整圖片的前綴網址。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// package.json 內的 scripts</span><br><span class="line">webpack --env production --mode production --config webpack.config.js</span><br><span class="line"></span><br><span class="line">// webpack.config.js</span><br><span class="line">module.exports = (env, options) =&gt; &#123;</span><br><span class="line">  const _VARIABLES = &#123;</span><br><span class="line">    IMG_PREFIX_URL: (options.mode === &#x27;production&#x27;) ? &#x27;https://soarlin.github.io/&#x27; : &#x27;/&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  let config = &#123;</span><br><span class="line">    context: path.resolve(__dirname, &#x27;src&#x27;),</span><br><span class="line">    entry: &#123;</span><br><span class="line">      index: &#x27;./js/index.js&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    output: ....,</span><br><span class="line">    module: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: /\.pug$/,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: &#x27;html-loader&#x27;,</span><br><span class="line">              options: &#123;</span><br><span class="line">                minimize: (options.mode === &#x27;production&#x27;) ? true : false</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: &#x27;pug-html-loader&#x27;,</span><br><span class="line">              options: &#123;</span><br><span class="line">                data: _VARIABLES,</span><br><span class="line">                pretty: (options.mode === &#x27;production&#x27;) ? false : true</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        ....</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而到時候 pug 檔內，就可以讀到傳入的變數了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 接收變數</span><br><span class="line">- var imgPrefixUrl = IMG_PREFIX_URL</span><br><span class="line"></span><br><span class="line">// 套用在圖片上</span><br><span class="line">img.rounded-circle(src=imgPrefixUrl+&#x27;images/soarlin-avatar.jpg&#x27;, alt=&quot;avatar&quot;)</span><br></pre></td></tr></table></figure><h2 id="Step-3-Pass-Variables-Into-Sass-SCSS-files"><a href="#Step-3-Pass-Variables-Into-Sass-SCSS-files" class="headerlink" title="Step 3 - Pass Variables Into Sass/SCSS files"></a>Step 3 - Pass Variables Into Sass/SCSS files</h2><blockquote><p>參考： <a href="https://www.npmjs.com/package/sass-loader#additionaldata">https://www.npmjs.com/package/sass-loader#additionaldata</a></p></blockquote><p>雖然在 <a href="https://stackoverflow.com/questions/60058352/pass-webpack-environment-variable-to-scss-file">stack overflow</a> 上也有找到解答，可是上面的解答實際使用時有問題，後來是在 sass-loader npm 的頁面上找到正確的參數，可能是版本的關係產生的不同吧！</p><p>在 sass-loader 的 <code>options</code> 加入 <code>additionalData</code> 來傳入參數到 Sass/SCSS 檔內。而 additionalData 可使用字串或是函示，使用的方式在上述參考網址也有了，所以我就以我自己的範例來寫就好</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// package.json 內的 scripts</span><br><span class="line">webpack --env production --mode production --config webpack.config.js</span><br><span class="line"></span><br><span class="line">// webpack.config.js</span><br><span class="line">module.exports = (env, options) =&gt; &#123;</span><br><span class="line">  const _VARIABLES = &#123;</span><br><span class="line">    IMG_PREFIX_URL: (options.mode === &#x27;production&#x27;) ? &#x27;https://soarlin.github.io/&#x27; : &#x27;/&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  let config = &#123;</span><br><span class="line">    context: path.resolve(__dirname, &#x27;src&#x27;),</span><br><span class="line">    entry: &#123;</span><br><span class="line">      index: &#x27;./js/index.js&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    output: ....,</span><br><span class="line">    module: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        ...,</span><br><span class="line">        &#123;</span><br><span class="line">          test: /\.s[ac]ss$/i,</span><br><span class="line">          use: [</span><br><span class="line">            &#x27;style-loader&#x27;,</span><br><span class="line">            &#x27;css-loader&#x27;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: &#x27;sass-loader&#x27;,</span><br><span class="line">              options: &#123;</span><br><span class="line">                sourceMap: true,</span><br><span class="line">                additionalData: &quot;$imgPrefix: &#x27;&quot; + _VARIABLES.IMG_PREFIX_URL + &quot;&#x27;;&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        ....</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>這樣似乎會將 additionalData 放在所有 Sass/SCSS 的最前方，讓它以變數的方式直接帶入 Sass/SCSS 內，所以就可以直接使用變數</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 傳入 $imgPrefix: _VARIABLES.IMG_PREFIX_URL</span><br><span class="line">.item-bg &#123;</span><br><span class="line">  background-image: url($imgPrefix+&#x27;images/background-0.jpg&#x27;);</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-position: center center;</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上大概就是這在切版遇到的問題，為了找這些方法花了不少時間，所以非得好好紀錄一下，以供後人參考，減少走冤枉路。也讓自己以後可以拿來抄。</p><p>而文中寫到的範例程式，都可以到 Github 上的 <a href="https://github.com/SoarLin/pug-sass-template">pug-sass-template</a> 專案上找到，歡迎大家幫忙按顆星星。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在做前端切版的時候，遇到了一個以前沒注意到的問題，就是在本機端開發時，存取圖片或其他檔案都預設從根目錄開始找 (e.g. &lt;code&gt;/images/...&lt;/code&gt;)，可是當專案開發完，要發佈到其他位置時，圖片等檔案的位置就會有所變更，這時候圖片的路徑就會找不到檔案了，必須要再手動調整過，當然不可能每次都手動一個一個改路徑。&lt;/p&gt;
&lt;p&gt;所以開始著手研究怎麼把路徑的變數，透過 webpack 編譯階段判斷目前是開發環境，還是 production 環境，來改變圖片等檔案的前綴路徑。底下就以 &lt;a href=&quot;https://github.com/SoarLin/pug-sass-template&quot;&gt;pug-sass-template&lt;/a&gt; 專案來說明幾個重要的步驟。&lt;/p&gt;
&lt;h2 id=&quot;Step-1-Webpack-Get-Environment-Variables&quot;&gt;&lt;a href=&quot;#Step-1-Webpack-Get-Environment-Variables&quot; class=&quot;headerlink&quot; title=&quot;Step 1 - Webpack Get Environment Variables&quot;&gt;&lt;/a&gt;Step 1 - Webpack Get Environment Variables&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;參考： &lt;a href=&quot;https://webpack.js.org/guides/environment-variables/&quot;&gt;https://webpack.js.org/guides/environment-variables/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面網址提供的範例在傳入參數時，一個與多個在接收時，其實有所不同，這邊也是踩了雷才注意到&lt;br&gt;&lt;strong&gt;Webpack 版本 : 4.43.0&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 傳入兩組 env 時&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npx webpack --env NODE_ENV=local --env production --progress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 在 webpack 內&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;module.exports = (env) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(&amp;#x27;env:&amp;#x27;, env); // [ &amp;#x27;NODE_ENV=local&amp;#x27;, &amp;#x27;production&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(&amp;#x27;Production: &amp;#x27;, env.production); // true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    entry: &amp;#x27;./src/index.js&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      filename: &amp;#x27;bundle.js&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      path: path.resolve(__dirname, &amp;#x27;dist&amp;#x27;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;傳入兩組 env 值的時候，所收到的 env 其實是一組陣列，各別是 &lt;code&gt;--env XXXXX&lt;/code&gt; 裡面的 &lt;code&gt;XXXXX&lt;/code&gt;，但是當傳入的只有一組 env 時，例如：&lt;code&gt;--env production&lt;/code&gt;這時候 env 就是 &lt;code&gt;production&lt;/code&gt; 這個值，就&lt;strong&gt;不再是陣列了&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="sass" scheme="https://soarlin.github.io/tags/sass/"/>
    
    <category term="webpack" scheme="https://soarlin.github.io/tags/webpack/"/>
    
    <category term="pug" scheme="https://soarlin.github.io/tags/pug/"/>
    
  </entry>
  
  <entry>
    <title>Vue 專案搭配 Vuesax / Element UI 開發筆記</title>
    <link href="https://soarlin.github.io/2020/11/08/vuejs-with-element-ui-development-note/"/>
    <id>https://soarlin.github.io/2020/11/08/vuejs-with-element-ui-development-note/</id>
    <published>2020-11-08T13:16:23.000Z</published>
    <updated>2021-07-18T11:02:45.157Z</updated>
    
    <content type="html"><![CDATA[<p>最近因為參加了公司舉辦的 hackathon，總算又有機會回來寫寫 Vue.js 了，太久沒寫真的生疏好多，加上最近 Angular 寫太多，再次回來寫 Vue 看到 .vue 檔裡面放著 template, script, style 覺得程式碼變得好長，不過好處是不用在 VSCode 裡面開一堆 .html, .ts, .scss 等檔案，透過 tab 找起檔案來會快一點點。</p><p>由於參加了兩組比賽，所以可以嘗試不同的東西，這次就找了兩套 UI Component 來搭配使用，一個是使用 <a href="https://vuesax.com/">Vuesax</a>，另一個則是使用 <a href="https://element.eleme.io/">Element</a>，先說結論吧！ Element 用起來比較舒服，除了文件有中文可以看，元件也比較多種可選擇。一開始選擇 Vuesax 時，覺得這套畫面感覺很生動，就選來試試看！但是遇到安裝了 3.x 版，卻找去 4.0 版的說明文件，結果一直覺得怪怪的，好一陣子後才發現。</p><p>不過 Vuesax 的 input 真的做得好精緻，除了有底線顏色、驗證狀態，還可以讓 placeholder 躍升變成 label，以及 checkbox 跟 switch 的一些畫面小動畫，感覺在表單製作上可以做得很精緻，在專案中用它建立了一個簡單的登入畫面覺得很滿意，可惜後來登入頁面被捨棄，沒辦法展現一下。不過實際上在使用 Vuesax 開發時，還是覺得看文件編開發卡卡的，可能還不太習慣用 UI Component 來開發吧！</p><p>後來另一個專案想說換一個玩看看，就選了 Element，發現這個真的好用很多，可能真的因為文件有中文的吧(先加100分)！實作上也覺得 Layout 跟 Container 比較快上手，也可能是經歷了之前一個套件的關係吧！而這次開發時，碰到了幾個小問題，一個是以前也碰過只是解法有點複雜的在 Vue 專案內讓每個元件可以引入共同的 Sass/SCSS 檔案，另一個則是因為用了 UI Component 後可能會遇到的問題，在寫 style 的時候，無法去客製化引用的 UI 元件，正確來說應該是寫的 css selector 無法複寫到元件內的樣式，底下就針對這兩個來記錄說明吧！</p><span id="more"></span><h2 id="開發環境紀錄"><a href="#開發環境紀錄" class="headerlink" title="開發環境紀錄"></a>開發環境紀錄</h2><ul><li>Node v12.18</li><li>npm 6.14.6</li><li>@vue/cli 4.5.6</li></ul><h2 id="Import-Sass-Scss-files-into-Every-Vue-Component"><a href="#Import-Sass-Scss-files-into-Every-Vue-Component" class="headerlink" title="Import Sass/Scss files into Every Vue Component"></a>Import Sass/Scss files into Every Vue Component</h2><p>參考文件 :</p><ol><li><a href="https://css-tricks.com/how-to-import-a-sass-file-into-every-vue-component-in-an-app/">How to Import a Sass File into Every Vue Component in an App</a></li><li><a href="https://medium.com/unalai/vue-%E5%B0%88%E6%A1%88%E4%B8%AD%E5%BC%95%E5%85%A5-scss-%E6%AA%94%E6%A1%88%E7%9A%84%E5%9B%9B%E7%A8%AE%E6%96%B9%E6%B3%95-%E8%A9%B2%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%91%A2-9babcd3a4ef1">Vue CLI 專案中引入 SCSS 檔案的四種方法，該如何使用呢？</a></li></ol><p>這邊忽略建立 Vue 專案的過程，直接進入重點：</p><h3 id="Install-Loader"><a href="#Install-Loader" class="headerlink" title="Install Loader"></a>Install Loader</h3><p>先安裝所需要的 loader，<code>node-sass</code>跟<code>sass-loader</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev node-sass sass-loader</span><br></pre></td></tr></table></figure><h3 id="Create-vue-config-js"><a href="#Create-vue-config-js" class="headerlink" title="Create vue.config.js"></a>Create vue.config.js</h3><p>如果已經有調整過 vue 專案的編譯過程，可能已經新增過這個檔案了，如果還沒有這個檔案就在專案目錄下新增，用以調整 webpack 的設定，這邊載入兩個共用的 scss 檔案，一個是我用來放 css 顏色的變數，而另一個是放一些常用的 mixin</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      sass: &#123;</span><br><span class="line">        data: `</span><br><span class="line">          @import &quot;@/assets/styles/_variables.scss&quot;;</span><br><span class="line">          @import &quot;@/assets/styles/_mixin.scss&quot;;</span><br><span class="line">        `</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外如果 sass-loader 會根據不同版本，有不同的寫法，上述的是 v7 或更舊的版本，</p><ul><li>sass-loader v8 : <code>data</code>請更換為<code>prependData</code></li><li>sass-loader v9 : <code>data</code>請更換為<code>additionalData</code></li></ul><p>做完這兩部，基本上就算完成了。接下來在專案內的 vue 檔撰寫 style 時，都可以套用已經 import 的變數跟 mixin 了。</p><h2 id="Customize-Element-UI-Style"><a href="#Customize-Element-UI-Style" class="headerlink" title="Customize Element-UI Style"></a>Customize Element-UI Style</h2><p>這次在使用 Element UI 的時候，有一些要客製化的需求，但是在 vue 檔的 style 直接寫，似乎無法將 css 套用到 Element UI 上，所以只好上網問問 Google 大神了。</p><p>參考文件 :</p><ol><li><a href="https://medium.com/i-am-mike/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E8%A3%A1%E9%9D%A2%E4%BD%BF%E7%94%A8element-ui%E4%B8%A6%E4%BF%AE%E6%94%B9css%E6%A8%A3%E5%BC%8F%E5%91%A2-f11c1e05787f">如何在Vue裡面使用Element-ui並修改CSS樣式呢？</a></li><li><a href="https://segmentfault.com/q/1010000009483822">Element-UI 不能自定义样式吗</a></li><li><a href="https://medium.com/@debbyji/deep-%E6%98%AF%E4%BB%80%E9%BA%BC-%E8%81%8A%E8%81%8A-vue-%E8%A3%A1%E7%9A%84-scoped-css-d1877f902845">/deep/ 是什麼？ — 聊聊 Vue 裡的 scoped css</a></li></ol><h3 id="Method-1-Remove-‘scoped’"><a href="#Method-1-Remove-‘scoped’" class="headerlink" title="Method 1 - Remove ‘scoped’"></a>Method 1 - Remove ‘scoped’</h3><p>將 vue 檔內 style 的 scoped 參數移除，這樣一來就可以全局套用了，只是缺點就是影響的範圍太廣，實在不是一個很好的方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.el-main &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">　　　　　</span><br><span class="line">// 改寫成下面</span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.el-main &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="Method-2-Customize-at-local"><a href="#Method-2-Customize-at-local" class="headerlink" title="Method 2 - Customize at local"></a>Method 2 - Customize at local</h3><p>將 node_modules 裡面 Element UI 的 scss 整包抓下來自己修改，然後另外放到 assets 目錄下自行修改，並在 main.js 內引入，但是這個真的沒路可走的時候再這麼做吧！不然自己維護一整份也挺累的，而且如果有更新的需求時就慘了</p><ul><li>樣式路徑 <code>node_modules/element-ui/lib/theme-chalk</code></li><li>複製到專案下 <code>assets/element-ui/style</code></li><li>將原本 main.js 的 import 改成</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><span class="line">// 將上面這行改成底下這行</span><br><span class="line">import &#x27;assets/element-ui/style/index.css&#x27;</span><br></pre></td></tr></table></figure><h3 id="Method-3-Use-Deep-Selector"><a href="#Method-3-Use-Deep-Selector" class="headerlink" title="Method 3 - Use Deep Selector"></a>Method 3 - Use Deep Selector</h3><p>這應該是目前最佳的解法，既不用取消 scoped 避免 style 影響到全局，也不用辛苦的維護一整份 css 檔案，而是透過 deep selector 來複寫到元件內的樣式，不過在網路上看到了幾種寫法，自己測試了很多次後，似乎只有一種寫法能正常運作。</p><ul><li>Use <code>&gt;&gt;&gt;</code>，不過這個在 Sass/SCSS 似乎無法被正確解析，應該比較適合單純 CSS 的用法</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">.a &gt;&gt;&gt; .b &#123; /* ... */ &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>Use <code>/deep/</code> or <code>::v-deep</code><br>在一些 pre-processors 的語法下，可以改用上述的兩個語法，不過自己實作時似乎 <code>/deep/</code> 無法正常被解析編譯，只有 <code>::v-deep</code> 試驗成功。</li></ul><p>使用 <code>/deep/</code> 時，編譯會出錯，類似下面的錯誤訊息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Module build failed (from ./node_modules/sass-loader/dist/cjs.js):</span><br><span class="line">SassError: expected selector.</span><br><span class="line">    ╷</span><br><span class="line">278 │       /deep/ .el-input input&#123;</span><br><span class="line">    │       ^</span><br><span class="line">    ╵</span><br><span class="line">  /&lt;MY-VUE-PROJECT&gt;/pages/UserList.vue 278:7  root stylesheet</span><br></pre></td></tr></table></figure><p>底下是一個要修改 el-input 元件邊框顏色的範例，當使用者輸入驗證有錯時，想把 input 的邊框改成紅色</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.add-user-dialog &#123;</span><br><span class="line">  .input-field &#123;</span><br><span class="line">    &amp;.invalid &#123;</span><br><span class="line">      ::v-deep .el-input input &#123;</span><br><span class="line">        border-color: $redColor;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上大概是這次做 Vue 小專案搭配不同的 UI Component Library 的一些心得跟筆記。只是這篇文章無法一氣呵成的寫完，分了三、四天來寫，寫文章記錄真的是件苦差事，不過還是希望自己能繼續保持這個好習慣。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近因為參加了公司舉辦的 hackathon，總算又有機會回來寫寫 Vue.js 了，太久沒寫真的生疏好多，加上最近 Angular 寫太多，再次回來寫 Vue 看到 .vue 檔裡面放著 template, script, style 覺得程式碼變得好長，不過好處是不用在 VSCode 裡面開一堆 .html, .ts, .scss 等檔案，透過 tab 找起檔案來會快一點點。&lt;/p&gt;
&lt;p&gt;由於參加了兩組比賽，所以可以嘗試不同的東西，這次就找了兩套 UI Component 來搭配使用，一個是使用 &lt;a href=&quot;https://vuesax.com/&quot;&gt;Vuesax&lt;/a&gt;，另一個則是使用 &lt;a href=&quot;https://element.eleme.io/&quot;&gt;Element&lt;/a&gt;，先說結論吧！ Element 用起來比較舒服，除了文件有中文可以看，元件也比較多種可選擇。一開始選擇 Vuesax 時，覺得這套畫面感覺很生動，就選來試試看！但是遇到安裝了 3.x 版，卻找去 4.0 版的說明文件，結果一直覺得怪怪的，好一陣子後才發現。&lt;/p&gt;
&lt;p&gt;不過 Vuesax 的 input 真的做得好精緻，除了有底線顏色、驗證狀態，還可以讓 placeholder 躍升變成 label，以及 checkbox 跟 switch 的一些畫面小動畫，感覺在表單製作上可以做得很精緻，在專案中用它建立了一個簡單的登入畫面覺得很滿意，可惜後來登入頁面被捨棄，沒辦法展現一下。不過實際上在使用 Vuesax 開發時，還是覺得看文件編開發卡卡的，可能還不太習慣用 UI Component 來開發吧！&lt;/p&gt;
&lt;p&gt;後來另一個專案想說換一個玩看看，就選了 Element，發現這個真的好用很多，可能真的因為文件有中文的吧(先加100分)！實作上也覺得 Layout 跟 Container 比較快上手，也可能是經歷了之前一個套件的關係吧！而這次開發時，碰到了幾個小問題，一個是以前也碰過只是解法有點複雜的在 Vue 專案內讓每個元件可以引入共同的 Sass/SCSS 檔案，另一個則是因為用了 UI Component 後可能會遇到的問題，在寫 style 的時候，無法去客製化引用的 UI 元件，正確來說應該是寫的 css selector 無法複寫到元件內的樣式，底下就針對這兩個來記錄說明吧！&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="vuejs" scheme="https://soarlin.github.io/tags/vuejs/"/>
    
    <category term="element" scheme="https://soarlin.github.io/tags/element/"/>
    
    <category term="vuesax" scheme="https://soarlin.github.io/tags/vuesax/"/>
    
    <category term="scss" scheme="https://soarlin.github.io/tags/scss/"/>
    
  </entry>
  
  <entry>
    <title>使用 Webpack 製作前端樣板 (以 Pug 與 Sass 開發)</title>
    <link href="https://soarlin.github.io/2020/07/18/pug-sass-boilerplate/"/>
    <id>https://soarlin.github.io/2020/07/18/pug-sass-boilerplate/</id>
    <published>2020-07-18T08:21:27.000Z</published>
    <updated>2021-07-18T11:02:45.157Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E5%89%8D%E7%AB%AF%E6%A8%A3%E6%9D%BF%E4%BD%BF%E7%94%A8-webpack-%E7%94%A2%E7%94%9F">前端樣板使用 Webpack 產生</a><ul><li><a href="#%E5%B0%88%E6%A1%88%E4%BD%8D%E7%BD%AE">專案位置</a></li><li><a href="#%E7%94%A8%E5%88%B0%E7%9A%84%E6%8A%80%E8%A1%93">用到的技術</a></li><li><a href="#%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83">開發環境</a></li><li><a href="#%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%9D">工具安裝</a></li><li><a href="#%E7%9B%AE%E9%8C%84%E6%9E%B6%E6%A7%8B">目錄架構</a></li><li><a href="#webpack-%E8%A8%AD%E5%AE%9A">Webpack 設定</a><ul><li><a href="#webpack-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E6%AA%94">webpack 基本設定檔</a></li><li><a href="#%E9%80%B2%E5%85%A5%E9%BB%9E%E5%92%8C%E4%B8%8A%E4%B8%8B%E6%96%87">進入點和上下文</a></li><li><a href="#%E8%BC%B8%E5%87%BA%E6%AA%94%E6%A1%88">輸出檔案</a></li><li><a href="#devserver">DevServer</a></li><li><a href="#pug-%E8%BD%89-html">Pug 轉 HTML</a></li><li><a href="#sass-rule">Sass rule</a></li><li><a href="#css-rule">CSS rule</a></li><li><a href="#js-rule">JS rule</a></li><li><a href="#images-%E7%9B%B8%E9%97%9C%E8%99%95%E7%90%86">images 相關處理</a></li><li><a href="#%E9%9D%9C%E6%85%8B%E6%AA%94%E6%A1%88%E8%99%95%E7%90%86%E8%88%87%E5%85%B6%E4%BB%96%E8%A8%AD%E5%AE%9A">靜態檔案處理與其他設定</a></li></ul></li></ul></li><li><a href="#%E5%8F%83%E8%80%83%E6%96%87%E7%AB%A0">參考文章</a></li></ul><!-- /TOC --><p><a id="markdown-前端樣板使用-webpack-產生" name="前端樣板使用-webpack-產生"></a></p><h1 id="前端樣板使用-Webpack-產生"><a href="#前端樣板使用-Webpack-產生" class="headerlink" title="前端樣板使用 Webpack 產生"></a>前端樣板使用 Webpack 產生</h1><p>由於之前做過的前端樣板實在是太過時了，除了 node 版本幾跟目前已經差太多了外(當時 v4.x，現在 v12.x)，前端流程的處理工具 gulp 現在也越來越少人知道了，時代的眼淚啊！前端真的是日新月異，每過一陣子，學過的東西就漸漸被淘汰，當時還用了一個現在幾乎沒人知道的 bower 前端套件管理工具，現在大家應該都只知道 npm 這東西吧！</p><p>大概從去年就開始有在想要再弄一個新的前端樣板，以便日後有切版需求的時候可以使用。無奈自己懶惰加上也沒有任何切版的案子，所以就一直停滯沒動作，最近看到女友去接了一個友情外包案，就是要使用 pug + sass 來做切版。</p><p>不過在我完成這個小工具之前，其實網路上應該也很多類似的專案了，甚至還有很多好用的前端開發工具，如： <a href="https://codekitapp.com/">CodeKit</a>、<a href="https://prepros.io/">Prepros</a>、<a href="http://fireapp.kkbox.com/">Fire.app</a>…等工具可以達到這些要求。</p><p>不過這次就當作是練功，順便熟悉一下 Webpack 的一些設定，雖然大部分也是到處複製貼上後，拼湊出來的產物，不過…我也是花了不少時間先理解再<del>抄襲</del>效仿，底下紀錄一下這次的內容。</p><span id="more"></span><p><a id="markdown-專案位置" name="專案位置"></a></p><h2 id="專案位置"><a href="#專案位置" class="headerlink" title="專案位置"></a>專案位置</h2><p><a href="https://github.com/SoarLin/pug-sass-template">https://github.com/SoarLin/pug-sass-template</a></p><p><a id="markdown-用到的技術" name="用到的技術"></a></p><h2 id="用到的技術"><a href="#用到的技術" class="headerlink" title="用到的技術"></a>用到的技術</h2><ul><li>Webpack : 一個強大的前端打包工具，雖然版本在從 2 -&gt; 4 的過程中，許多設定過程不一定能相容，甚至要重學，但是我想應該也趨近於穩定了吧！</li><li>Sass : CSS preprocessor，雖然是叫 Sass，不過實際上我是用 SCSS 的語法來寫啦！如果看不順眼的其實可以自行把 scss 改成 sass</li><li>Pug : HTML 的樣板語言，前身是 Jade，寫起來很精簡，但是…我跟它還很不熟，只是現在要我繼續寫 EJS 可能也忘得差不多了</li></ul><p><a id="markdown-開發環境" name="開發環境"></a></p><h2 id="開發環境"><a href="#開發環境" class="headerlink" title="開發環境"></a>開發環境</h2><p>紀錄這次專案開發時的環境，避免之後每個套件版本差異太多，忘了該回到哪個版本來執行。</p><ul><li>node v12.18.2</li><li>npm 6.14.5</li><li>webpack 4.43</li></ul><p><a id="markdown-工具安裝" name="工具安裝"></a></p><h2 id="工具安裝"><a href="#工具安裝" class="headerlink" title="工具安裝"></a>工具安裝</h2><p>基本上一定要先安裝 node.js 與 npm，這部分就麻煩大家自己先在電腦上安裝吧！<a href="https://nodejs.org/en/">Node.js 官網</a> 然後版本盡可能不要與上述的相差太多，不然很有可能無法運作…XD</p><ol><li><code>npm i -D webpack webpack-cli</code> 先安裝 <code>webpack</code> 與 <code>webpack-cli</code></li><li><code>npm install</code> 安裝專案所需要的套件</li></ol><p><a id="markdown-目錄架構" name="目錄架構"></a></p><h2 id="目錄架構"><a href="#目錄架構" class="headerlink" title="目錄架構"></a>目錄架構</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目錄結構</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│ ├── assets</span><br><span class="line">│ ├── css</span><br><span class="line">│ ├── images</span><br><span class="line">│ ├── js</span><br><span class="line">│ ├── pug</span><br><span class="line">│ └── sass</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure><p>專案目錄下的 README.md 與 package.json 都不是本次討論的重點，主要開發的檔案都放在 <code>src</code> 目錄下，而 webpack 的打包設定都寫在 <code>webpack.config.js</code> 裡面</p><p>大概介紹一下 src 目錄下的結構</p><ul><li><strong>assets</strong> : 用來放置一些靜態文件，可用來放字形檔(fonts), SVG 檔案或其他非圖片的檔案</li><li><strong>images</strong> : 切版時偶爾會需要一些圖片檔案，就可以用來放這邊，如：jpg, png, gif 等</li><li><strong>css</strong> : 一些額外的 css 檔案，這次專案使用到 Bootstrap 的範例，懶得自己重頭寫 css, 就把下載下來的範例 css 放這邊，並且在頁面內載入</li><li><strong>js</strong> : 主要的程式進入點 <code>index.js</code> 放在這裡，另外如果需要自行客製化 js 檔，也可以放這邊，但是記得在 index.js 內 import</li><li><strong>sass</strong> : 用來放切版用的 sass 檔，你可以自行管理裡面的目錄結構</li><li><strong>pug</strong> : HTML 樣板檔案，可以自行設置不同的 layout 來繼承，也能製作共用的區塊來 include 等等，熟悉 pug 開發的人員應該比我還懂的怎麼使用</li></ul><p><a id="markdown-webpack-設定" name="webpack-設定"></a></p><h2 id="Webpack-設定"><a href="#Webpack-設定" class="headerlink" title="Webpack 設定"></a>Webpack 設定</h2><p>這裡我就只針對這次專案調整的部分說明，如果想知道更多細節，還是要去翻 webpack 上的說明。</p><p><a id="markdown-webpack-基本設定檔" name="webpack-基本設定檔"></a></p><h3 id="webpack-基本設定檔"><a href="#webpack-基本設定檔" class="headerlink" title="webpack 基本設定檔"></a>webpack 基本設定檔</h3><p>webpack 在安裝後，需要自己產生一個設定檔，通常會是在專案目錄下新建一個 <code>webpack.config.js</code> 的檔案，而基本的內容會寫上如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#x27;&#x27;,</span><br><span class="line">  output: &#x27;&#x27;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: []</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: []</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a id="markdown-進入點和上下文" name="進入點和上下文"></a></p><h3 id="進入點和上下文"><a href="#進入點和上下文" class="headerlink" title="進入點和上下文"></a>進入點和上下文</h3><p>這裡介紹一下 entry 與 context，entry 顧名思義就是 webpack 要處理的 js 進入點，通常會在這裡開始把需要的套件再逐一 import 進來，而 context 是用來指定入口所處目錄的絕對路徑，之後可以給 entry 與 loader 套用。</p><p>舉例來說：原本的 entry 路徑為 <code>&lt;專案目錄&gt;/src/js/indes.js</code>，但是因為我幾乎把所有開發用到的檔案都放到 src 目錄下，所以我可以使用 context 來指定以後再寫道 entry 或是 loader 的檔案路徑時，都從一個共同的絕對路徑再開始找，也就是 <code>&lt;專案目錄&gt;/src</code></p><p>所以再加入這兩項後，webpack 設定會變成如下：這裏使用到 <code>path.resolve</code> 來指定到專案目錄下 src 的目錄</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">　　　</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  context: path.resolve(__dirname, &#x27;src&#x27;),</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: &#x27;./js/index.js&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  // ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-輸出檔案" name="輸出檔案"></a></p><h3 id="輸出檔案"><a href="#輸出檔案" class="headerlink" title="輸出檔案"></a>輸出檔案</h3><p>指定這次的 bundle 後，輸出的檔案該如何配置。這邊透過 <code>path</code> 指定檔案輸出的絕對路徑，而 filename 用來指定輸出的檔名結構。經過調整後變成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">　　　</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    filename: &#x27;./js/[name].js?[hash:8]&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  // ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-devserver" name="devserver"></a></p><h3 id="DevServer"><a href="#DevServer" class="headerlink" title="DevServer"></a>DevServer</h3><p>開發的過程中，還是需要一個可以即時預覽的 server 來顯示目前狀況，所以這裡使用 <code>webpack-dev-server</code> 這套件，所以需要手動安裝 <code>npm install --save-dev webpack-dev-server</code> 接著再到 webpack 設定內增加 devServer 的設定</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">　　　</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ....</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    compress: true,</span><br><span class="line">    port: 3000</span><br><span class="line">  &#125;,</span><br><span class="line">  // ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-pug-轉-html" name="pug-轉-html"></a></p><h3 id="Pug-轉-HTML"><a href="#Pug-轉-HTML" class="headerlink" title="Pug 轉 HTML"></a>Pug 轉 HTML</h3><p>這次的重點之一，不過我這邊的解法也是去網路上找來的。主要是參考底下參考文章的第二篇，需要安裝三個套件 <code>html-loader</code>、<code>pug-html-loader</code>和<code>html-webpack-plugin</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev html-loader pug-html-loader html-webpack-plugin</span><br></pre></td></tr></table></figure><p>接著再 webpack.config.js 裡面設定調整如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">// 引入 html-webpack-plugin 套件</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.pug$/,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;html-loader&#x27;,</span><br><span class="line">            options: &#123; minimize: false &#125;</span><br><span class="line">            // 不壓縮 HTML</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;pug-html-loader&#x27;,</span><br><span class="line">            options: &#123; pretty: true &#125;</span><br><span class="line">            // 美化 HTML 的編排 (不壓縮HTML的一種)</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./pug/index.pug&#x27;,</span><br><span class="line">      filename: &#x27;index.html&#x27;,</span><br><span class="line">      inject: true,</span><br><span class="line">      chunks: [&#x27;index&#x27;],  // 根據 entry 的名字而定</span><br><span class="line">      minify: &#123;</span><br><span class="line">        sortAttributes: true,</span><br><span class="line">        collapseWhitespace: false, // 折疊空白字元就是壓縮Html</span><br><span class="line">        collapseBooleanAttributes: true, // 折疊布林值属性，例:readonly checked</span><br><span class="line">        removeComments: true, // 移除註釋</span><br><span class="line">        removeAttributeQuotes: true // 移除屬性的引號</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是只有一個 index.pug 檔需要轉換時，但實際上在切版時，肯定不會這麼簡單。當遇到多個 pug 檔需要轉換，這裡建議將要轉換為 html 的 pug 集中放到 <code>/src/pug/</code> 下的第一層目錄，並且透過 glob 這工具抓取目錄下第一層的 pug 檔案後再用 forEach 的方式去撰寫 plugins 裡面的內容。所以可以改成下方這樣。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const glob = require(&#x27;glob&#x27;);</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">// 將原本 module.exports 後的內容改寫道 config 變數內</span><br><span class="line">var config = &#123;</span><br><span class="line">  context: path.resolve(__dirname, &#x27;src&#x27;),</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: &#x27;./js/index.js&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123; //... &#125;,</span><br><span class="line">  devServer: &#123; // ... &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.pug$/,</span><br><span class="line">        use: [ // ... ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    // 將原本的 new HtmlWebpackPlugin 刪除</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 透過 glob 找出所有 pug 檔後用 for 迴圈寫入 plugins 裡面</span><br><span class="line">glob.sync(&#x27;./src/pug/*.pug&#x27;).forEach((path) =&gt; &#123;</span><br><span class="line">  const start = path.indexOf(&#x27;/pug/&#x27;) + 5;</span><br><span class="line">  const end = path.length - 4;</span><br><span class="line">  const name = path.slice(start, end);</span><br><span class="line">  config.plugins.push(</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./pug/&#x27; + name + &#x27;.pug&#x27;,</span><br><span class="line">      filename: name + &#x27;.html&#x27;,</span><br><span class="line">      inject: true,</span><br><span class="line">      chunks: [&#x27;index&#x27;],</span><br><span class="line">      minify: &#123;</span><br><span class="line">        sortAttributes: true,</span><br><span class="line">        collapseWhitespace: false,</span><br><span class="line">        collapseBooleanAttributes: true,</span><br><span class="line">        removeComments: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = config;</span><br></pre></td></tr></table></figure><p><a id="markdown-sass-rule" name="sass-rule"></a></p><h3 id="Sass-rule"><a href="#Sass-rule" class="headerlink" title="Sass rule"></a>Sass rule</h3><p>為了讓 sass 能順利轉換成 css 並且可以在畫面上顯示，需要安裝至少三個 loader 插件與 <code>node-sass</code>、<code>sass-loader</code>、<code>css-loader</code>與<code>style-loader</code>，然後再設定檔內的 module 增加一個 rule</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev node-sass sass-loader css-loader style-loader</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">// ...</span><br><span class="line">var config = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.pug$/,</span><br><span class="line">        use: // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/i,</span><br><span class="line">        use: [</span><br><span class="line">          &#x27;style-loader&#x27;, // Creates `style` nodes from JS strings</span><br><span class="line">          &#x27;css-loader&#x27;, // Translates CSS into CommonJS</span><br><span class="line">          &#x27;sass-loader&#x27; // Compiles Sass to CSS</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// ...</span><br><span class="line">module.exports = config;</span><br></pre></td></tr></table></figure><p><a id="markdown-css-rule" name="css-rule"></a></p><h3 id="CSS-rule"><a href="#CSS-rule" class="headerlink" title="CSS rule"></a>CSS rule</h3><p>因為這次專案用了 Bootstrap 4 的範例，所以直接把範例提供的 css 檔拿來用，所以會有外部 css 需要被載入與顯示，所以需要在 module 內的 rule 增加這個 loader</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">// ...</span><br><span class="line">var config = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.pug$/,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/i,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/i,</span><br><span class="line">        use: [</span><br><span class="line">          &#x27;style-loader&#x27;, // Creates `style` nodes from JS strings</span><br><span class="line">          &#x27;css-loader&#x27; // Translates CSS into CommonJS</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p><a id="markdown-js-rule" name="js-rule"></a></p><h3 id="JS-rule"><a href="#JS-rule" class="headerlink" title="JS rule"></a>JS rule</h3><p>開發時如果在撰寫 js，相信大部分的人應該都會開始寫 ES6 甚至是 ES7 的一些語法了，所以需要多個 babel 來將這些語法轉回 ES5 讓瀏覽器能順利解析，所以會多上這個 rule，不過需要先安裝 <code>@babel/core</code>、<code>babel-loader</code>與<code>@babel/preset-env</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/core @babel/preset-env babel-loader</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ...</span><br><span class="line">var config = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.pug$/,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/i,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/i,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: &#x27;babel-loader&#x27;,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [&#x27;@babel/preset-env&#x27;]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p><a id="markdown-images-相關處理" name="images-相關處理"></a></p><h3 id="images-相關處理"><a href="#images-相關處理" class="headerlink" title="images 相關處理"></a>images 相關處理</h3><p>圖片的處理，也是參考別人的教學，依樣畫葫蘆的使用，不過因為是做樣板，所以實際上沒用到圖片，不過還是可以列出來讓有需要的人參考。需要安裝<code>url-loader</code>與<code>image-webpack-loader</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev url-loader image-webpack-loader</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ...</span><br><span class="line">var config = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.pug$/,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/i,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/i,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(jpe?g|png|gif)$/,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;url-loader&#x27;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: 8192,</span><br><span class="line">              name: &#x27;[path][name].[ext]?[hash:8]&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;image-webpack-loader&#x27;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              mozjpeg: &#123;</span><br><span class="line">                progressive: true,</span><br><span class="line">                quality: 65</span><br><span class="line">              &#125;,</span><br><span class="line">              optipng: &#123;</span><br><span class="line">                enabled: false</span><br><span class="line">              &#125;,</span><br><span class="line">              pngquant: &#123;</span><br><span class="line">                quality: &#x27;65-90&#x27;,</span><br><span class="line">                speed: 4</span><br><span class="line">              &#125;,</span><br><span class="line">              gifsicle: &#123;</span><br><span class="line">                interlaced: false</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p><a id="markdown-靜態檔案處理與其他設定" name="靜態檔案處理與其他設定"></a></p><h3 id="靜態檔案處理與其他設定"><a href="#靜態檔案處理與其他設定" class="headerlink" title="靜態檔案處理與其他設定"></a>靜態檔案處理與其他設定</h3><p>寫到這邊已經寫了好幾個小時，所以有點累了，最後一口氣寫完好了，剩下的幾個設定有</p><ul><li>靜態檔案搬移，使用 <code>copy-webpack-plugin</code> 插件</li><li>每次 build 前的目錄清空，使用 <code>clean-webpack-plugin</code></li><li>加載 jQuery : 因為用到了 Bootstrap 4，所以還是需要 jQuery，這裡使用 webpack 本身的 <code>ProvidePlugin</code></li></ul><p>需要先安裝<code>copy-webpack-plugin</code>、<code>clean-webpack-plugin</code>、<code>jquery</code>與<code>bootstrap</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev copy-webpack-plugin clean-webpack-plugin</span><br><span class="line">npm install --save jquery bootstrap</span><br></pre></td></tr></table></figure><p>所以設定檔會變成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ...</span><br><span class="line">// 增加 webpack 方便之後取得 webpack.ProvidePlugin 插件</span><br><span class="line">const webpack = require(&#x27;webpack&#x27;);</span><br><span class="line">// 清除目錄插件</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;);</span><br><span class="line">// 資料搬移插件</span><br><span class="line">const CopyPlugin = require(&#x27;copy-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line">var config = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  plugins: [</span><br><span class="line">    // 每次先清除前一次 build 的資料</span><br><span class="line">    new CleanWebpackPlugin(),</span><br><span class="line">    // 搬移靜態檔案</span><br><span class="line">    new CopyPlugin(&#123;</span><br><span class="line">      patterns: [</span><br><span class="line">        &#123; from: &#x27;css&#x27;, to: &#x27;css&#x27; &#125;,</span><br><span class="line">        &#123; from: &#x27;images&#x27;, to: &#x27;images&#x27; &#125;,</span><br><span class="line">        &#123; from: &#x27;assets&#x27;, to: &#x27;assets&#x27; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;),</span><br><span class="line">    // 載入 jQuery</span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: &#x27;jquery&#x27;,</span><br><span class="line">      jQuery: &#x27;jquery&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p>大致的設定內容都介紹一輪，完整的 webpack.config.js 可以去我的專案內查看，相差沒太多，但是怕日後忘記每個設定的內容再做什麼，所以趁著記憶猶新的時候，先記錄下來。</p><p><a id="markdown-參考文章" name="參考文章"></a></p><h1 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h1><ol><li><a href="https://magiclen.org/webpack/">如何用 Webpack 來打包 JavaScript、SCSS/CSS、HTML 網頁和任意檔案？</a></li><li><a href="https://medium.com/%E5%B0%8F%E5%BD%A5%E5%BD%A5%E7%9A%84%E5%89%8D%E7%AB%AF%E4%BA%94%E5%9B%9B%E4%B8%89/%E5%9C%A8webpack%E4%B8%AD%E4%BD%BF%E7%94%A8pug%E7%94%A2%E7%94%9Fhtml-24eb9fec22c7">在webpack中使用Pug產生Html</a></li><li><a href="https://www.vialley.com/555/%E5%A6%82%E4%BD%95%E8%A8%AD%E5%AE%9A-webpack-%E7%AD%86%E8%A8%98">如何設定 webpack 筆記</a></li><li><a href="https://guahsu.io/2017/12/vue-cli-webpack-pug-scss-bootstrap4/">Vue-cli 透過 webpack 來加載使用 pug/scss 及 BootStrap4</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%89%8D%E7%AB%AF%E6%A8%A3%E6%9D%BF%E4%BD%BF%E7%94%A8-webpack-%E7%94%A2%E7%94%9F&quot;&gt;前端樣板使用 Webpack 產生&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B0%88%E6%A1%88%E4%BD%8D%E7%BD%AE&quot;&gt;專案位置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%94%A8%E5%88%B0%E7%9A%84%E6%8A%80%E8%A1%93&quot;&gt;用到的技術&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83&quot;&gt;開發環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%9D&quot;&gt;工具安裝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%9B%AE%E9%8C%84%E6%9E%B6%E6%A7%8B&quot;&gt;目錄架構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#webpack-%E8%A8%AD%E5%AE%9A&quot;&gt;Webpack 設定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#webpack-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E6%AA%94&quot;&gt;webpack 基本設定檔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%80%B2%E5%85%A5%E9%BB%9E%E5%92%8C%E4%B8%8A%E4%B8%8B%E6%96%87&quot;&gt;進入點和上下文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%BC%B8%E5%87%BA%E6%AA%94%E6%A1%88&quot;&gt;輸出檔案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#devserver&quot;&gt;DevServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pug-%E8%BD%89-html&quot;&gt;Pug 轉 HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sass-rule&quot;&gt;Sass rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#css-rule&quot;&gt;CSS rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#js-rule&quot;&gt;JS rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#images-%E7%9B%B8%E9%97%9C%E8%99%95%E7%90%86&quot;&gt;images 相關處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%9D%9C%E6%85%8B%E6%AA%94%E6%A1%88%E8%99%95%E7%90%86%E8%88%87%E5%85%B6%E4%BB%96%E8%A8%AD%E5%AE%9A&quot;&gt;靜態檔案處理與其他設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8F%83%E8%80%83%E6%96%87%E7%AB%A0&quot;&gt;參考文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;

&lt;p&gt;&lt;a id=&quot;markdown-前端樣板使用-webpack-產生&quot; name=&quot;前端樣板使用-webpack-產生&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前端樣板使用-Webpack-產生&quot;&gt;&lt;a href=&quot;#前端樣板使用-Webpack-產生&quot; class=&quot;headerlink&quot; title=&quot;前端樣板使用 Webpack 產生&quot;&gt;&lt;/a&gt;前端樣板使用 Webpack 產生&lt;/h1&gt;&lt;p&gt;由於之前做過的前端樣板實在是太過時了，除了 node 版本幾跟目前已經差太多了外(當時 v4.x，現在 v12.x)，前端流程的處理工具 gulp 現在也越來越少人知道了，時代的眼淚啊！前端真的是日新月異，每過一陣子，學過的東西就漸漸被淘汰，當時還用了一個現在幾乎沒人知道的 bower 前端套件管理工具，現在大家應該都只知道 npm 這東西吧！&lt;/p&gt;
&lt;p&gt;大概從去年就開始有在想要再弄一個新的前端樣板，以便日後有切版需求的時候可以使用。無奈自己懶惰加上也沒有任何切版的案子，所以就一直停滯沒動作，最近看到女友去接了一個友情外包案，就是要使用 pug + sass 來做切版。&lt;/p&gt;
&lt;p&gt;不過在我完成這個小工具之前，其實網路上應該也很多類似的專案了，甚至還有很多好用的前端開發工具，如： &lt;a href=&quot;https://codekitapp.com/&quot;&gt;CodeKit&lt;/a&gt;、&lt;a href=&quot;https://prepros.io/&quot;&gt;Prepros&lt;/a&gt;、&lt;a href=&quot;http://fireapp.kkbox.com/&quot;&gt;Fire.app&lt;/a&gt;…等工具可以達到這些要求。&lt;/p&gt;
&lt;p&gt;不過這次就當作是練功，順便熟悉一下 Webpack 的一些設定，雖然大部分也是到處複製貼上後，拼湊出來的產物，不過…我也是花了不少時間先理解再&lt;del&gt;抄襲&lt;/del&gt;效仿，底下紀錄一下這次的內容。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="sass" scheme="https://soarlin.github.io/tags/sass/"/>
    
    <category term="webpack" scheme="https://soarlin.github.io/tags/webpack/"/>
    
    <category term="pug" scheme="https://soarlin.github.io/tags/pug/"/>
    
  </entry>
  
  <entry>
    <title>使用 ESLint 自動修正 Vue 專案語法</title>
    <link href="https://soarlin.github.io/2020/07/05/eslint-auto-fix/"/>
    <id>https://soarlin.github.io/2020/07/05/eslint-auto-fix/</id>
    <published>2020-07-05T06:40:37.000Z</published>
    <updated>2021-07-18T11:02:45.153Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在當工具人的時候，幫忙處理一個 vue 的前端專案，但是發現雖然對方有使用 eslint，但是似乎沒人遵守語法檢查的建議，都非常的隨性，實在是很沒一制性的專案。</p><p>後來想到之前在開發 Nuxt.js 專案時，似乎會自動產生 eslint 修正的語法在 package.json 裡面，所以可以透過 npm 執行某個包含 eslint 自動修正的 script 來將一些語法檢查的錯誤做修正，不過我猜應該能修正的部分會有限制，有些可能還是需要人工介入判斷吧！但是至少可以先一些基本的語法修正。</p><p>後來研究了一下 eslint 本身有提供 <code>--fix</code> 的參數可使用，不過不過這似乎主要針對 .js 檔的修正，如果是在開發 vue 專案時的 .vue 專案，就需要額外安裝套件了，基本可額外安裝 <code>eslint-plugin-vuefix</code> 這個套件，並且在 .eslintrc.js 檔裡面的 plugins 加上 <code>vuefix</code></p><p>操作步驟 :</p><span id="more"></span><ul><li>原本的 package.json 內，新增一個有自動修正的 script <code>lint-fix</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    // ....</span><br><span class="line">    &quot;lint&quot;: &quot;eslint --ext .js,.vue src test/unit test/e2e/specs&quot;,</span><br><span class="line">    &quot;lint-fix&quot;: &quot;eslint --fix --ext .js,.vue src test/unit test/e2e/specs&quot;,</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>安裝自動修正套件 <code>eslint-plugin-vuefix</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save eslint-plugin-vuefix</span><br></pre></td></tr></table></figure><ul><li>在 .eslintrc.js 檔內新增使用插件名稱，如果 vue 專案本身有安裝 <code>eslint-plugin-html</code> 並且載入 .eslintrc.js，這會影響自動修正的插件執行，所以可以將該插件註解或是試著放到 <code>vuefix</code> 插件後面看看</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  plugins: [</span><br><span class="line">    &#x27;vuefix&#x27;,</span><br><span class="line">    // &#x27;html&#x27;    // comment this plugin</span><br><span class="line">  ],</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接著執行新增的 script 來修正， <code>npm run lint-fix</code> 執行後，就大功告成了，不放心的可以在使用原本的 <code>npm run lint</code> 檢查是否還有語法需要修正</li></ul><p>我拿了目前電腦裡面，以前開發的專案來測試，一開始先執行 <code>npm run lint</code>，可以看到一堆語法有問題的提示，大多是字串用了雙引號(Strings must use singlequote)或是多了最後的逗號(Extra semicolon)的問題，以及一些其他問題<br><img src="/images/eslint/eslint-01.png" alt="eslint-check"></p><p>接著透過修正的語法 <code>npm run lint-fix</code> 進行修正後，在使用 <code>npm run lint</code> 檢查，果然語法的問題都修正了！<br><img src="/images/eslint/eslint-02.png" alt="eslint-autofix"></p><p>最後，開發 vue 專案的話，推薦可以使用 <code>eslint-plugin-vue</code>，對於 vue 專案的 Code Style 規範可以根據不同嚴謹程度來規範，當然也包含自動修正的功能，想知道更多細節，可以參考這篇介紹 : <a href="https://pjchender.blogspot.com/2019/07/vue-vue-style-guide-eslint-plugin-vue.html">[Vue] 整合 Vue style guide, eslint-plugin-vue 和 VSCode</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天在當工具人的時候，幫忙處理一個 vue 的前端專案，但是發現雖然對方有使用 eslint，但是似乎沒人遵守語法檢查的建議，都非常的隨性，實在是很沒一制性的專案。&lt;/p&gt;
&lt;p&gt;後來想到之前在開發 Nuxt.js 專案時，似乎會自動產生 eslint 修正的語法在 package.json 裡面，所以可以透過 npm 執行某個包含 eslint 自動修正的 script 來將一些語法檢查的錯誤做修正，不過我猜應該能修正的部分會有限制，有些可能還是需要人工介入判斷吧！但是至少可以先一些基本的語法修正。&lt;/p&gt;
&lt;p&gt;後來研究了一下 eslint 本身有提供 &lt;code&gt;--fix&lt;/code&gt; 的參數可使用，不過不過這似乎主要針對 .js 檔的修正，如果是在開發 vue 專案時的 .vue 專案，就需要額外安裝套件了，基本可額外安裝 &lt;code&gt;eslint-plugin-vuefix&lt;/code&gt; 這個套件，並且在 .eslintrc.js 檔裡面的 plugins 加上 &lt;code&gt;vuefix&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;操作步驟 :&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="eslint" scheme="https://soarlin.github.io/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 遇到 dyld: Library not loaded問題處理</title>
    <link href="https://soarlin.github.io/2019/08/13/mac-library-not-loaded-%E5%95%8F%E9%A1%8C%E8%99%95%E7%90%86/"/>
    <id>https://soarlin.github.io/2019/08/13/mac-library-not-loaded-%E5%95%8F%E9%A1%8C%E8%99%95%E7%90%86/</id>
    <published>2019-08-13T01:14:23.000Z</published>
    <updated>2021-07-18T11:02:45.153Z</updated>
    
    <content type="html"><![CDATA[<!-- MarkdownTOC --><ul><li><a href="#%E4%BD%BF%E7%94%A8-otool-%E5%B7%A5%E5%85%B7%E6%AA%A2%E6%9F%A5%E7%9B%B8%E4%BE%9D%E6%80%A7">使用 otool 工具檢查相依性</a></li><li><a href="#%E4%BD%BF%E7%94%A8-installnametool-%E4%BF%AE%E6%AD%A3-dylib-%E8%B7%AF%E5%BE%91">使用 install_name_tool 修正 dylib 路徑</a></li></ul><!-- /MarkdownTOC --><p>最近在處理 PHP 翻譯檔的問題，好不容易將所有翻譯的資料放到 Onesky 上後，發現下載下來的 .po 檔，要轉成 .mo 檔時，遇到了奇怪的動態庫載入問題。後來迫不得已努力的去找相關資料來解決，好不容易找到一篇教學是我可以看得懂的了。</p><p>我遇到的情況是在使用 <code>msgfmt</code> 指令將 gettext 使用到的翻譯檔 PO 轉成 MO 時，碰到下面的情況</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&gt; msgfmt zoek.po -o zoek.mo</span><br><span class="line">dyld: Library not loaded: /usr/local/lib/libgettextsrc-0.19.8.dylib</span><br><span class="line">  Referenced from: /usr/local/bin/msgfmt</span><br><span class="line">  Reason: image not found</span><br><span class="line">[1]    89445 abort      /usr/local/bin/msgfmt zoek.po -o zoek.mo</span><br></pre></td></tr></table></figure><span id="more"></span><p>簡單的說就是 <code>msgfmt</code> 在運行時，有些相依的動態庫檔案找不到了，而第一個遇到的是 libgettextsrc 這個檔案，因為先前透過 homebrew 安裝 gettext 時，似乎已經更新到 0.20.1 的版本，而舊的 0.19.8 的動態庫檔案可能就因為這樣失效了，所以最簡單的作法就是把 <code>msgfmt</code> 相依的動態庫黨，路徑替換成 homebrew 安裝的新版本上。</p><p><a id="使用-otool-工具檢查相依性"></a></p><h2 id="使用-otool-工具檢查相依性"><a href="#使用-otool-工具檢查相依性" class="headerlink" title="使用 otool 工具檢查相依性"></a>使用 otool 工具檢查相依性</h2><p>針對一個要執行的應用程式，macOS 本身似乎提供了一個工具可以檢查所有相依的檔案位置，那就是 <code>otool</code> 關於這工具的使用方式太多了，這邊只說我會用到的部分！</p><p>檢查應用程式使用到的 libraries 檔案，指令 <code>otool -L &lt;ApplicationName&gt;</code><br>所以用來檢查 msgfmt 後可發現使用到了不少 dylib 檔案</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&gt; otool -L /usr/local/bin/msgfmt</span><br><span class="line">/usr/local/bin/msgfmt:</span><br><span class="line">    /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1454.90.0)</span><br><span class="line">    /usr/local/lib/libgettextsrc-0.19.8.dylib (compatibility version 0.0.0, current version 0.0.0)</span><br><span class="line">    /usr/local/lib/libgettextlib-0.19.8.dylib (compatibility version 0.0.0, current version 0.0.0)</span><br><span class="line">    /usr/lib/libxml2.2.dylib (compatibility version 10.0.0, current version 10.9.0)</span><br><span class="line">    /usr/lib/libncurses.5.4.dylib (compatibility version 5.4.0, current version 5.4.0)</span><br><span class="line">    /usr/local/opt/libunistring/lib/libunistring.2.dylib (compatibility version 4.0.0, current version 4.0.0)</span><br><span class="line">    /usr/local/lib/libintl.9.dylib (compatibility version 11.0.0, current version 11.4.0)</span><br><span class="line">    /usr/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0)</span><br><span class="line">    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4)</span><br></pre></td></tr></table></figure><p>而一開始遇到的 libgettextsrc-0.19.8.dylib 這連結已經失效，所以需要手動替換成 homebrew 安裝 gettext 0.20.1 版本下的檔案，而透過 homebrew 安裝的程式，路徑大多位於 <code>/usr/local/Cellar/</code> 下面，所以在下面找一下 gettext 後可以再看到裡面有 lib 的資料夾，而資料夾下應該就是這次所需要的相關的 dylib 檔案了</p><p><a id="使用-installnametool-修正-dylib-路徑"></a></p><h2 id="使用-install-name-tool-修正-dylib-路徑"><a href="#使用-install-name-tool-修正-dylib-路徑" class="headerlink" title="使用 install_name_tool 修正 dylib 路徑"></a>使用 install_name_tool 修正 dylib 路徑</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">install_name_tool &lt;OldPath&gt; &lt;NewPath&gt; &lt;ApplicationPath&gt;</span><br></pre></td></tr></table></figure><p>這時候我們可以使用 <code>install_name_tool</code> 這個指令來手動更換 dylib 檔案路徑，使用的方式大致上如上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/lib/libgettextsrc-0.19.8.dylib</span><br><span class="line">/usr/local/lib/libgettextlib-0.19.8.dylib</span><br><span class="line">/usr/local/lib/libintl.9.dylib</span><br></pre></td></tr></table></figure><p>而在修正 <code>msgfmt</code> 遇到的問題時，前後總共發現了上面三個 dylib 路徑遺失</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">install_name_tool -change /usr/local/lib/libgettextsrc-0.19.8.dylib /usr/local/Cellar/gettext/0.20.1/lib/libgettextsrc-0.20.1.dylib /usr/local/bin/msgfmt</span><br><span class="line">install_name_tool -change /usr/local/lib/libgettextlib-0.19.8.dylib /usr/local/Cellar/gettext/0.20.1/lib/libgettextlib-0.20.1.dylib /usr/local/bin/msgfmt</span><br><span class="line">install_name_tool -change /usr/local/lib/libintl.9.dylib /usr/local/Cellar/gettext/0.20.1/lib/libintl.8.dylib /usr/local/bin/msgfmt</span><br></pre></td></tr></table></figure><p>所以使用 install_name_tool 修正的指令，大概就像上面這樣</p><p>在替換完這些 dylib 後，就可以正常的使用 <code>msgfmt</code> 來轉換 po 檔成 mo 檔了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msgfmt oooo.po -o xxxx.mo</span><br></pre></td></tr></table></figure><p>沒想到 blog 隔了快一年才更新這麼一篇文章，好慘！從每月一篇到每季一篇，現在直接升級到每年一篇….XD</p>]]></content>
    
    
    <summary type="html">&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8-otool-%E5%B7%A5%E5%85%B7%E6%AA%A2%E6%9F%A5%E7%9B%B8%E4%BE%9D%E6%80%A7&quot;&gt;使用 otool 工具檢查相依性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8-installnametool-%E4%BF%AE%E6%AD%A3-dylib-%E8%B7%AF%E5%BE%91&quot;&gt;使用 install_name_tool 修正 dylib 路徑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;


&lt;p&gt;最近在處理 PHP 翻譯檔的問題，好不容易將所有翻譯的資料放到 Onesky 上後，發現下載下來的 .po 檔，要轉成 .mo 檔時，遇到了奇怪的動態庫載入問題。後來迫不得已努力的去找相關資料來解決，好不容易找到一篇教學是我可以看得懂的了。&lt;/p&gt;
&lt;p&gt;我遇到的情況是在使用 &lt;code&gt;msgfmt&lt;/code&gt; 指令將 gettext 使用到的翻譯檔 PO 轉成 MO 時，碰到下面的情況&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;gt; msgfmt zoek.po -o zoek.mo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dyld: Library not loaded: /usr/local/lib/libgettextsrc-0.19.8.dylib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Referenced from: /usr/local/bin/msgfmt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Reason: image not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1]    89445 abort      /usr/local/bin/msgfmt zoek.po -o zoek.mo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="macOS" scheme="https://soarlin.github.io/categories/macOS/"/>
    
    
    <category term="gettext" scheme="https://soarlin.github.io/tags/gettext/"/>
    
    <category term="msgfmt" scheme="https://soarlin.github.io/tags/msgfmt/"/>
    
    <category term="otool" scheme="https://soarlin.github.io/tags/otool/"/>
    
    <category term="install_name_tool" scheme="https://soarlin.github.io/tags/install-name-tool/"/>
    
  </entry>
  
  <entry>
    <title>設定AWS Lambda開發環境且在VPC內能連到外部網路</title>
    <link href="https://soarlin.github.io/2018/09/01/%E5%A6%82%E4%BD%95%E8%AE%93AWS-Lambda%E5%9C%A8VPC%E5%85%A7%E8%83%BD%E9%80%A3%E5%88%B0%E5%A4%96%E9%83%A8%E7%B6%B2%E8%B7%AF/"/>
    <id>https://soarlin.github.io/2018/09/01/%E5%A6%82%E4%BD%95%E8%AE%93AWS-Lambda%E5%9C%A8VPC%E5%85%A7%E8%83%BD%E9%80%A3%E5%88%B0%E5%A4%96%E9%83%A8%E7%B6%B2%E8%B7%AF/</id>
    <published>2018-09-01T09:49:25.000Z</published>
    <updated>2021-07-18T11:02:45.157Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前需要 Lambda 在 VPC 下運作，才能連接到 VPC 下的 ElasticSearch，但是有需要有外連網路的功能</p></blockquote><p>最近開始在使用 AWS Lambda，為了能跟目前 server 以及 elasticsearch 整合運作，花了約三天的時間才弄得差不多，大概是資質有限吧！沒辦法遇到狀況很快釐清原因，雖然也跟過去沒有太多這方面經驗有關，總之還是把想要的流程串接起來了，謝天謝地！</p><h1 id="Lambda-Setup"><a href="#Lambda-Setup" class="headerlink" title="Lambda Setup"></a>Lambda Setup</h1><p>以前雖然有用過 lambda 開發過一些簡單的東西，可是通常僅限於直接在 lambda console 介面直接撰寫 node.js，唯一一次可以在本地端開發後上傳到 lambda 的小專案是使用別人包好的 <a href="https://github.com/ysugimoto/aws-lambda-image">aws-lambda-image</a> 這個自動針對 S3 image resize/reduce 的套件，只能說真的挺好用的，幫忙推薦一下：</p><p><strong>AWS Lambda Image</strong> : <a href="https://github.com/ysugimoto/aws-lambda-image">https://github.com/ysugimoto/aws-lambda-image</a><br>如果對於上傳到 S3 的圖片想另外做縮圖、壓縮，或是不同尺寸的圖片輸出時，我想這套件應該非常實用。</p><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><p>如果電腦有安裝 <a href="https://aws.amazon.com/tw/cli/">aws-cli</a> 的話，可以考慮參考 aws-lambda-image 專案裡面的 Makefile 檔案，是個很好的學習範本</p><span id="more"></span><p>這裡擷取部分內容，資料來源：<a href="https://github.com/ysugimoto/aws-lambda-image/blob/master/Makefile">https://github.com/ysugimoto/aws-lambda-image/blob/master/Makefile</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lambda:</span><br><span class="line">npm install .</span><br><span class="line">@echo &quot;Factory package files...&quot;</span><br><span class="line">      . . . . . . .</span><br><span class="line">@echo &quot;Create package archive...&quot;</span><br><span class="line">@cd build &amp;&amp; zip -rq aws-lambda-image.zip .</span><br><span class="line">@mv build/aws-lambda-image.zip ./</span><br><span class="line"></span><br><span class="line">uploadlambda: lambda</span><br><span class="line">@if [ -z &quot;$&#123;LAMBDA_FUNCTION_NAME&#125;&quot; ]; then (echo &quot;Please export LAMBDA_FUNCTION_NAME&quot; &amp;&amp; exit 1); fi</span><br><span class="line">aws lambda update-function-code --function-name $&#123;LAMBDA_FUNCTION_NAME&#125; --zip-file fileb://aws-lambda-image.zip</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">@echo &quot;clean up package files&quot;</span><br><span class="line">@if [ -f aws-lambda-image.zip ]; then rm aws-lambda-image.zip; fi</span><br><span class="line">@rm -rf build/*</span><br></pre></td></tr></table></figure><ul><li><code>make lambda</code> : 用來打包要準備上傳 lambda 的 zip 檔</li><li><code>make uploadlambda</code> : 透過 aws-cli 的指令來上傳 zip 檔</li><li><code>make clean</code> : 清除打包的資料</li></ul><p>而其中 <code>$&#123;LAMBDA_FUNCTION_NAME&#125;</code> 這個參數可以直接在環境中透過 export 的方式提前宣告，或是在執行 make 指令時，添加在後面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// xxxxxxxxx 是 AWS Lambda 上的函式名稱</span><br><span class="line">export LAMBDA_FUNCTION_NAME=xxxxxxxxx</span><br><span class="line"></span><br><span class="line">// ==== OR =====</span><br><span class="line"></span><br><span class="line">make uploadlambda -e LAMBDA_FUNCTION_NAME=xxxxxxxxx</span><br></pre></td></tr></table></figure><h2 id="Claudia-js"><a href="#Claudia-js" class="headerlink" title="Claudia.js"></a>Claudia.js</h2><p><a href="https://claudiajs.com/">claudia</a> 這套的功能就是讓你發佈 node.js 專案到 AWS Lambda 用的，本身也提供了很多教學可以參考，<a href="https://claudiajs.com/tutorials/index.html">教學範例</a>:</p><ul><li><a href="https://claudiajs.com/tutorials/installing.html">INSTALLING AND CONFIGURING CLAUDIA.JS</a></li><li><a href="https://claudiajs.com/tutorials/hello-world-lambda.html">HELLO WORLD AWS LAMBDA FUNCTION</a></li><li><a href="https://claudiajs.com/tutorials/hello-world-api-gateway.html">HELLO WORLD FROM API GATEWAY</a></li><li><a href="https://claudiajs.com/tutorials/hello-world-chatbot.html">HELLO WORLD CHAT-BOT USING LAMBDA</a></li><li><a href="https://claudiajs.com/tutorials/deploying-proxy-api.html">DEPLOYING A PROXY API</a></li></ul><p>然而 claudia 的一些操作指令，可以直接看 <a href="https://github.com/claudiajs/claudia">github</a> 上的<a href="https://github.com/claudiajs/claudia/tree/master/docs">說明文件</a>，但是我實在不想花太多時間一個一個慢慢摸索，所以一樣是參考 aws-lambda-image 這專案的 package.json 檔案，然後也只用到兩個指令</p><ul><li><a href="https://github.com/claudiajs/claudia/blob/master/docs/create.md">create</a> : 建立專案使用的指令，不過由於目前的專案有很多設定，所以我選擇手動在 AWS Lambda console 介面建立好函示，並且把相關設定弄好</li><li><a href="https://github.com/claudiajs/claudia/blob/master/docs/update.md">update</a> : 專案更新後，重新打包上傳用的指令</li></ul><h1 id="專案流程"><a href="#專案流程" class="headerlink" title="專案流程"></a>專案流程</h1><p>因為這次專案的流程，是 Server 發生某些需要更新搜尋引擎資料的事件時，先將事件送到 AWS SQS，然後再透過 SQS 觸發 Lambda 來更新 ElasticSearch 的內容，但是因為 ElasticSearch 是在 VPC 的環境內，所以 lambda 也要跟著放到 VPC 下，而 lambda 在更新資料的時候，需要透過 API 來跟 ECS 的 server 要資料，雖然 ECS 跟 lambda 都同樣在 VPC 下，可是 lambda 無法透過 private ip 來存取 API，所以最後解法是讓 lambda 可以從 VPC 內存取外部網路來發送 API，取回所需資料處理後再寫入 ElasticSearch 內。</p><p>這麼說完好像是個很複雜的流程，不過大致上畫一下流程就如下圖。</p><p><img src="/images/AWS/SQS_Lambda_Flow.png" alt="專案流程SQS_Lambda_ES"></p><h1 id="Lambda在VPC內存取網路"><a href="#Lambda在VPC內存取網路" class="headerlink" title="Lambda在VPC內存取網路"></a>Lambda在VPC內存取網路</h1><p>前面鋪成了這麼多，現在才要進入這次寫 blog 的重點，當初也是因為要處理這個流程，花了很久的時間才知道問題，然後才開始找這個方法。其實網路上已經有 AWS 專人教學的文章了，不過我還是想自己在寫一次，以我能理解的方式。</p><p>參考教學：</p><ul><li><a href="https://aws.amazon.com/premiumsupport/knowledge-center/internet-access-lambda-function">How can I grant internet access to my VPC Lambda function?</a></li><li><a href="https://medium.com/@philippholly/aws-lambda-enable-outgoing-internet-access-within-vpc-8dd250e11e12">AWS Lambda: Enable Outgoing Internet Access within VPC</a></li></ul><p>第一篇文章裡面還有精美的影片講解，我想英文跟我一樣不好的人，在看完教學影片，應該也要理解個80%了。根據我實作的結論，大概需要滿足底下這些條件</p><ul><li>Lambda 執行權限<ul><li>Lambda 在 VPC 下的網際網路存取權限(Required)</li><li>Lambda 執行時寫入 cloudwatch log 的權限(Optional，不過一般專案建立都會有，這樣才能再 CloudWatch 下查看 log)</li><li>Lambda 接收 SQS message 的基本操作權限(非必要，只是因為我專案本身需要)</li><li>Lambda 在 VPC 內操作 ElasticSearch 的基本權限(非必要，只是因為我專案本身需要)</li></ul></li><li>Lambda 網路設定<ul><li>位於 VPC 內</li><li>兩個私有子網路(Private Subnet)</li><li>安全群組傳出規則(Outbound rules)，連接埠 : 全部, 目的地 : 0.0.0.0/0</li></ul></li><li>VPC 設定<ul><li>一個 Public Subnet</li><li>兩個 Private Subnet</li><li>兩個 Route table，一個與 Public Subnet 關聯，一個與兩個 Private Subnet 關聯</li><li>Route table(with Public Subnet) 連接 Internet Gateway</li><li>替 Public Subnet 建立 NAT Gateway，並指定一組 Elastic IP</li><li>Route table(with Private Subnet) 連接 NAT Gateway</li></ul></li></ul><h2 id="VPC-設定步驟"><a href="#VPC-設定步驟" class="headerlink" title="VPC 設定步驟"></a>VPC 設定步驟</h2><p>底下的設定步驟，我只是照著<a href="https://youtu.be/JcRKdEP94jM">教學影片</a>來說明，如果有誤，麻煩再指正，感謝！</p><h3 id="建立三個-Subnet"><a href="#建立三個-Subnet" class="headerlink" title="建立三個 Subnet"></a>建立三個 Subnet</h3><p>建立三個 Subnet，一個用來連接外部 Internet，另外兩個為內部私有 Subnet<br><img src="/images/AWS/vpc_step1.png" alt="建立三個 Subnet"></p><h3 id="建立兩個-Route-Table"><a href="#建立兩個-Route-Table" class="headerlink" title="建立兩個 Route Table"></a>建立兩個 Route Table</h3><p>建立兩個 route table，之後一個用來設定連外，一個則是用來設定連內部 subnet 以及橋接用<br><img src="/images/AWS/vpc_step2.png" alt="建立兩個 Route Table"></p><h3 id="Route-table-關聯-Public-Subnet"><a href="#Route-table-關聯-Public-Subnet" class="headerlink" title="Route table 關聯 Public Subnet"></a>Route table 關聯 Public Subnet</h3><p>將一個要設定外連規則的 route table 與 public subnet 關聯<br><img src="/images/AWS/vpc_step3.png" alt="Route table 關聯 Public Subnet"></p><h3 id="Route-table-關聯-Private-Subnet"><a href="#Route-table-關聯-Private-Subnet" class="headerlink" title="Route table 關聯 Private Subnet"></a>Route table 關聯 Private Subnet</h3><p>將另一個 route table 與兩個內部 subnet 關聯<br><img src="/images/AWS/vpc_step4.png" alt="Route table 關聯 Private Subnet"></p><h3 id="建立-Internet-Gateway"><a href="#建立-Internet-Gateway" class="headerlink" title="建立 Internet Gateway"></a>建立 Internet Gateway</h3><p>建立 internet gateway 並與 VPC 關聯，這樣 VPC 才有外連的能力<br><img src="/images/AWS/vpc_step5.png" alt="建立 Internet Gateway"></p><h3 id="設定-Route-table-外連規則"><a href="#設定-Route-table-外連規則" class="headerlink" title="設定 Route table 外連規則"></a>設定 Route table 外連規則</h3><p>將建立好的 internet gateway 給要設定外連的 route table 來設定外連的規則</p><ul><li>新增一個 route : <code>0.0.0.0/0 -&gt; igw-xxxxx</code></li></ul><p><img src="/images/AWS/vpc_step6.png" alt="設定 Route table 外連規則"></p><h3 id="建立-NAT-Gateway"><a href="#建立-NAT-Gateway" class="headerlink" title="建立 NAT Gateway"></a>建立 NAT Gateway</h3><p>建立 nat gateway 來橋接內部子網路與連外的子網路</p><ul><li>建立時，選擇 public subnet</li><li>新增一個 Elastic IP (注意:每個 region 基本限制為五個 elastic ip)</li></ul><p><img src="/images/AWS/vpc_step7.png" alt="建立 NAT Gateway"></p><h3 id="設定-Route-table-橋接規則"><a href="#設定-Route-table-橋接規則" class="headerlink" title="設定 Route table 橋接規則"></a>設定 Route table 橋接規則</h3><p>替關聯內部 subnet 的 route table 增加規則</p><ul><li>新增一個 route : <code>0.0.0.0/0 -&gt; nat-xxxxxx</code></li></ul><p><img src="/images/AWS/vpc_step8.png" alt="設定 Route table 橋接規則"></p><h3 id="IAM-建立-Lambda-執行權限"><a href="#IAM-建立-Lambda-執行權限" class="headerlink" title="IAM 建立 Lambda 執行權限"></a>IAM 建立 Lambda 執行權限</h3><p>記得幫 Lambda 執行的角色增加 VPC 存取執行的權限</p><p><img src="/images/AWS/vpc_step9.png" alt="IAM 建立 Lambda 執行權限"></p><h3 id="Lambda-VPC-設定"><a href="#Lambda-VPC-設定" class="headerlink" title="Lambda VPC 設定"></a>Lambda VPC 設定</h3><p>回到 Lambda 內，檢查一下 VPC 的設定，選擇兩個 private subnet</p><p><img src="/images/AWS/vpc_step10.png" alt="Lambda VPC 設定"></p><p>底下是我自己畫的架構圖，不過沒有很確定這樣畫是不是正確，如果有人發現錯誤，麻煩再幫我指正，感謝！</p><p><img src="/images/AWS/Lambda_VPC_Internet.png" alt="Lambda於VPC內外連架構"></p><p>最後這些都做完後，可以利用底下的 code 檢查一下是否成功取得外部IP</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="function"><span class="keyword">function</span>(<span class="params">event, context, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> option = &#123;</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;api.ipify.org&quot;</span>,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/?format=JSON&quot;</span>,</span><br><span class="line">    <span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  callback(<span class="literal">null</span>, Request(option).</span><br><span class="line">    then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;IP = &#x27;</span>, data);</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Request</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> req = http.request(options, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> body = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="comment">// console.log(&#x27;Status:&#x27;, res.statusCode);</span></span><br><span class="line">      <span class="comment">// console.log(&#x27;Headers:&#x27;, JSON.stringify(res.headers));</span></span><br><span class="line">      res.setEncoding(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">      res.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> body += chunk);</span><br><span class="line">      res.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;Successfully processed HTTP response&#x27;);</span></span><br><span class="line">        <span class="comment">// If we know it&#x27;s JSON, parse it</span></span><br><span class="line">        <span class="keyword">if</span> (res.headers[<span class="string">&#x27;content-type&#x27;</span>] === <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line">            body = <span class="built_in">JSON</span>.parse(body);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve(body);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">    &#125;);</span><br><span class="line">    req.write(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    req.end();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;目前需要 Lambda 在 VPC 下運作，才能連接到 VPC 下的 ElasticSearch，但是有需要有外連網路的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近開始在使用 AWS Lambda，為了能跟目前 server 以及 elasticsearch 整合運作，花了約三天的時間才弄得差不多，大概是資質有限吧！沒辦法遇到狀況很快釐清原因，雖然也跟過去沒有太多這方面經驗有關，總之還是把想要的流程串接起來了，謝天謝地！&lt;/p&gt;
&lt;h1 id=&quot;Lambda-Setup&quot;&gt;&lt;a href=&quot;#Lambda-Setup&quot; class=&quot;headerlink&quot; title=&quot;Lambda Setup&quot;&gt;&lt;/a&gt;Lambda Setup&lt;/h1&gt;&lt;p&gt;以前雖然有用過 lambda 開發過一些簡單的東西，可是通常僅限於直接在 lambda console 介面直接撰寫 node.js，唯一一次可以在本地端開發後上傳到 lambda 的小專案是使用別人包好的 &lt;a href=&quot;https://github.com/ysugimoto/aws-lambda-image&quot;&gt;aws-lambda-image&lt;/a&gt; 這個自動針對 S3 image resize/reduce 的套件，只能說真的挺好用的，幫忙推薦一下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AWS Lambda Image&lt;/strong&gt; : &lt;a href=&quot;https://github.com/ysugimoto/aws-lambda-image&quot;&gt;https://github.com/ysugimoto/aws-lambda-image&lt;/a&gt;&lt;br&gt;如果對於上傳到 S3 的圖片想另外做縮圖、壓縮，或是不同尺寸的圖片輸出時，我想這套件應該非常實用。&lt;/p&gt;
&lt;h2 id=&quot;Makefile&quot;&gt;&lt;a href=&quot;#Makefile&quot; class=&quot;headerlink&quot; title=&quot;Makefile&quot;&gt;&lt;/a&gt;Makefile&lt;/h2&gt;&lt;p&gt;如果電腦有安裝 &lt;a href=&quot;https://aws.amazon.com/tw/cli/&quot;&gt;aws-cli&lt;/a&gt; 的話，可以考慮參考 aws-lambda-image 專案裡面的 Makefile 檔案，是個很好的學習範本&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://soarlin.github.io/categories/AWS/"/>
    
    
    <category term="lambda" scheme="https://soarlin.github.io/tags/lambda/"/>
    
    <category term="elasticsearch" scheme="https://soarlin.github.io/tags/elasticsearch/"/>
    
    <category term="SQS" scheme="https://soarlin.github.io/tags/SQS/"/>
    
    <category term="vpc" scheme="https://soarlin.github.io/tags/vpc/"/>
    
    <category term="subnet" scheme="https://soarlin.github.io/tags/subnet/"/>
    
    <category term="internet gateway" scheme="https://soarlin.github.io/tags/internet-gateway/"/>
    
    <category term="nat gateway" scheme="https://soarlin.github.io/tags/nat-gateway/"/>
    
  </entry>
  
  <entry>
    <title>Vue.Js 專案開發紀錄 Part 3</title>
    <link href="https://soarlin.github.io/2018/08/12/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-3/"/>
    <id>https://soarlin.github.io/2018/08/12/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-3/</id>
    <published>2018-08-12T01:44:28.000Z</published>
    <updated>2021-07-18T11:02:45.157Z</updated>
    
    <content type="html"><![CDATA[<p>距離上次寫這個開發紀錄，已經過了快一個月，都忘了當初寫的感覺，以及要記錄的東西有哪些了</p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>存取 API 的部分，基本上就是用 axios 來做 ajax，不過這次參考了某篇文章的做法，把 API 在傳送前跟接收後都做了一層共同的處理，因為在處理 CROS 的時候，每次 API 的 header 都有些相同的資訊要傳送，所以就另外抽出來實作，而接收端的話，就一起針對錯誤情況做些簡單的處理。</p><p>所以另外寫了一個 interceptor.js 來處理，另外在發起 POST 的 request 時，如果 Content-Type 不是 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>或<code>text/plain</code>，會變成 <code>Preflighted</code> 請求，變成在 POST 前會先有個 OPTION 的請求，後端在寫 Allow Methods 裡面，記得把 OPTIONS 加進去</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import i18n from &#x27;@/i18n&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">// 判斷目前環境，來決定 API 網址</span><br><span class="line">import &#123; getAPIBaseUrl &#125; from &#x27;./helpers&#x27;</span><br><span class="line">　　</span><br><span class="line">/**</span><br><span class="line"> * Config</span><br><span class="line"> */</span><br><span class="line">axios.defaults.baseURL = getAPIBaseUrl()</span><br><span class="line">axios.defaults.timeout = 10000</span><br><span class="line">axios.defaults.transformRequest = (data) =&gt; &#123; return JSON.stringify(data) &#125;</span><br><span class="line">// header 資訊帶 cookie，但是後端不能設置 Access-Control-Allow-Origin: &#x27;*&#x27;,</span><br><span class="line">axios.defaults.withCredentials = true</span><br><span class="line">axios.defaults.headers = &#123;</span><br><span class="line">  &#x27;Accept&#x27;: &#x27;application/json&#x27;,</span><br><span class="line">  &#x27;Content-Type&#x27;: &#x27;application/json;charset=UTF-8&#x27;,</span><br><span class="line">  &#x27;Accept-Language&#x27;: i18n.locale</span><br><span class="line">&#125;</span><br><span class="line">　　</span><br><span class="line">/**</span><br><span class="line"> * 發送前處理</span><br><span class="line"> */</span><br><span class="line">axios.interceptors.request.use(config =&gt; &#123;</span><br><span class="line">  return config</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">  console.group(&#x27;[Axios][Interceptor] Request Error&#x27;)</span><br><span class="line">  console.log(error)</span><br><span class="line">  console.groupEnd()</span><br><span class="line">  return Promise.reject(error.response)</span><br><span class="line">&#125;)</span><br><span class="line">　　</span><br><span class="line">/**</span><br><span class="line"> * 發送後處理</span><br><span class="line"> */</span><br><span class="line">axios.interceptors.response.use(data =&gt; &#123;</span><br><span class="line">  return data.data</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">  console.group(&#x27;[Axios][Interceptor] Response Error&#x27;)</span><br><span class="line">  console.log(error)</span><br><span class="line">  console.groupEnd()</span><br><span class="line">  let errorMsg = error.message</span><br><span class="line">  if (error.response !== undefined) &#123;</span><br><span class="line">    errorMsg = error.response.data.message</span><br><span class="line">  &#125;</span><br><span class="line">  return Promise.reject(errorMsg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default axios</span><br></pre></td></tr></table></figure><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><p>整個專案最先被載入的檔案，基本上就是把所有該 package 起來的檔案都先 import 進來</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">// 最外層頁面的 vue 檔</span><br><span class="line">import App from &#x27;./pages/App&#x27;</span><br><span class="line">// router</span><br><span class="line">import router from &#x27;./router&#x27;</span><br><span class="line">// Vuex</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">// Vue-axios</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import VueAxios from &#x27;vue-axios&#x27;</span><br><span class="line">　　</span><br><span class="line">// Semantic UI，這次專案用到的 CSS Framework</span><br><span class="line">import &#x27;semantic-ui-css/semantic.min.css&#x27;</span><br><span class="line">import &#x27;semantic-ui-css/semantic.min.js&#x27;</span><br><span class="line">import &#x27;semantic-ui-calendar/dist/calendar.css&#x27;</span><br><span class="line">// custom semantic-ui-calendar js file</span><br><span class="line">import &#x27;./assets/semantic-ui-calendar/calendar.js&#x27;</span><br><span class="line">　　</span><br><span class="line">// vuex-store</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line">// i18n</span><br><span class="line">import i18n from &#x27;./i18n&#x27;</span><br><span class="line">// Swiper</span><br><span class="line">import VueAwesomeSwiper from &#x27;vue-awesome-swiper&#x27;</span><br><span class="line">// Firebase Cloud Messaging</span><br><span class="line">import firebase from &#x27;firebase/app&#x27;</span><br><span class="line">import &#x27;firebase/messaging&#x27;</span><br><span class="line">　　</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">// Vue-axios</span><br><span class="line">Vue.use(VueAxios, axios)</span><br><span class="line">// Swiper</span><br><span class="line">Vue.use(VueAwesomeSwiper)</span><br><span class="line">　　</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line">　　</span><br><span class="line">// init Firebase</span><br><span class="line">firebase.initializeApp(process.env.FIREBASE_CONFIG)</span><br><span class="line">// 為了方便使用，把 firebase messaging 寫到 Vue 的 prototype</span><br><span class="line">// Retrieve Firebase Messaging object, assign to Vue Object</span><br><span class="line">Vue.prototype.$messaging = firebase.messaging()</span><br><span class="line">// Add the public key generated from the Firebase console</span><br><span class="line">Vue.prototype.$messaging.usePublicVapidKey(process.env.VAPID_KEY)</span><br><span class="line">// Change server-worker.js register path</span><br><span class="line">navigator.serviceWorker.register(&#x27;/static/firebase-messaging-sw.js&#x27;)</span><br><span class="line">  .then((registration) =&gt; &#123;</span><br><span class="line">    Vue.prototype.$swRegistration = registration</span><br><span class="line">    Vue.prototype.$messaging.useServiceWorker(registration)</span><br><span class="line">  &#125;).catch(err =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">　　</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  i18n,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p>其實有點猶豫該不該寫測試的東西，因為我的測試有點胡亂寫，想到啥寫啥，也沒有詳細的 unit test，似乎就只是針對 component 裡面的畫面跟 method 盡可能地把測試寫一輪，還沒有把所有情況都寫進去，感覺就是有寫有交代…XD，所以還滿想有人可以來指導一下，測試的部分該怎麼規劃跟實作才能算是比較完善的測試。</p><h2 id="unit"><a href="#unit" class="headerlink" title="unit"></a>unit</h2><p>專案的測試當初在建立的時候，選用 jest，使用的套件應該是 <code>vue-jest</code>，為了把測試的環境改到可以順利執行，當初也是花了好一番功夫，因為有用到 <code>window.localStorage</code> 以及 jquery 用法與 i18n 設定</p><p><strong>unit/setup.js</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import $ from &#x27;jquery&#x27;</span><br><span class="line">import &#x27;mock-local-storage&#x27; // 算是實作 localStorage 的行為並且複寫 global 與 window</span><br><span class="line">// 載入 jQuery</span><br><span class="line">global.$ = global.jQuery = $</span><br><span class="line">　　</span><br><span class="line">// 模擬 window.localStorage</span><br><span class="line">global.window = &#123;&#125;</span><br><span class="line">window.localStorage = global.localStorage</span><br><span class="line">// 預設用中文語系測試</span><br><span class="line">global.localStorage.setItem(&#x27;LANGUAGE&#x27;, &#x27;zh-TW&#x27;)</span><br><span class="line">　　</span><br><span class="line">Vue.config.productionTip = false</span><br></pre></td></tr></table></figure><p><strong>jest.conf.js</strong> 這隻只有稍微調整一些東西</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">　　</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  rootDir: path.resolve(__dirname, &#x27;../../&#x27;),</span><br><span class="line">  moduleFileExtensions: [</span><br><span class="line">    &#x27;js&#x27;,</span><br><span class="line">    &#x27;json&#x27;,</span><br><span class="line">    &#x27;vue&#x27;</span><br><span class="line">  ],</span><br><span class="line">  moduleNameMapper: &#123;</span><br><span class="line">    &#x27;^@/(.*)$&#x27;: &#x27;&lt;rootDir&gt;/src/$1&#x27;,</span><br><span class="line">    &#x27;\\.(css)$&#x27;: &#x27;&lt;rootDir&gt;/node_modules/jest-css-modules&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  transform: &#123;</span><br><span class="line">    &#x27;^.+\\.js$&#x27;: &#x27;&lt;rootDir&gt;/node_modules/babel-jest&#x27;,</span><br><span class="line">    &#x27;.*\\.(vue)$&#x27;: &#x27;&lt;rootDir&gt;/node_modules/vue-jest&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  testPathIgnorePatterns: [</span><br><span class="line">    &#x27;&lt;rootDir&gt;/test/e2e&#x27;</span><br><span class="line">  ],</span><br><span class="line">  snapshotSerializers: [&#x27;&lt;rootDir&gt;/node_modules/jest-serializer-vue&#x27;],</span><br><span class="line">  setupFiles: [&#x27;&lt;rootDir&gt;/test/unit/setup&#x27;],</span><br><span class="line">  // --&gt; Option &quot;mapCoverage&quot; has been removed, as it&#x27;s no longer necessary.</span><br><span class="line">  // mapCoverage: true,</span><br><span class="line">  coverageDirectory: &#x27;&lt;rootDir&gt;/test/unit/coverage&#x27;,</span><br><span class="line">  collectCoverageFrom: [</span><br><span class="line">    &#x27;src/**/*.&#123;js,vue&#125;&#x27;,</span><br><span class="line">    &#x27;!src/assets/**/*.js&#x27;,  // 這裏用來避免自己客製化的檔案被算入</span><br><span class="line">    &#x27;!src/main.js&#x27;,</span><br><span class="line">    &#x27;!src/router/index.js&#x27;,</span><br><span class="line">    &#x27;!**/node_modules/**&#x27;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後進入測試 component 的部分，也是慢慢摸索出怎麼寫，先不管是否符合單元測試或整合測試，我還是先以能夠個別測試過 xxx.vue 的檔案為主，而測試的撰寫，可以參考<a href="https://vue-test-utils.vuejs.org/zh/guides/">Vue Test Unit</a></p><p><strong>XXXXX.sepc.js</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; shallow, createLocalVue &#125; from &#x27;@vue/test-utils&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">import VueI18n from &#x27;vue-i18n&#x27;</span><br><span class="line">import i18n from &#x27;@/i18n&#x27;</span><br><span class="line">import router from &#x27;@/router&#x27;</span><br><span class="line">import moment from &#x27;moment&#x27;</span><br><span class="line">　　</span><br><span class="line">import &#x27;semantic-ui-css/semantic.min.js&#x27;</span><br><span class="line">import &#x27;@/assets/semantic-ui-calendar/calendar&#x27;</span><br><span class="line">　　</span><br><span class="line">// Component</span><br><span class="line">import Component from &#x27;@/pages/&lt;path-to-component&gt;.vue&#x27;　　</span><br><span class="line">// Mixin</span><br><span class="line">import tools from &#x27;@/mixin/tools&#x27;</span><br><span class="line">// Stubs</span><br><span class="line">import TimePicker from &#x27;@/components/time-picker&#x27;</span><br><span class="line"></span><br><span class="line">const localVue = createLocalVue()</span><br><span class="line">localVue.use(Vuex)</span><br><span class="line">localVue.use(VueI18n)</span><br><span class="line">localVue.use(router)</span><br><span class="line">localVue.mixin(tools)</span><br><span class="line">　　</span><br><span class="line">describe(&#x27;Login.vue&#x27;, () =&gt; &#123;</span><br><span class="line">  let getters</span><br><span class="line">  let actions</span><br><span class="line">  let store</span><br><span class="line">  let wrapper</span><br><span class="line">　　</span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    // 元件內使用到 store 內的 getter</span><br><span class="line">    getters = &#123;</span><br><span class="line">      getXXXXXXX: () =&gt; &#x27;ooxxxx&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    // 元件內使用到 store 內的 actions</span><br><span class="line">    actions = &#123;</span><br><span class="line">      setOOXXXX: jest.fn()</span><br><span class="line">    &#125;</span><br><span class="line">    store = new Vuex.Store(&#123;</span><br><span class="line">      state: &#123;</span><br><span class="line">        loading: false,</span><br><span class="line">        lang: &#x27;zh-TW&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      getters,</span><br><span class="line">      actions</span><br><span class="line">    &#125;)</span><br><span class="line">    stubs = &#123;</span><br><span class="line">      &#x27;time-picker&#x27;: TimePicker</span><br><span class="line">    &#125;</span><br><span class="line">    wrapper = shallow(Component, &#123; i18n, router, store, stubs, localVue &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">　　</span><br><span class="line">  it(&#x27;mounted &amp; computed test&#x27;, () =&gt; &#123;</span><br><span class="line">    ......</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>寫到最後，已經不曉得該怎麼寫了，總而言之就先把目前專案開發的一些事項筆記下來，雖然可能過兩年就不能再使用了，畢竟前端的技術推陳出新，一直有新工具跑出來，讓學習的人覺得困擾，很難再學一次吃好幾年了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;距離上次寫這個開發紀錄，已經過了快一個月，都忘了當初寫的感覺，以及要記錄的東西有哪些了&lt;/p&gt;
&lt;h2 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h2&gt;&lt;p&gt;存取 API 的部分，基本上就是用 axios 來做 ajax，不過這次參考了某篇文章的做法，把 API 在傳送前跟接收後都做了一層共同的處理，因為在處理 CROS 的時候，每次 API 的 header 都有些相同的資訊要傳送，所以就另外抽出來實作，而接收端的話，就一起針對錯誤情況做些簡單的處理。&lt;/p&gt;
&lt;p&gt;所以另外寫了一個 interceptor.js 來處理，另外在發起 POST 的 request 時，如果 Content-Type 不是 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;、&lt;code&gt;multipart/form-data&lt;/code&gt;或&lt;code&gt;text/plain&lt;/code&gt;，會變成 &lt;code&gt;Preflighted&lt;/code&gt; 請求，變成在 POST 前會先有個 OPTION 的請求，後端在寫 Allow Methods 裡面，記得把 OPTIONS 加進去&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="vuex" scheme="https://soarlin.github.io/tags/vuex/"/>
    
    <category term="vuejs" scheme="https://soarlin.github.io/tags/vuejs/"/>
    
    <category term="axios" scheme="https://soarlin.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Vue.Js 專案開發紀錄 Part 2</title>
    <link href="https://soarlin.github.io/2018/07/22/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-2/"/>
    <id>https://soarlin.github.io/2018/07/22/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-2/</id>
    <published>2018-07-22T07:01:49.000Z</published>
    <updated>2021-07-18T11:02:45.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mixin-內容"><a href="#mixin-內容" class="headerlink" title="mixin 內容"></a>mixin 內容</h2><p>這裡是以前的習慣養成的，其實不一定是個好作法，我會將某些 .vue 裡面，可以共用的 method 或是某些比較獨立的 method 抽出來另外做成 mixin 然後在 import 來用，雖然立意良好，但實際執行上，有時會變成把一個很大的 .vue 檔抽出部分 method 放去 mixin 來使用。</p><h2 id="pages-內容"><a href="#pages-內容" class="headerlink" title="pages 內容"></a>pages 內容</h2><p>這裡才是放我主要網站頁面架構的 vue 元件，目前分成四個目錄以及一個 Home.vue 與 App.vue 檔</p><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><p>這是原本專案建立時產生的 vue 檔，基本上所有內容都在從這裡面產生，底下的範例雖然會透過判斷 <code>getLoading</code> 來切換 loading 與顯示畫面，不過我後來實際開發時，把每個頁面或是每個區塊 loading 又另外做處理，所以最外層這個 loading 就沒再用了</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;getLoading&quot; class=&quot;ui active inverted dimmer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;ui text loader&quot;&gt;Loading&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;router-view class=&quot;body&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      &#x27;getLoading&#x27;</span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    console.log(&#x27;App created&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;sass&quot;&gt;</span><br><span class="line">.body</span><br><span class="line">  margin: 0</span><br><span class="line">  padding: 0</span><br><span class="line">  width: 100%</span><br><span class="line">  height: 100%</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>整個 App.vue 裡面主要就放一個 <code>&lt;router-view /&gt;</code>，讓 vue-router 來處理要渲染的內容，一開始的頁面是根目錄 <code>/</code>，所以會依據 routes 裡設定 path 為 <code>/</code> 來載入頁面，而這頁就是 Home.vue，所以簡單來說 App.vue 就是包住整個 route 要渲染的內容，而一開始渲染 <code>/</code> 這個路徑的檔案</p><h2 id="router-內容"><a href="#router-內容" class="headerlink" title="router 內容"></a>router 內容</h2><p>這部分才是重點之一，畢竟過去開發 vue.js 的經驗都是某個頁面內需要複雜操作的時候，才將該區塊改寫成 vue.js，然後載入頁面的時候一起把 build 好的 js 載入使用，而這次真的要靠 vue.js 來架構整個網站的路徑，所以也是第一次學習怎麼寫前端 route</p><p>使用 <a href="https://router.vuejs.org/">vue-router</a> Vue.js 官方的路由管理器，底下例子會用到</p><ul><li>HTML5 History Mode</li><li>Nested Routes 嵌套路由</li><li>Route Meta Fields(路由元信息) 用來判斷是否需要驗證用戶登入狀態</li><li>Navigation Guards 的 Global Guards，用來作用戶登入檢查</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Router from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">import store from &#x27;../store/index&#x27;</span><br><span class="line"></span><br><span class="line">import Home from &#x27;@/pages/Home&#x27;</span><br><span class="line">　　　</span><br><span class="line">// Auth: Login, ResetPassword</span><br><span class="line">import Login from &#x27;@/pages/auth/login&#x27;</span><br><span class="line">　　　</span><br><span class="line">// Product Page</span><br><span class="line">import Products from &#x27;@/pages/products/products-root&#x27;</span><br><span class="line">import ProductsWeekly from &#x27;@/pages/products/products-weekly&#x27;</span><br><span class="line">import ProductsMonthly from &#x27;@/pages/products/products-monthly&#x27;</span><br><span class="line">　　　</span><br><span class="line">Vue.use(Router)</span><br><span class="line">　　　</span><br><span class="line">const router = new Router(&#123;</span><br><span class="line">  mode: &#x27;history&#x27;,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/&#x27;,</span><br><span class="line">      name: &#x27;Home&#x27;,</span><br><span class="line">      component: Home,</span><br><span class="line">      meta: &#123; requiresAuth: true &#125;,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: &#x27;products&#x27;,</span><br><span class="line">          name: &#x27;Products&#x27;,</span><br><span class="line">          component: Products,</span><br><span class="line">          meta: &#123; requiresAuth: true &#125;,</span><br><span class="line">          children: [</span><br><span class="line">            &#123;</span><br><span class="line">              path: &#x27;weekly&#x27;,</span><br><span class="line">              name: &#x27;ProductsWeekly&#x27;,</span><br><span class="line">              component: ProductsWeekly,</span><br><span class="line">              meta: &#123; requiresAuth: true &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              path: &#x27;monthly&#x27;,</span><br><span class="line">              name: &#x27;ProductsMonthly&#x27;,</span><br><span class="line">              component: ProductsMonthly,</span><br><span class="line">              meta: &#123; requiresAuth: true &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/login&#x27;,</span><br><span class="line">      name: &#x27;Login&#x27;,</span><br><span class="line">      component: Login,</span><br><span class="line">      meta: &#123; requiresAuth: false &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 當 url path 不符合 router 表的時候，預設轉址到</span><br><span class="line">    // 順序一定要最後面</span><br><span class="line">    &#123; path: &#x27;/*&#x27;, redirect: &#x27;/login&#x27; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const isLogged = function () &#123;</span><br><span class="line">  let storeLoggedIn = store.getters.getLoggedIn</span><br><span class="line">  let sessionLoggedIn = sessionStorage.getItem(&#x27;LoggedIn&#x27;)</span><br><span class="line">  return storeLoggedIn || sessionLoggedIn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;to=&#x27;, to.fullPath, &#x27;| from=&#x27;, from.fullPath)</span><br><span class="line">  if (to.matched.some(record =&gt; record.meta.requiresAuth) &amp;&amp; !isLogged()) &#123;</span><br><span class="line">    // 如果 router 轉跳的頁面需要驗證 requiresAuth: true</span><br><span class="line">    // 尚未登入時，導向 login 頁面, 網址帶入 redirect，以便登入後重新導向</span><br><span class="line">    next(&#123;</span><br><span class="line">      path: &#x27;/login&#x27;,</span><br><span class="line">      query: &#123; redirect: to.fullPath &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next() // 往下繼續執行</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h2 id="store-內容"><a href="#store-內容" class="headerlink" title="store 內容"></a>store 內容</h2><p>這也是主要重點之一，Vue.js 的狀態管理模式 <a href="https://vuex.vuejs.org/zh/">vuex</a> 相關的檔案都放在這邊了，開發過程中需要搭配 <a href="https://github.com/vuejs/vue-devtools">devtools extension</a> 的 Chrome 插件來使用，包保事半功倍</p><h3 id="目錄結構"><a href="#目錄結構" class="headerlink" title="目錄結構"></a>目錄結構</h3><p>目前的目錄結構如下，為了功能細分，所以有拆出 modules，以及 root.js 來放切換語系等功能</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/store</span><br><span class="line">├── index.js</span><br><span class="line">├── modules</span><br><span class="line">│   ├── auth.js</span><br><span class="line">│   ├── notify.js</span><br><span class="line">│   ├── orders.js</span><br><span class="line">│   ├── products.js</span><br><span class="line">│   ├── resources.js</span><br><span class="line">│   └── token.js</span><br><span class="line">└── root.js</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><p>index.js 的內容大致如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">　　　</span><br><span class="line">// root</span><br><span class="line">import &#123; state, actions, mutations, getters &#125; from &#x27;./root.js&#x27;</span><br><span class="line">　　　</span><br><span class="line">// modules</span><br><span class="line">import auth from &#x27;./modules/auth&#x27;</span><br><span class="line">import products from &#x27;./modules/products&#x27;</span><br><span class="line">　　　</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">　　　</span><br><span class="line">const debug = process.env.NODE_ENV !== &#x27;production&#x27;</span><br><span class="line">　　　</span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  // root</span><br><span class="line">  state,</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  getters,</span><br><span class="line">  // 整理過的 modules</span><br><span class="line">  modules: &#123;</span><br><span class="line">    auth,</span><br><span class="line">    products,</span><br><span class="line">  &#125;,</span><br><span class="line">  strict: debug</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="root-js"><a href="#root-js" class="headerlink" title="root.js"></a>root.js</h3><p>而 root.js 放了些 global 使用的 state 與比較重要的語系切換設定，這裡只列出切換語言的相關程式碼</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 為了設定語系引入 Vue</span><br><span class="line">import i18n from &#x27;@/i18n&#x27;</span><br><span class="line">　　　</span><br><span class="line">export const types = &#123;</span><br><span class="line">  SET_LANGUAGE: &#x27;SET_LANGUAGE&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">export const state = &#123;</span><br><span class="line">  lang: localStorage.getItem(&#x27;LANGUAGE&#x27;) || &#x27;zh-TW&#x27;</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">export const getters = &#123;</span><br><span class="line">  getLanguage: state =&gt; state.lang,</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">export const actions = &#123;</span><br><span class="line">  setLanguage (&#123; commit &#125;, lang) &#123;</span><br><span class="line">    commit(types.SET_LANGUAGE, lang)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">export const mutations = &#123;</span><br><span class="line">  [types.SET_LANGUAGE] (state, setlang) &#123;</span><br><span class="line">    state.lang = setlang</span><br><span class="line">    localStorage.setItem(&#x27;LANGUAGE&#x27;, setlang)</span><br><span class="line">    // 改變全域語系設定</span><br><span class="line">    i18n.locale = state.lang</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在 vue component 切換語系時，只要呼叫 <code>setLanguage</code> 就好</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">changeLanguage (value) &#123;</span><br><span class="line">  this.$store.dispatch(&#x27;setLanguage&#x27;, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><p>而其他 store 模組，大致上如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const state = &#123;</span><br><span class="line">  payload: null</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">const getters = &#123;</span><br><span class="line">  getPayload: state =&gt; state.payload</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">const actions = &#123;</span><br><span class="line">  acitonName (&#123; commit &#125;, payload) &#123;</span><br><span class="line">    commit(mutationFunc, payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">const mutations = &#123;</span><br><span class="line">  mutationFunc (state, payload) &#123;</span><br><span class="line">    state.payload = payload</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">export default &#123;</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  actions,</span><br><span class="line">  mutations</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>雖然看起來都只是把寫過的 code 貼上來，畢竟也是當初花了不少時間寫的，雖然有資料可以參考，參考的資料都是比較精簡的，真的要應用到專案裡，還是有很多需要自己調整的部分，做這個紀錄也只是為了之後有跡可循可以自己參考用</p><p>未完…待續….</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;mixin-內容&quot;&gt;&lt;a href=&quot;#mixin-內容&quot; class=&quot;headerlink&quot; title=&quot;mixin 內容&quot;&gt;&lt;/a&gt;mixin 內容&lt;/h2&gt;&lt;p&gt;這裡是以前的習慣養成的，其實不一定是個好作法，我會將某些 .vue 裡面，可以共用的 method 或是某些比較獨立的 method 抽出來另外做成 mixin 然後在 import 來用，雖然立意良好，但實際執行上，有時會變成把一個很大的 .vue 檔抽出部分 method 放去 mixin 來使用。&lt;/p&gt;
&lt;h2 id=&quot;pages-內容&quot;&gt;&lt;a href=&quot;#pages-內容&quot; class=&quot;headerlink&quot; title=&quot;pages 內容&quot;&gt;&lt;/a&gt;pages 內容&lt;/h2&gt;&lt;p&gt;這裡才是放我主要網站頁面架構的 vue 元件，目前分成四個目錄以及一個 Home.vue 與 App.vue 檔&lt;/p&gt;
&lt;h3 id=&quot;App-vue&quot;&gt;&lt;a href=&quot;#App-vue&quot; class=&quot;headerlink&quot; title=&quot;App.vue&quot;&gt;&lt;/a&gt;App.vue&lt;/h3&gt;&lt;p&gt;這是原本專案建立時產生的 vue 檔，基本上所有內容都在從這裡面產生，底下的範例雖然會透過判斷 &lt;code&gt;getLoading&lt;/code&gt; 來切換 loading 與顯示畫面，不過我後來實際開發時，把每個頁面或是每個區塊 loading 又另外做處理，所以最外層這個 loading 就沒再用了&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="vuex" scheme="https://soarlin.github.io/tags/vuex/"/>
    
    <category term="i18n" scheme="https://soarlin.github.io/tags/i18n/"/>
    
    <category term="vuejs" scheme="https://soarlin.github.io/tags/vuejs/"/>
    
    <category term="webpack" scheme="https://soarlin.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 專案開發紀錄 Part 1</title>
    <link href="https://soarlin.github.io/2018/07/22/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-1/"/>
    <id>https://soarlin.github.io/2018/07/22/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-1/</id>
    <published>2018-07-22T01:24:42.000Z</published>
    <updated>2021-07-18T11:02:45.157Z</updated>
    
    <content type="html"><![CDATA[<p>頭一次用 Vue.js 來開發整個網站的專案，雖然還沒全部做完，還是先來做一下至目前為止的一些記錄，提供日後有需要的時候可以參考。專案是使用 vue-cli 3.0 版本產生的，環境所需 <code>Node &gt;=8.</code>，目前本機環境 node.js v6.9.5，因為有舊專案的需求，所以不敢直接更新上去，所以使用 nvm 來安裝不同版本的 node.js</p><p>初始化專案指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue init webpack &lt;project-name&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 這裏 project-name 以 vue-hello 為例</span><br><span class="line"></span><br><span class="line">? Project name vue-hello</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author Soar &lt;soar.lin@gmail.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Install vue-router? Yes</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? Set up unit tests Yes</span><br><span class="line">? Pick a test runner jest</span><br><span class="line">? Setup e2e tests with Nightwatch? Yes</span><br><span class="line">? Should we run `npm install` for you after the project has been created? (recommended) (Use arrow keys) yarn</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated &quot;vue-hello&quot;.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Installing project dependencies ...</span><br><span class="line"># ========================</span><br><span class="line">yarn install v1.3.2</span><br><span class="line">info No lockfile found.</span><br><span class="line">[1/5] 🔍  Validating package.json...</span><br><span class="line">[2/5] 🔍  Resolving packages...</span><br><span class="line">.....</span><br><span class="line">[3/5] 🚚  Fetching packages...</span><br><span class="line">[##############################################################################################------------------------] 975/1223</span><br><span class="line">   vue-cli · Generated &quot;vue-hello&quot;.</span><br><span class="line"></span><br><span class="line"># Installing project dependencies ...</span><br><span class="line">[4/5] 🔗  Linking dependencies...</span><br><span class="line">[5/5] 📃  Building fresh packages...</span><br><span class="line">success Saved lockfile.</span><br><span class="line">✨  Done in 68.73s.</span><br><span class="line"></span><br><span class="line">Running eslint --fix to comply with chosen preset rules...</span><br><span class="line"># ========================</span><br><span class="line"></span><br><span class="line">yarn run v1.3.2</span><br><span class="line">$ eslint --ext .js,.vue src test/unit test/e2e/specs --fix</span><br><span class="line">✨  Done in 2.24s.</span><br><span class="line"></span><br><span class="line"># Project initialization finished!</span><br><span class="line"># ========================</span><br><span class="line"></span><br><span class="line">To get started:</span><br><span class="line"></span><br><span class="line">  cd vue-hello</span><br><span class="line">  npm run dev</span><br><span class="line"></span><br><span class="line">Documentation can be found at https://vuejs-templates.github.io/webpack</span><br></pre></td></tr></table></figure><h1 id="專案目錄演進"><a href="#專案目錄演進" class="headerlink" title="專案目錄演進"></a>專案目錄演進</h1><p><img src="/images/vue2/project-src.png" alt="Vue專案目錄結構演進"></p><p>綠色框框的部分，隨著專案持續開發下去，內容越來越多，也持續在做些目錄的調整，雖然覺得還可以改得更好，不過目前專案就一人開發，所以我覺得還行就這麼繼續下去了。</p><h2 id="assets-內容"><a href="#assets-內容" class="headerlink" title="assets 內容"></a>assets 內容</h2><p>assets 的內容主要都用來放些程式在編譯時，會共用到的檔案，由於不想把圖檔一起做編譯，所以後來都移到 <code>/static/images/</code> 下了，而 <code>semantic-ui-calendar</code> 則是因為手動調整了一些這個套件的內容，雖然發了 pull request，不過該專案的作者似乎不太想理我…Orz，所以只好每次編譯都得另外載入自己修改的 js 檔</p><p>而 <code>/assets/sass/</code> 下目前放著兩個檔案，每次 vue component 編譯時，皆會預先載入 resources.sass，然後再透過 resources.sass 來 <code>import common.sass</code>，至於修改方式在上一篇文章有<a href="http://soarlin.github.io/2018/06/02/Vue-%E4%BD%BF%E7%94%A8Firebase-Cloud-Messaging/#Vue-%E5%B0%88%E6%A1%88%E5%85%A7%E4%BD%BF%E7%94%A8%E5%85%B1%E5%90%8C-SASS-%E8%B3%87%E6%BA%90">寫道</a></p><ul><li>resources.sass : 用來定義CSS顏色變數，mixin function，media query 語法等等</li><li>common.sass : 用來撰寫一些客製化的共通元件 style，如：sidebar, modal, button …等</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// resources.sass</span><br><span class="line">　　　</span><br><span class="line">/* Colors */</span><br><span class="line">$greeny-blue: #34aeab</span><br><span class="line">$grapefruit: #fc5857</span><br><span class="line">$flat-blue: #398eab</span><br><span class="line">$denim: #366474</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">@mixin ellipsis($line:1)</span><br><span class="line">  text-overflow: ellipsis</span><br><span class="line">  overflow: hidden</span><br><span class="line"></span><br><span class="line">  @if $line == 1</span><br><span class="line">    white-space: nowrap</span><br><span class="line">  @else</span><br><span class="line">    display: -webkit-box</span><br><span class="line">    -webkit-line-clamp: $line</span><br><span class="line">    -webkit-box-orient: vertical</span><br><span class="line"></span><br><span class="line">@mixin size($w, $h:$w, $bdrs:0)</span><br><span class="line">  width: $w</span><br><span class="line">  height: $h</span><br><span class="line">  border-radius: $bdrs</span><br><span class="line"></span><br><span class="line">@mixin flex($jc:center, $ai:center)</span><br><span class="line">  display: flex</span><br><span class="line">  justify-content: $jc</span><br><span class="line">  align-items: $ai</span><br><span class="line"></span><br><span class="line">/* large desktop */</span><br><span class="line">$desktop-lg-min: 1200px;</span><br><span class="line">/* normal desktop range */</span><br><span class="line">$desktop-max:    1199px;</span><br><span class="line">$desktop-min:     992px;</span><br><span class="line">/* tablet range */</span><br><span class="line">$tablet-max:      991px;</span><br><span class="line">$tablet-min:      768px;</span><br><span class="line">$mobile-max:      767px;</span><br><span class="line">$mobile-min:      480px;</span><br><span class="line"></span><br><span class="line">@mixin lg-desktop</span><br><span class="line">  @media screen and (min-width: $desktop-lg-min)</span><br><span class="line">    @content</span><br><span class="line">@mixin desktop</span><br><span class="line">  @media screen and (max-width: $desktop-max)</span><br><span class="line">    @content</span><br><span class="line">@mixin tablet</span><br><span class="line">  @media screen and (max-width: $tablet-max)</span><br><span class="line">    @content</span><br><span class="line">@mixin phone</span><br><span class="line">  @media screen and (max-width: $mobile-max)</span><br><span class="line">    @content</span><br><span class="line">@mixin phoneV</span><br><span class="line">  @media screen and (max-width: $mobile-min)</span><br><span class="line">    @content</span><br><span class="line"></span><br><span class="line">/* margin-top 10~100 */</span><br><span class="line">@for $i from 1 through 10</span><br><span class="line">  .mt#&#123;$i&#125;0</span><br><span class="line">    margin-top: $i * 10px</span><br><span class="line"></span><br><span class="line">/* margin-bottom 10~100 */</span><br><span class="line">@for $i from 1 through 10</span><br><span class="line">  .mb#&#123;$i&#125;0</span><br><span class="line">    margin-bottom: $i * 10px</span><br><span class="line"></span><br><span class="line">@import &#x27;./common.sass&#x27;</span><br></pre></td></tr></table></figure><h2 id="components-內容"><a href="#components-內容" class="headerlink" title="components 內容"></a>components 內容</h2><p>原本會將每個頁面的 .vue 檔放在這裡，做了一陣子後覺得，頁面歸頁面，這目錄下還是放些單純一點的元件，事實證明好像沒什麼差別，單純就是自己爽就好，目前這裡放了些某些畫面上會使用到的元件，有個小型客製化的時間選擇器，用來選擇每間隔 15 分鐘的時間，另外的是畫面的 sidebar 內容，sidebar 內容其實做了很多東西，不過由於不算是完整頁面，還是被我歸類到這目錄下了</p><h2 id="helpers-內容"><a href="#helpers-內容" class="headerlink" title="helpers 內容"></a>helpers 內容</h2><p>之前不曉得在哪裡看到有個教學用了這樣的目錄，然後裡面主要是定義一些變數讓整個專案來使用，很想學習這樣的做法，不過目前有點東施效顰吧！裡面也沒放幾個變數，一個是 CDN 路徑，一個是 Object hasOwnProperty 的檢查，不過另外寫了一個取得目前執行環境所用到的 API 路徑，以及一堆時間計算、字串處理的 function</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import moment from &#x27;moment&#x27;</span><br><span class="line">　　　</span><br><span class="line">const helpers = &#123;</span><br><span class="line">  getParameterByName (name, url) &#123;</span><br><span class="line">    if (!url) url = window.location.href</span><br><span class="line">    name = name.replace(/[[\]]/g, &#x27;\\$&amp;&#x27;)</span><br><span class="line">    let regex = new RegExp(&#x27;[?&amp;|#]&#x27; + name + &#x27;(=([^&amp;#]*)|&amp;|#|$)&#x27;)</span><br><span class="line">    let results = regex.exec(url)</span><br><span class="line">    if (!results) return null</span><br><span class="line">    if (!results[2]) return &#x27;&#x27;</span><br><span class="line">    return decodeURIComponent(results[2].replace(/\+/g, &#x27; &#x27;))</span><br><span class="line">  &#125;,</span><br><span class="line">  isEmpty (obj) &#123;</span><br><span class="line">    // null and undefined are &quot;empty&quot;</span><br><span class="line">    if (obj == null) return true</span><br><span class="line"></span><br><span class="line">    // Assume if it has a length property with a non-zero value</span><br><span class="line">    // that that property is correct.</span><br><span class="line">    if (obj.length &gt; 0) return false</span><br><span class="line">    if (obj.length === 0) return true</span><br><span class="line"></span><br><span class="line">    // If it isn&#x27;t an object at this point</span><br><span class="line">    // it is empty, but it can&#x27;t be anything *but* empty</span><br><span class="line">    // Is it empty?  Depends on your application.</span><br><span class="line">    if (typeof obj !== &#x27;object&#x27;) return true</span><br><span class="line"></span><br><span class="line">    // Otherwise, does it have any properties of its own?</span><br><span class="line">    // Note that this doesn&#x27;t handle</span><br><span class="line">    // toString and valueOf enumeration bugs in IE &lt; 9</span><br><span class="line">    for (var key in obj) &#123;</span><br><span class="line">      if (hasOwnProperty.call(obj, key)) return false</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">  &#125;,</span><br><span class="line">  getCurrentTime (format) &#123;</span><br><span class="line">    return moment().format(format)</span><br><span class="line">  &#125;,</span><br><span class="line">  getNextDate (format) &#123;</span><br><span class="line">    return moment().add(1, &#x27;days&#x27;).format(format)</span><br><span class="line">  &#125;,</span><br><span class="line">  getPrevDate (format) &#123;</span><br><span class="line">    return moment().subtract(1, &#x27;days&#x27;).format(format)</span><br><span class="line">  &#125;,</span><br><span class="line">  nl2br (str, isXhtml) &#123;</span><br><span class="line">    var breakTag = (isXhtml || typeof isXhtml === &#x27;undefined&#x27;) ? &#x27;&lt;br /&gt;&#x27; : &#x27;&lt;br&gt;&#x27;</span><br><span class="line">    return (str + &#x27;&#x27;).replace(/([^&gt;\r\n]?)(\r\n|\n\r|\r|\n)/g, &#x27;$1&#x27; + breakTag + &#x27;$2&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  thousandComma (number) &#123;</span><br><span class="line">    let num = number.toString()</span><br><span class="line">    let pattern = /(-?\d+)(\d&#123;3&#125;)/</span><br><span class="line"></span><br><span class="line">    while (pattern.test(num)) &#123;</span><br><span class="line">      num = num.replace(pattern, &#x27;$1,$2&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    return num</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default helpers</span><br></pre></td></tr></table></figure><h2 id="i18n-內容"><a href="#i18n-內容" class="headerlink" title="i18n 內容"></a>i18n 內容</h2><p>顧名思義就是用來放多語系的檔案，當初為了把多語系的部分搞定也是四處找資料，花了不少時間改好自己用的樣子</p><p>目前使用的 <a href="https://github.com/kazupon/vue-i18n">vue-i18n</a>的v.7.6版，<a href="http://kazupon.github.io/vue-i18n/introduction.html">參考文件</a></p><p>i18n 目錄如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/i18n</span><br><span class="line">├── index.js</span><br><span class="line">└── languages</span><br><span class="line">    ├── en-US.json</span><br><span class="line">    ├── ja-JP.json</span><br><span class="line">    ├── zh-CN.json</span><br><span class="line">    └── zh-TW.json</span><br></pre></td></tr></table></figure><p>index.js 內容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">// Vuex-i18n</span><br><span class="line">import VueI18n from &#x27;vue-i18n&#x27;</span><br><span class="line">// i18n</span><br><span class="line">import zhTW from &#x27;./languages/zh-TW.json&#x27;</span><br><span class="line">import zhCN from &#x27;./languages/zh-CN.json&#x27;</span><br><span class="line">import jaJP from &#x27;./languages/ja-JP.json&#x27;</span><br><span class="line">import enUS from &#x27;./languages/en-US.json&#x27;</span><br><span class="line"></span><br><span class="line">// Vuex-i18n</span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line">const messages = &#123;</span><br><span class="line">  &#x27;zh-TW&#x27;: zhTW,</span><br><span class="line">  &#x27;zh-CN&#x27;: zhCN,</span><br><span class="line">  &#x27;ja-JP&#x27;: jaJP,</span><br><span class="line">  &#x27;en-US&#x27;: enUS</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1.檢查 localStorage 語系</span><br><span class="line">// 2.檢查瀏覽器語系</span><br><span class="line">// 3.預設英文語系</span><br><span class="line">let locale = localStorage.getItem(&#x27;LANGUAGE&#x27;) || navigator.language || &#x27;en-US&#x27;</span><br><span class="line"></span><br><span class="line">const i18n = new VueI18n(&#123;</span><br><span class="line">  locale,</span><br><span class="line">  fallbackLocale: &#x27;zh-TW&#x27;,</span><br><span class="line">  messages</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default i18n</span><br></pre></td></tr></table></figure><p>而 languages 下的檔案內容，以 zh-TW.json 為例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;shortMonths&quot;: [&quot;1月&quot;, &quot;2月&quot;, &quot;3月&quot;, &quot;4月&quot;, &quot;5月&quot;, &quot;6月&quot;, &quot;7月&quot;, &quot;8月&quot;, &quot;9月&quot;, &quot;10月&quot;, &quot;11月&quot;, &quot;12月&quot;],</span><br><span class="line">  &quot;longMonths&quot;: [&quot;一月&quot;, &quot;二月&quot;, &quot;三月&quot;, &quot;四月&quot;, &quot;五月&quot;, &quot;六月&quot;, &quot;七月&quot;, &quot;八月&quot;, &quot;九月&quot;, &quot;十月&quot;, &quot;十一月&quot;, &quot;十二月&quot;],</span><br><span class="line">  &quot;shortDays&quot;: [&quot;日&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;],</span><br><span class="line">  &quot;longDays&quot;: [&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;],</span><br><span class="line">  &quot;天&quot;: &quot;天&quot;,</span><br><span class="line">  &quot;時&quot;: &quot;時&quot;,</span><br><span class="line">  &quot;分&quot;: &quot;分&quot;,</span><br><span class="line">  &quot;小時&quot;: &quot;小時&quot;,</span><br><span class="line">  &quot;分鐘&quot;: &quot;分鐘&quot;,</span><br><span class="line"></span><br><span class="line">  &quot;確定&quot;: &quot;確定&quot;,</span><br><span class="line">  &quot;取消&quot;: &quot;取消&quot;,</span><br><span class="line">  &quot;關閉&quot;: &quot;關閉&quot;,</span><br><span class="line">  &quot;儲存&quot;: &quot;儲存&quot;,</span><br><span class="line">  &quot;上一步&quot;: &quot;上一步&quot;,</span><br><span class="line">  &quot;下一步&quot;: &quot;下一步&quot;,</span><br><span class="line"></span><br><span class="line">  &quot;消費稅 X%&quot;: &quot;消費稅 &#123;0&#125;%&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在 .vue 檔內使用時，範例如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;日期：&#123;&#123; displayToday &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">  &lt;button&gt;&#123;&#123; $t(&#x27;確定&#x27;) &#125;&#125;&lt;/button&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; $t(&#x27;消費稅 X%&#x27;, [tax]) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import moment from &#x27;moment&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tax: 8</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    displayToday () &#123;</span><br><span class="line">      let yyyy = moment().year()</span><br><span class="line">      let mm = moment().month()</span><br><span class="line">      let dd = moment().date()</span><br><span class="line">      let weekday = moment().day()</span><br><span class="line">      // 2018年7月22(日)</span><br><span class="line">      return yyyy + &#x27;年&#x27; + this.$i18n.t(&#x27;shortMonths&#x27;)[mm] + dd + &#x27;日&#x27; + &#x27;(&#x27; + this.$i18n.t(&#x27;shortDays&#x27;)[weekday] + &#x27;)&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因為要寫的東西太多，所以決定偷懶分成不同 Part 來寫</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;頭一次用 Vue.js 來開發整個網站的專案，雖然還沒全部做完，還是先來做一下至目前為止的一些記錄，提供日後有需要的時候可以參考。專案是使用 vue-cli 3.0 版本產生的，環境所需 &lt;code&gt;Node &amp;gt;=8.&lt;/code&gt;，目前本機環境 node.js v6.9.5，因為有舊專案的需求，所以不敢直接更新上去，所以使用 nvm 來安裝不同版本的 node.js&lt;/p&gt;
&lt;p&gt;初始化專案指令&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vue init webpack &amp;lt;project-name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="vuex" scheme="https://soarlin.github.io/tags/vuex/"/>
    
    <category term="i18n" scheme="https://soarlin.github.io/tags/i18n/"/>
    
    <category term="vuejs" scheme="https://soarlin.github.io/tags/vuejs/"/>
    
    <category term="webpack" scheme="https://soarlin.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue 使用 Firebase Cloud Messaging</title>
    <link href="https://soarlin.github.io/2018/06/02/Vue-%E4%BD%BF%E7%94%A8Firebase-Cloud-Messaging/"/>
    <id>https://soarlin.github.io/2018/06/02/Vue-%E4%BD%BF%E7%94%A8Firebase-Cloud-Messaging/</id>
    <published>2018-06-02T00:54:34.000Z</published>
    <updated>2021-07-18T11:02:45.153Z</updated>
    
    <content type="html"><![CDATA[<!-- MarkdownTOC --><ul><li>Vue 專案內使用共同 SASS 資源</li><li>Vue 專案目錄結構<ul><li>manifest.json</li><li>firebase-messaging-sw.js</li><li>src/main.js</li></ul></li><li>Get Push Token</li><li>Get Push Notification<ul><li>網站開啟時，收到推播</li><li>網頁關閉下，收到推播</li></ul></li><li>發送推播</li></ul><!-- /MarkdownTOC --><p>這幾個月來一直懶得更新文章，其實一直想找時間把最近工作的一些事項做些紀錄，結果都一直在看新入坑女團(GFriend)的影片，由於昨天一整天一直在鬼打牆，早上打破一片牆，下午又再遇到一片牆，好在下班前有所突破，趁著記憶猶新的時候，趕緊紀錄一下。</p><p>其實到目前為止，本身對於 PWA (Progressive Web Apps) 沒啥研究，所以對 Service Worker 也不太了解，在這種情況下就去串接 Firebase Cloud Messaging，真的有點越級挑戰了，所以一直碰到問題也很正常，甚至一度不曉得該先解決什麼問題，雖然下班前有完成一個簡單的 Web Push Notification，但還是覺得有些運氣成份在。</p><p>前情提要一下，目前的前端專案是使用 <code>vue-cli 3.0</code> 版搭配 webpack 樣板建置的，其實對於 webpack 的一堆設定也都還沒完全了解，所以三不五時會遇到一些問題，加上 vue-cli 版本比較新，有時上網找答案常常會找到 2.x 版的一些例子，只能先了解後會意，然後再 try &amp; error 的解決。</p><p>有個自己每次重開機就會遇到的問題：</p><ul><li>node 版本需要 8.x 以上才能執行，所以透過 nvm 來裝不同版本切換</li></ul><h2 id="Vue-專案內使用共同-SASS-資源"><a href="#Vue-專案內使用共同-SASS-資源" class="headerlink" title="Vue 專案內使用共同 SASS 資源"></a>Vue 專案內使用共同 SASS 資源</h2><p>另外為了全域共同 sass 檔案來做一些定義，如：變數, Mixins, class 等，也是花了一番功夫</p><p>由於不是本篇重點，所以只記錄重點</p><ol><li><code>npm install --save-dev sass-resources-loader</code></li><li>修改 <code>/build/utils.js</code> 檔案內的 <code>exports.cssLoaders</code> function</li></ol><p>大致修改如下：把原本 sass loader 的 function 替換成新加入的 function</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.cssLoaders = function (options) &#123;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line">  const cssLoader = &#123;...&#125;</span><br><span class="line">  const postcssLoader = &#123;...&#125;</span><br><span class="line">  function generateLoaders (loader, loaderOptions) &#123;...&#125;</span><br><span class="line"></span><br><span class="line">  // =========</span><br><span class="line">  // SASS 配置</span><br><span class="line">  // =========</span><br><span class="line">  function resolveResouce(name) &#123;</span><br><span class="line">    return path.resolve(__dirname, &#x27;../src/assets/sass/&#x27; + name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function generateSassResourceLoader() &#123;</span><br><span class="line">    let loaders = [</span><br><span class="line">      cssLoader,</span><br><span class="line">      // &#x27;postcss-loader&#x27;,</span><br><span class="line">      &#123;</span><br><span class="line">        loader: &#x27;sass-loader&#x27;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          indentedSyntax: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        loader: &#x27;sass-resources-loader&#x27;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          // it need a absolute path</span><br><span class="line">          // global usage sass file</span><br><span class="line">          resources: resolveResouce(&#x27;resources.sass&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">    if (options.extract) &#123;</span><br><span class="line">      return ExtractTextPlugin.extract(&#123;</span><br><span class="line">        use: loaders,</span><br><span class="line">        fallback: &#x27;vue-style-loader&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return [&#x27;vue-style-loader&#x27;].concat(loaders)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;　</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    css: generateLoaders(),</span><br><span class="line">    postcss: generateLoaders(),</span><br><span class="line">    less: generateLoaders(&#x27;less&#x27;),</span><br><span class="line">    // sass: generateLoaders(&#x27;sass&#x27;, &#123; indentedSyntax: true &#125;),</span><br><span class="line">    // scss: generateLoaders(&#x27;sass&#x27;),</span><br><span class="line">    sass: generateSassResourceLoader(),</span><br><span class="line">    scss: generateSassResourceLoader(),</span><br><span class="line">    stylus: generateLoaders(&#x27;stylus&#x27;),</span><br><span class="line">    styl: generateLoaders(&#x27;stylus&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來進入正題，其實 vue + firebase cloud messaging 網路上找也有一些相關文章或<a href="https://github.com/invokemedia/vue-push-notification-example">範例</a>，而且 firebase 本身也有介紹如何在 client 的 Javascript 設置 FCM ( <a href="https://firebase.google.com/docs/cloud-messaging/js/client">Set Up a JavaScript Firebase Cloud Messaging Client App</a> )，而我一開始也是按照 firebase 上的文章做，但沒多久就碰到問題，無法取得 token….XD</p><h2 id="Vue-專案目錄結構"><a href="#Vue-專案目錄結構" class="headerlink" title="Vue 專案目錄結構"></a>Vue 專案目錄結構</h2><p>一開始以為是透過 vue-cli 在 local 開發，所產生的網址是沒有 https 的 <code>http://localhost:8081</code> (因為 8080 port 用來啟動後端 API server)，所以一度去找了 <a href="https://ngrok.com/">ngrok</a> 這軟體來用，不過還是一直有問題，後來發現似乎是要跟 FCM 取得 token 時，需要一支 service worker 的 js 檔，而預設會使用位置是 <code>SERVER_ROOT/firbase-messaging-sw.js</code>，然後就去找了些文章看，似乎我還少了這麼一隻 service worker 註冊的檔案，所以除了要加上這隻檔案，又遇到如何讓 vue-cli build 出來的目錄也能有這個檔案以及讀取路徑的問題….唉～</p><p>最終還是逃不過要像 PWA 一樣有個 manifest.json 描述檔，以及一個 service-worker.js 檔，所以這檔案都放到到 <code>static</code> 目錄下，讓專案編譯後能夠在複製一份到 <code>dist</code> 目錄內，目前專案目錄的架構大致如下：</p><p><img src="/images/vue_firebase/vue_folder_structure.png" alt="Vue專案目錄結構"></p><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><p>裡面最重要的一行，就是記得加上 <code>gcm_sender_id</code>，這在 firebase 教學文件裡的步驟有提到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;short_name&quot;: &quot;YOUR_PROJECT_SHORT_NAME&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;YOUR_PROJECT_NAME&quot;,</span><br><span class="line">  &quot;icons&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;/static/images/logo.png&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;192x192&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;start_url&quot;: &quot;/&quot;,</span><br><span class="line">  &quot;background_color&quot;: &quot;#ecf0f2&quot;,</span><br><span class="line">  &quot;display&quot;: &quot;fullscreen&quot;,</span><br><span class="line">  &quot;theme_color&quot;: &quot;#34aeab&quot;,</span><br><span class="line">  &quot;gcm_sender_id&quot;: &quot;YOUR_SENDER_ID&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而主要頁面 <code>index.html</code> 需要能夠讀取到 manifiest.json 檔案，所以 index.html 內的 &lt;head&gt; 需要加入底下這行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;manifest&quot; href=&quot;&lt;%= htmlWebpackPlugin.files.publicPath %&gt;static/manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="firebase-messaging-sw-js"><a href="#firebase-messaging-sw-js" class="headerlink" title="firebase-messaging-sw.js"></a>firebase-messaging-sw.js</h3><p>這是給 service worker register 用的檔案，內容分兩部分，先介紹第一部分，重點是 firebase 專案內的 <code>sender_id</code> 要記得加進去</p><p><img src="/images/vue_firebase/sender_id.png" alt="Firebase Sender ID"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// [START initialize_firebase_in_sw]</span><br><span class="line">// Import and configure the Firebase SDK</span><br><span class="line">// These scripts are made available when the app is served or</span><br><span class="line">// deployed on Firebase Hosting</span><br><span class="line">// If you do not serve/host your project using Firebase Hosting</span><br><span class="line">// see https://firebase.google.com/docs/web/setup</span><br><span class="line"></span><br><span class="line">importScripts(&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-app.js&#x27;);</span><br><span class="line">importScripts(&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-messaging.js&#x27;);</span><br><span class="line"></span><br><span class="line">firebase.initializeApp(&#123;</span><br><span class="line">  messagingSenderId: &#x27;YOUR_SENDER_ID&#x27;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const messaging = firebase.messaging();</span><br><span class="line">// [END initialize_firebase_in_sw]</span><br></pre></td></tr></table></figure><h3 id="src-main-js"><a href="#src-main-js" class="headerlink" title="src/main.js"></a>src/main.js</h3><p>另外要讓 service worker 可以正確使用這檔案，需要透過 <code>navigator.serviceWorker.register</code> 這來指定路徑</p><p>底下是目前使用的方式，在 <code>/src/main.js</code> 裡面將 FCM 設定好，這裡需要先取的 web push 所需要的 public VAPID key，可以參考<a href="https://firebase.google.com/docs/cloud-messaging/js/client#configure_web_credentials_with_fcm">這裡</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const FCMconfig = &#123;</span><br><span class="line">  apiKey: &#x27;YOUR_API_KEY&#x27;,</span><br><span class="line">  authDomain: &#x27;YOUR_DOMAIN&#x27;,</span><br><span class="line">  databaseURL: &#x27;https://&lt;YOUR_PROJECT_ID&gt;.firebaseio.com&#x27;,</span><br><span class="line">  projectId: &#x27;YOUR_PROJECT_ID&#x27;,</span><br><span class="line">  storageBucket: &#x27;&lt;YOUR_PROJECT_ID&gt;.appspot.com&#x27;,</span><br><span class="line">  messagingSenderId: &#x27;YOUR_SENDER_ID&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">firebase.initializeApp(FCMconfig)</span><br><span class="line"></span><br><span class="line">Vue.prototype.$messaging = null</span><br><span class="line">if (firebase.messaging.isSupported()) &#123;</span><br><span class="line">  firebase.initializeApp(FCMconfig)</span><br><span class="line">  // Retrieve Firebase Messaging object, assign to Vue Object</span><br><span class="line">  Vue.prototype.$messaging = firebase.messaging()</span><br><span class="line">  // Add the public key generated from the Firebase console</span><br><span class="line">  Vue.prototype.$messaging.usePublicVapidKey(process.env.VAPID_KEY)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Change server-worker.js register path</span><br><span class="line">navigator.serviceWorker.register(&#x27;/static/firebase-messaging-sw.js&#x27;)</span><br><span class="line">  .then((registration) =&gt; &#123;</span><br><span class="line">    Vue.prototype.$swRegistration = registration</span><br><span class="line">    Vue.prototype.$messaging.useServiceWorker(registration)</span><br><span class="line">  &#125;).catch(err =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>上述使用 <code>Vue.prototype.$messaging</code> 來引入全域變數 <code>$messaging</code> 方便後面在不同 .vue 檔內都可以使用，所以接下來就可以真的來取得 push token 了</p><h2 id="Get-Push-Token"><a href="#Get-Push-Token" class="headerlink" title="Get Push Token"></a>Get Push Token</h2><p>接著就可以在 vue 內，可以參考下面範例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ...</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;registeFCM&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ...</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="string">&#x27;firebase/messaging&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  data () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// ...</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  mounted () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.initFCM()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    initFCM () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$messaging.onTokenRefresh(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.$messaging.getToken().then(<span class="function">(<span class="params">refreshedToken</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(<span class="string">&#x27;Token refreshed.&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.setTokenSentToServer(<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.sendTokenToServer(refreshedToken)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    registeFCM () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$messaging.requestPermission().then(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;Notification permission granted.&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.getToken()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;Unable to get permission to notify.&#x27;</span>, err)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    getToken () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$messaging.getToken().then(<span class="function">(<span class="params">currentToken</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (currentToken) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.sendTokenToServer(currentToken)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(<span class="string">&#x27;No Instance ID token available. Request permission to generate one.&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">// Show permission UI.</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.setTokenSentToServer(<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;An error occurred while retrieving token. &#x27;</span>, err)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.setTokenSentToServer(<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    sendTokenToServer (token) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// <span class="doctag">TODO:</span> Send Token To Your Server</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    setTokenSentToServer (type) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (type) <span class="keyword">return</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// <span class="doctag">TODO:</span> Delete Register Token From Your Server</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;sass&quot;</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="xml">// ...</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Get-Push-Notification"><a href="#Get-Push-Notification" class="headerlink" title="Get Push Notification"></a>Get Push Notification</h2><p>當推播發送成功後，接收 push notification 有兩種情況，網站開啟時，與網頁關閉時，底下再針對兩種情況繼續說明</p><h3 id="網站開啟時，收到推播"><a href="#網站開啟時，收到推播" class="headerlink" title="網站開啟時，收到推播"></a>網站開啟時，收到推播</h3><p>透過 <code>firebase messaging</code> 的 <code>onMessage</code> 來接收通知</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$messaging.onMessage(<span class="function"><span class="params">payload</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Message receiver &#x27;</span>, payload);</span><br><span class="line">  <span class="keyword">let</span> notification = payload.notification;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Notification: &#x27;</span>, notification);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="網頁關閉下，收到推播"><a href="#網頁關閉下，收到推播" class="headerlink" title="網頁關閉下，收到推播"></a>網頁關閉下，收到推播</h3><p>透過在 service worker 內寫的背景接收通知的處理，所以原本的 sw.js 又要繼續第二部分的 code</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">messaging.setBackgroundMessageHandler(<span class="function"><span class="keyword">function</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&#x27;[firebase-messaging-sw.js] Received background message &#x27;</span>,</span><br><span class="line">    payload</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// Customize notification here</span></span><br><span class="line">  <span class="keyword">var</span> notification = payload.notification;</span><br><span class="line">  <span class="keyword">var</span> notificationTitle = notification.title;</span><br><span class="line">  <span class="keyword">var</span> notificationOptions = &#123;</span><br><span class="line">    <span class="attr">body</span>: notification.body,</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;/static/images/logo.png&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> self.registration.showNotification(</span><br><span class="line">    notificationTitle,</span><br><span class="line">    notificationOptions</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以完整的 <code>firebase-messaging-sw.js</code> 檔案如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">importScripts(<span class="string">&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-app.js&#x27;</span>);</span><br><span class="line">importScripts(<span class="string">&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-messaging.js&#x27;</span>);</span><br><span class="line">firebase.initializeApp(&#123;</span><br><span class="line">  <span class="attr">messagingSenderId</span>: <span class="string">&#x27;YOUR_SENDER_ID&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> messaging = firebase.messaging();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Background Message Handler</span></span><br><span class="line">messaging.setBackgroundMessageHandler(<span class="function"><span class="keyword">function</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&#x27;[firebase-messaging-sw.js] Received background message &#x27;</span>,</span><br><span class="line">    payload</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// Customize notification here</span></span><br><span class="line">  <span class="keyword">var</span> notification = payload.notification;</span><br><span class="line">  <span class="keyword">var</span> notificationTitle = notification.title;</span><br><span class="line">  <span class="keyword">var</span> notificationOptions = &#123;</span><br><span class="line">    <span class="attr">body</span>: notification.body,</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;/static/images/logo.png&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promiseChain = clients</span><br><span class="line">    .matchAll(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;window&#x27;</span>,</span><br><span class="line">      <span class="attr">includeUncontrolled</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">windowClients</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; windowClients.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> windowClient = windowClients[i];</span><br><span class="line">        windowClient.postMessage(notify);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> self.registration.showNotification(</span><br><span class="line">        notificationTitle,</span><br><span class="line">        notificationOptions</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> promiseChain;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="發送推播"><a href="#發送推播" class="headerlink" title="發送推播"></a>發送推播</h2><p>為了發送推播也是莫名其妙地遇到問題，鬼打牆了好一陣子才解決，照著 <a href="https://firebase.google.com/docs/cloud-messaging/js/first-message#send_a_notification_message">firebase 說明</a>做，遇到了些問題</p><ol><li>POST 的網址，project id 帶進去似乎還是錯誤…why?</li><li>Authorization 的值到底從何而來，找了很久一直找不到 firebase 專案設定內有類似的值</li></ol><p>所以一直無法順利測試，後來又翻到了另一篇<a href="https://firebase.google.com/docs/cloud-messaging/js/receive#setting_notification_options_in_the_send_request">文章</a>，首先這個發送的網址固定，看起來沒問題，而 Authorization 就是 Firebase 專案設定裡面的 Server Key，就用這個試試看吧！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://fcm.googleapis.com/fcm/send</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Authorization: key=AIzaSyC...akjgSX0e4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123; &quot;notification&quot;: &#123;</span><br><span class="line">    &quot;title&quot;: &quot;Background Message Title&quot;,</span><br><span class="line">    &quot;body&quot;: &quot;Background message body&quot;,</span><br><span class="line">    &quot;click_action&quot; : &quot;https://dummypage.com&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &quot;to&quot; : &quot;eEz-Q2sG8nQ:APA91bHJQRT0JJ...&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一開始測試時，一直遇到 UnAuthorization 的錯誤，找了解決辦法還是沒找到可用的，就想說把 Server Key 從舊版的換成新版的(加密後資料長度長很多)，結果就發送成功了…其實我真的不懂為什麼，今天再換回舊版 server key 還是可以發送，那昨天下午到底是什麼詭異狀況？</p><p>總之最後是成功做完一個基本 web push notification 的流程了，真是可喜可賀！打完收工！</p>]]></content>
    
    
    <summary type="html">&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;Vue 專案內使用共同 SASS 資源&lt;/li&gt;
&lt;li&gt;Vue 專案目錄結構&lt;ul&gt;
&lt;li&gt;manifest.json&lt;/li&gt;
&lt;li&gt;firebase-messaging-sw.js&lt;/li&gt;
&lt;li&gt;src/main.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Get Push Token&lt;/li&gt;
&lt;li&gt;Get Push Notification&lt;ul&gt;
&lt;li&gt;網站開啟時，收到推播&lt;/li&gt;
&lt;li&gt;網頁關閉下，收到推播&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;發送推播&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;p&gt;這幾個月來一直懶得更新文章，其實一直想找時間把最近工作的一些事項做些紀錄，結果都一直在看新入坑女團(GFriend)的影片，由於昨天一整天一直在鬼打牆，早上打破一片牆，下午又再遇到一片牆，好在下班前有所突破，趁著記憶猶新的時候，趕緊紀錄一下。&lt;/p&gt;
&lt;p&gt;其實到目前為止，本身對於 PWA (Progressive Web Apps) 沒啥研究，所以對 Service Worker 也不太了解，在這種情況下就去串接 Firebase Cloud Messaging，真的有點越級挑戰了，所以一直碰到問題也很正常，甚至一度不曉得該先解決什麼問題，雖然下班前有完成一個簡單的 Web Push Notification，但還是覺得有些運氣成份在。&lt;/p&gt;
&lt;p&gt;前情提要一下，目前的前端專案是使用 &lt;code&gt;vue-cli 3.0&lt;/code&gt; 版搭配 webpack 樣板建置的，其實對於 webpack 的一堆設定也都還沒完全了解，所以三不五時會遇到一些問題，加上 vue-cli 版本比較新，有時上網找答案常常會找到 2.x 版的一些例子，只能先了解後會意，然後再 try &amp;amp; error 的解決。&lt;/p&gt;
&lt;p&gt;有個自己每次重開機就會遇到的問題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node 版本需要 8.x 以上才能執行，所以透過 nvm 來裝不同版本切換&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Vue-專案內使用共同-SASS-資源&quot;&gt;&lt;a href=&quot;#Vue-專案內使用共同-SASS-資源&quot; class=&quot;headerlink&quot; title=&quot;Vue 專案內使用共同 SASS 資源&quot;&gt;&lt;/a&gt;Vue 專案內使用共同 SASS 資源&lt;/h2&gt;&lt;p&gt;另外為了全域共同 sass 檔案來做一些定義，如：變數, Mixins, class 等，也是花了一番功夫&lt;/p&gt;
&lt;p&gt;由於不是本篇重點，所以只記錄重點&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install --save-dev sass-resources-loader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改 &lt;code&gt;/build/utils.js&lt;/code&gt; 檔案內的 &lt;code&gt;exports.cssLoaders&lt;/code&gt; function&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大致修改如下：把原本 sass loader 的 function 替換成新加入的 function&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="vuejs" scheme="https://soarlin.github.io/tags/vuejs/"/>
    
    <category term="firebase" scheme="https://soarlin.github.io/tags/firebase/"/>
    
    <category term="fcm" scheme="https://soarlin.github.io/tags/fcm/"/>
    
    <category term="service worker" scheme="https://soarlin.github.io/tags/service-worker/"/>
    
    <category term="vuecli" scheme="https://soarlin.github.io/tags/vuecli/"/>
    
    <category term="webpack" scheme="https://soarlin.github.io/tags/webpack/"/>
    
    <category term="push notification" scheme="https://soarlin.github.io/tags/push-notification/"/>
    
  </entry>
  
  <entry>
    <title>Apple Pay on the Web 開發筆記</title>
    <link href="https://soarlin.github.io/2018/03/10/apple-pay-on-the-web-%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98/"/>
    <id>https://soarlin.github.io/2018/03/10/apple-pay-on-the-web-%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98/</id>
    <published>2018-03-10T12:44:18.000Z</published>
    <updated>2021-07-18T11:02:45.153Z</updated>
    
    <content type="html"><![CDATA[<p>已經不想去算到底多久沒有更新 Blog 了，因為最近幾個月實在沒什麼梗，不過這也算是好事吧！感覺起來似乎比較輕鬆些？其實也沒有比較輕鬆，前陣子還得趕鴨子上架，把剛摸沒多久的 Go lang 直接投入在新版後台開發上，想想都覺得很抖～～</p><p>從去年進公司以來，一開始就先著手開發的商品預訂流程，想當初花了一個半月，直接用 vue 2.x + vuex + vue-router 真的很敢，結果就是後來陸續要針對預訂流程做調整，就得再回顧之前一開始寫的 code，也不能說看得很痛苦，但是…看著好幾個月前寫的東西，總是在陌生與痛苦間徘徊。</p><p>最近一次的調整除了把註冊登入的流程提早了一個步驟，還要在原本的信用卡付款金流外，陸續增加 Apple Pay 與 Line Pay，真是令人感到刺激，雖然自己在做之前覺得這功能做好後的實用性遠小於噱頭性質，不過既然決定要做，那就認真做吧！順便多學一些東西。</p><p>不過這次串接的好處是，我們原先就透過 TayPay 這第三方金流服務，所以 TayPay 已經把 Apple Pay 與 Line Pay 都串接了，我們直接沿用原本的套件就可以繼續開發，當然後端 API 間處理還是得自己來，但由於是另一個同事負責的，就不在這次的討論範圍了。</p><p>廢話了那麼多，要進入正題了，接下來開始記錄這次耗時約一週才搞定的 Apple Pay，應該不是我能力太廢，是真的一路走來踩了好多雷，所以才要發文紀錄一下，讓自己日後可以回味。</p><span id="more"></span><h1 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h1><p>有在 iPhone 上用過 Apple Pay 的人都應該知道，手機會彈出一個驗證指紋的付款畫面，可是用網頁要怎麼驗證指紋，所以要使用 Apple Pay on the Web 有一些先天限制條件。</p><ul><li>持有 iPhone 且作業系統版本需要 <code>iOS 10 以上</code>的版本</li><li>使用 Mac 電腦且作業系統版本需要 <code>macOS 10.12 以上</code>，當然也得用 Safari 瀏覽器</li></ul><p>另外就是 Server 本身除了要支援 HTTPS 外，還要有合法的 SSL 憑證，關於 Server 設定可以看 <a href="https://developer.apple.com/documentation/applepayjs/setting_up_your_server">Apple 官方文件</a></p><h3 id="踩雷1"><a href="#踩雷1" class="headerlink" title="踩雷1"></a>踩雷1</h3><p>所以想在本機開發，馬上就遇到了問題，雖然 TayPay 建議使用 <a href="https://ngrok.com/">ngrok</a> (<a href="https://medium.com/tappay/ngrok-connect-to-your-localhost-c6f3ba84525b">TayPay寫的教學</a>)，就可以透過 ngrok 服務產生的臨時網址來讓支援 SSL 來使用 Apple Pay，可是在實際摸索後，Apple 似乎不認為這服務產生的憑證是可信任的，一直噴出連線的憑證是 <code>untrusted</code></p><p>由於無法在本機端開發，更不可能讓我在 production 的機器上開發，只好到測試(stage)的機器上開發了，不過公司使用的 stage server，遠在 AWS 美西的機房內，而且主機等級還是 micro，除了連線過去的延遲時間很嚴重，主機本身運作起來也不快，但也沒辦法了，硬著頭皮上嘍！</p><h1 id="Server-domain-驗證"><a href="#Server-domain-驗證" class="headerlink" title="Server domain 驗證"></a>Server domain 驗證</h1><h3 id="踩雷2"><a href="#踩雷2" class="headerlink" title="踩雷2"></a>踩雷2</h3><p>由於是測試機的環境，所以有連線上的限制，某天早上一早到公司，就先連到 AWS 上把 EC2 的 security 限制開啟 443 port 可以讓 Apple Pay 的主機連進來，然而得先在 Apple Developer 將 domain 加入且驗證通過，但是照著 Apple 文件內把所有可能的主機 IP 都加入白名單了，可是試了很久怎麼都驗證不過，一直顯示 domain 驗證失敗，WTF!</p><p>後來等另一位同事來了，跟他說了這樣的情況，他就建議暫時把 stage server 的 443 都對外開放試試看，果然這次出現了另一個錯誤訊息，這次的錯誤是說驗證的檔案已經過期，噗～原來 Apple 真的很嚴格，連給驗證用的檔案都有時效性，雖然只是重新下載新的驗證檔上傳，還是得先經過 Jenkins 在發布實在有點麻煩。</p><p>這次總算可以驗證過了，經過這次的教訓我學到了一點，Apple 官方文件提供的 <code>Apple Pay Server IP，跟他要來驗證 domain 的主機肯定是他媽不同 IP</code>，這真的太陰險了，文件裡面寫那麼多廢話，卻沒說明驗證的主機 IP 是啥。</p><p>接下來又花了不少時間，把 stage 環境安裝 vim, git, composer, npm … 等工具，然後再把目前開發的 code pull 下來，重新把開發中的版本環境搞定，apache 的 web 目錄設定也指向這暫時的開發目錄，因為開發時期會透過 watch 工具，每次存檔後讓 js 重新編譯，當真的要在上面開發修改程式的時候發現，vim 裡面光是讓游標移動就要等待一段時間，更不用提真的 coding 的時候有多不順暢就好，每次存檔後重新編譯 js 檔要等待的時間也很難預測，順利的話可以在三秒內重新編譯，運氣不好的話可能上個廁所回來還沒重新編譯，我真的被搞到快崩潰了。</p><p>後來沒辦法只好儘可能地把相關文件閱讀過，將可能執行的流程都先在本機寫好，可能會出現的狀況都盡量印出 log，接著再重新 push commit，再去 stage 上 pull 下來測試。</p><h1 id="瀏覽器檢測"><a href="#瀏覽器檢測" class="headerlink" title="瀏覽器檢測"></a>瀏覽器檢測</h1><p>一開始就說了想在網頁上執行 Apple Pay 有一些限制的條件，所以 <a href="https://developer.apple.com/documentation/applepayjs/checking_for_apple_pay_availability">Apple 文件</a>也有提供一些檢測的方式，最基本檢查瀏覽器是否支援，如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.ApplePaySession) &#123;</span><br><span class="line">   <span class="comment">// The Apple Pay JS API is available...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著再檢查是否真的可用 Apple Pay，這會去檢查是否有可用卡片，有的話顯示 Apple Pay 按鈕</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.ApplePaySession) &#123;</span><br><span class="line">   <span class="keyword">var</span> merchantIdentifier = <span class="string">&#x27;example.com.store&#x27;</span>;</span><br><span class="line">   <span class="keyword">var</span> promise = ApplePaySession.canMakePaymentsWithActiveCard(merchantIdentifier);</span><br><span class="line">   promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">canMakePayments</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (canMakePayments)</span><br><span class="line">         <span class="comment">// Display Apple Pay Buttons here…</span></span><br><span class="line">&#125;); &#125;</span><br></pre></td></tr></table></figure><h3 id="踩雷3"><a href="#踩雷3" class="headerlink" title="踩雷3"></a>踩雷3</h3><p>但是在我前面花了這麼久的努力，把一切環境都弄好要測試時，發現怎麼都無法執行 TayPay 串接 Apple Pay 的 function，最後檢查了我跟同事的瀏覽器後，發現原來是我的瀏覽器沒有支援，明明一切條件都符合 Apple 自己要求的條件，電腦跟手機也都登入相同的 Apple ID，手機上的 Apple Pay 也有綁定信用卡，但是我的 Safari 瀏覽器就是不能用…Orz…</p><p>而同事的電腦也是一台可以，一台不行，雖然現在寫這篇文章的時候，我的 safari 好像也支援 Apple Pay 了，但是三天前到底發生甚麼狀況，我真的完全摸不著頭緒，唯一做的改變是，我昨天借用同事開發用的 Apple ID 登入自己電腦來測試 Apple Pay，然後在登出並登入回自己 Apple ID，神奇的事情就這麼發生了，贛！</p><p>所以前兩三天在開發的時候，除了大部分的 code 需要先在本機盲寫，再上到 stage 上進行測試跟小改動，還必須使用手機接著一條線到電腦，開啟 Safari 的網頁檢閱器，就是類似 Chrome 上的開發者工具一樣，但是卻難用 10 倍以上，真的開發的很艱辛！</p><h1 id="Apple-Pay-Payment-Request"><a href="#Apple-Pay-Payment-Request" class="headerlink" title="Apple Pay Payment Request"></a>Apple Pay Payment Request</h1><p>總算可以開始接近 Apple Pay 的核心了，目前總算可以進入到呼叫 Apple Pay 的階段了，可是在看過 TayPay 提供的文件，以及 <a href="https://developer.apple.com/documentation/applepayjs/creating_an_apple_pay_session">Apple 官方文件</a>，大概理解需要提供一份資料後，來建立 Apple Pay Session，才會呼叫出 Apple Pay 的介面。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> request = &#123;</span><br><span class="line">  <span class="attr">countryCode</span>: <span class="string">&#x27;US&#x27;</span>,</span><br><span class="line">  <span class="attr">currencyCode</span>: <span class="string">&#x27;USD&#x27;</span>,</span><br><span class="line">  <span class="attr">supportedNetworks</span>: [<span class="string">&#x27;visa&#x27;</span>, <span class="string">&#x27;masterCard&#x27;</span>, <span class="string">&#x27;amex&#x27;</span>, <span class="string">&#x27;discover&#x27;</span>],</span><br><span class="line">  <span class="attr">merchantCapabilities</span>: [<span class="string">&#x27;supports3DS&#x27;</span>],</span><br><span class="line">  <span class="attr">total</span>: &#123; <span class="attr">label</span>: <span class="string">&#x27;Your Merchant Name&#x27;</span>, <span class="attr">amount</span>: <span class="string">&#x27;10.00&#x27;</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> session = <span class="keyword">new</span> ApplePaySession(<span class="number">3</span>, request);</span><br></pre></td></tr></table></figure><p>好像很簡單麻～～～可是！要是這麼簡單，我就不用特地寫這篇文章來宣洩這一週的不快了，我左看右看，上看下看，完全沒寫錯，可是呼叫 TayPay 的 API 會沒反應，只好改用 <a href="https://developer.apple.com/library/content/samplecode/EmporiumWeb/Introduction/Intro.html#//apple_ref/doc/uid/TP40017557-Intro-DontLinkElementID_2">Apple Pay 提供的 sample code</a> 來測試，怎麼試也都沒反應，到底發生什麼事啊！！！</p><h3 id="踩雷4"><a href="#踩雷4" class="headerlink" title="踩雷4"></a>踩雷4</h3><p>雖然中途有看到噴出一個錯誤訊息，<code>「Must create a new ApplePaySession from a user gesture handler」</code>，但是一直沒有很在意他，後來真的沒招了才回頭來研究這問題，這個意思是呼叫 Apple Pay 必須是使用者操作的行為來產生，我就心想難不成你還能監視使用者事不是按了你們家規定的按鈕不成，後來跟同事討論了一下後想到，雖然我也是在使用者按下 Apple Pay(自家做)按鈕後才呼叫，不過礙於改版後的訂購流程，必須先建立訂單，然後才能呼叫 Apple Pay，該不會真的是因為這原因吧！</p><p>在跳過建立訂單的步驟後，我的手機畫面終於彈出 Apple Pay 的介面了，咁～我真的內牛滿面了，為了看到這個畫面我都已經跟你耗了三天多了，這麼一來訂購的流程肯定要再調整了，一想到這裡，不禁又要滴下男兒淚來。因為每次流程調整就要改很久，常常會再多出很多 garbage code，眼看著這天也快下班，把程式碼整理整理，在跟設計師約一下隔天討論流程的調整。唉～</p><p>隔天跟設計師討論目前這樣的結帳流程，無法在建立訂單的同時，馬上在呼叫 Apple Pay，必須在建立訂單後，重新計算台幣計價的金額，過渡一頁資料確認，再讓使用者按那顆黑黑的  Pay，才能順利叫出 Apple Pay 來付款。再討論好要調整的流程後，盡可能以修改最少的方式進行，也總算可以在一週的最後一天把整個流程都搞定。</p><p>這週扣掉週一下午處理別的問題，週二上午看醫生，串接 Line Pay 約一天，剩下的時間全都拿來跟 Apple Pay 耗了，接下來就是再多測試整個訂購流程了，希望可以在下週順利上線。</p><p>PS. 其實中途遇到的問題不只這些，光是一開始 Apple Developer 帳號就搞好久，原本有最高權限的主管好兒剛好離職，為了把 Merchant Identity Certificate 上傳也花了不少時間</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;已經不想去算到底多久沒有更新 Blog 了，因為最近幾個月實在沒什麼梗，不過這也算是好事吧！感覺起來似乎比較輕鬆些？其實也沒有比較輕鬆，前陣子還得趕鴨子上架，把剛摸沒多久的 Go lang 直接投入在新版後台開發上，想想都覺得很抖～～&lt;/p&gt;
&lt;p&gt;從去年進公司以來，一開始就先著手開發的商品預訂流程，想當初花了一個半月，直接用 vue 2.x + vuex + vue-router 真的很敢，結果就是後來陸續要針對預訂流程做調整，就得再回顧之前一開始寫的 code，也不能說看得很痛苦，但是…看著好幾個月前寫的東西，總是在陌生與痛苦間徘徊。&lt;/p&gt;
&lt;p&gt;最近一次的調整除了把註冊登入的流程提早了一個步驟，還要在原本的信用卡付款金流外，陸續增加 Apple Pay 與 Line Pay，真是令人感到刺激，雖然自己在做之前覺得這功能做好後的實用性遠小於噱頭性質，不過既然決定要做，那就認真做吧！順便多學一些東西。&lt;/p&gt;
&lt;p&gt;不過這次串接的好處是，我們原先就透過 TayPay 這第三方金流服務，所以 TayPay 已經把 Apple Pay 與 Line Pay 都串接了，我們直接沿用原本的套件就可以繼續開發，當然後端 API 間處理還是得自己來，但由於是另一個同事負責的，就不在這次的討論範圍了。&lt;/p&gt;
&lt;p&gt;廢話了那麼多，要進入正題了，接下來開始記錄這次耗時約一週才搞定的 Apple Pay，應該不是我能力太廢，是真的一路走來踩了好多雷，所以才要發文紀錄一下，讓自己日後可以回味。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="applepay" scheme="https://soarlin.github.io/tags/applepay/"/>
    
    <category term="safari" scheme="https://soarlin.github.io/tags/safari/"/>
    
    <category term="mac" scheme="https://soarlin.github.io/tags/mac/"/>
    
    <category term="iphone" scheme="https://soarlin.github.io/tags/iphone/"/>
    
  </entry>
  
  <entry>
    <title>2018建立安全PHP軟體指南</title>
    <link href="https://soarlin.github.io/2017/12/18/The-2018-Guide-to-Building-Secure-PHP-Software/"/>
    <id>https://soarlin.github.io/2017/12/18/The-2018-Guide-to-Building-Secure-PHP-Software/</id>
    <published>2017-12-18T15:32:17.000Z</published>
    <updated>2021-07-18T11:02:45.153Z</updated>
    
    <content type="html"><![CDATA[<!-- MarkdownTOC --><ul><li><a href="#php-versions">PHP Versions</a></li><li><a href="#dependency-management">Dependency Management</a><ul><li><a href="#recommended-packages">Recommended Packages</a></li></ul></li><li><a href="#https-and-browser-security">HTTPS and Browser Security</a><ul><li><a href="#security-headers">Security Headers</a></li><li><a href="#subresource-integrity">Subresource Integrity</a></li><li><a href="#document-relationships">Document Relationships</a></li></ul></li><li><a href="#developing-secure-php-software">Developing Secure PHP Software</a><ul><li><a href="#database-interaction">Database Interaction</a></li><li><a href="#file-uploads">File Uploads</a></li><li><a href="#cross-site-scripting-xss">Cross-Site Scripting (XSS)</a></li><li><a href="#cross-site-request-forgery-csrf">Cross-Site Request Forgery (CSRF)</a></li><li><a href="#xml-attacks-xxe-xpath-injection">XML Attacks (XXE, XPath Injection)</a></li><li><a href="#deserialization-and-php-object-injection">Deserialization and PHP Object Injection</a></li><li><a href="#password-hashing">Password Hashing</a></li><li><a href="#general-purpose-cryptography">General-Purpose Cryptography</a></li></ul></li><li><a href="#specialized-use-cases">Specialized Use-Cases</a><ul><li><a href="#searchable-encryption">Searchable Encryption</a></li><li><a href="#token-based-authentication-without-side-channels">Token-based Authentication without Side-Channels</a></li><li><a href="#developing-secure-apis">Developing Secure APIs</a></li><li><a href="#security-event-logging-with-chronicle">Security Event Logging with Chronicle</a></li></ul></li><li><a href="#%E4%BD%9C%E8%80%85%E5%BE%8C%E8%A8%98">作者後記</a></li><li><a href="#resources">Resources</a></li></ul><!-- /MarkdownTOC --><p>原文網址：<a href="https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software">https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software</a></p><p>隨著將到來的 2018 年，一般技術人員（尤其是網路開發者）必須拋棄原有開發安全 PHP 應用軟體的舊習與信念。尤其是對於許多不相信這樣壯舉的人來說。<br>本指南作為「<a href="http://www.phptherightway.com/">PHP: The Right Way</a>」電子書（<a href="http://laravel-taiwan.github.io/php-the-right-way/">繁中版</a>）的補充，強調的是安全性，而不是一般PHP程式開發者主題（如：代碼風格）</p><p><a name="php-versions"></a></p><h1 id="PHP-Versions"><a href="#PHP-Versions" class="headerlink" title="PHP Versions"></a>PHP Versions</h1><blockquote><p>簡而言之：建議在 2018 年運行 PHP 7.2, 並計劃在 2019年初轉換到 PHP 7.3</p></blockquote><p>PHP 7.2 已經在 2017-11-30 釋出。</p><p>在撰寫本文時，僅有 PHP 7.1 與 7.2 會得到 PHP 開發人員的積極支援，而 PHP 5.6 和 7.0 大約會在一年內得到安全性修正。</p><p>一些提供舊版本PHP的長期支援(LTS)作業系統，這樣的做法通常被認為是有害的。尤其是，在它們增加安全補丁時，不一併增加PHP版號的壞習慣，使得很難推論這些PHP版本的安全性。</p><p>因此，無論供應商做出了什麼承諾，只要你能夠幫忙，就應該努力在任何時候運行被主動支持的PHP版本。這樣的話，即使最終只購買一個安全版本，持續升級的工作也會讓你的生活免受不愉快的驚喜。</p><span id="more"></span><p><a name="dependency-management"></a></p><h1 id="Dependency-Management"><a href="#Dependency-Management" class="headerlink" title="Dependency Management"></a>Dependency Management</h1><blockquote><p>簡而言之：使用 Composer</p></blockquote><p>用於PHP生態系統最先進的依賴管理解決方案是 Composer。我們強烈推薦可以去看「<a href="http://www.phptherightway.com/">PHP: The Right Way</a>」裡面有專門介紹 Composer 入門的部分</p><p>如果您不使用 Composer 來管理專案的依賴關係，最終會導致您依賴的某個軟件庫嚴重過時，然後將會讓利用舊版本漏洞的電腦犯罪份子有機可趁。</p><p><strong>重要：</strong>在開發軟體的時候，請記得更新依賴軟件庫的版本，可使用這行指令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure><p>如果您正在做一些特殊的事情，需要使用PHP擴展（用C語言編寫），那麼就不能用 Composer 來安裝，需要使用 PECL。</p><p><a name="recommended-packages"></a></p><h2 id="Recommended-Packages"><a href="#Recommended-Packages" class="headerlink" title="Recommended Packages"></a>Recommended Packages</h2><p>不論你在開發什麼，幾乎可以肯定你會受益於這些依賴套件。這也是大多數 PHP 開發人員推薦的（PHPUnit, PHP-CS-Fixer 等等）</p><p><strong>roave/security-advisories</strong></p><p><a href="https://github.com/Roave/SecurityAdvisories">Roave’s security-advisories</a> 套件使用 <a href="https://github.com/FriendsOfPHP/security-advisories">Friends of PHP repository</a> 來確保你的專案不依賴任何已知容易受攻擊的軟件庫。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer require roave/security-advisories:dev-master</span><br></pre></td></tr></table></figure><p>或者您可以將您的 composer.lock 文件上傳到 <a href="https://security.sensiolabs.org/">Sensio Labs</a>，作為自動化漏洞評估工作流程的一部分，用來提醒任何過舊的軟件套。</p><p><strong>vimeo/psalm</strong></p><p>Psalm 是一個靜態分析工具，可以幫助找出代碼中可能存在的錯誤。雖然還有其他不錯的靜態分析工具（比如Phan和PHPStan都很好），如果發現需要支援 PHP 5的話，Psalm 是 PHP 5.4+ 靜態分析工具的首選。</p><p>使用 Psalm 相當容易：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Version 1 doesn&#x27;t exist yet, but it will one day:</span><br><span class="line">composer require --dev vimeo/psalm:^0</span><br><span class="line"></span><br><span class="line"># Only do this once:</span><br><span class="line">vendor/bin/psalm --init</span><br><span class="line"></span><br><span class="line"># Do this as often as you need:</span><br><span class="line">vendor/bin/psalm</span><br></pre></td></tr></table></figure><p>如果是第一次在現有的代碼上運行，可能會看到很多紅色。除非你正在建構像WordPress一樣大的應用程式，不然將很要很費力的才能通過所有的測試。</p><p>無論您使用那種靜態分析工具，我們都建議你將它放入現有的持續整合流程中，並在每次程式碼有變動後執行檢查。</p><p><a name="https-and-browser-security"></a></p><h1 id="HTTPS-and-Browser-Security"><a href="#HTTPS-and-Browser-Security" class="headerlink" title="HTTPS and Browser Security"></a>HTTPS and Browser Security</h1><blockquote><p>簡而言之：HTTPS, 要被測試過，安全的檔頭</p></blockquote><p>在2018年，瀏覽網站將不在被接受只用不安全的HTTP，幸運的是，由於ACME協議和Let’s Encrypt證書頒發機構，將可以免費獲得以及自動更新TLS證書。</p><p>整合 ACME 到網站是小事一件</p><ul><li><a href="https://caddyserver.com/">Caddy</a>: 自動地綁定了</li><li><a href="https://letsencrypt.org/2017/10/17/acme-support-in-apache-httpd.html">Apache</a>: 很快地就可以在 mod_md 上用。在那之前，網路上有很多<a href="https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-16-04">不錯的教學</a>可以參考。</li><li><a href="https://www.nginx.com/blog/using-free-ssltls-certificates-from-lets-encrypt-with-nginx/">Nginx</a>: 相對直接了當(?)</li></ul><p>你可能會想“好吧！我有一個TLS證書了，現在我必須在網站安全且快速之前花費幾個小時來搞這些設定配置”。不！<a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/">Mozilla</a> 會幫助你。你可以使用<a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/">配置生成器</a>來根據目標受眾建構推薦的<a href="https://wiki.mozilla.org/Security/Server_Side_TLS">密碼套件</a></p><p>如果您希望您的網站安全，HTTPS(基於TLS的HTTP)是絕對 non-negotiable(不可協商？)的。使用HTTPS可以立即消除對用戶的多種攻擊(中間人內容注入、竊聽、replay攻擊以及若干形式的 session 操作，否則會允許用戶模擬)</p><p><a name="security-headers"></a></p><h2 id="Security-Headers"><a href="#Security-Headers" class="headerlink" title="Security Headers"></a>Security Headers</h2><p>然而在您的服務上使用HTTPS確實為您的用戶提供了許多安全性與性能方面的好處，您還可以更近一步通過利用瀏覽器的其他安全功能。當中大部分涉及到與您內容一起發送的HTTP響應檔頭。</p><ul><li><p><code>Content-Security-Policy</code></p><ul><li>您需要這個檔頭，因為它可以對瀏覽器允許載入內部和外部資源進行詳細控制，進而替跨網域攻擊提供有效的防禦。</li><li>請參閱<a href="https://github.com/paragonie/csp-builder">CSP-Builder</a>，以便快速簡便地部署/管理 Content-Security-Policy。</li><li>為了更深入的分析，Scott Helme 對 <a href="https://scotthelme.co.uk/content-security-policy-an-introduction/">Content-Security-Policy 檔頭的介紹</a>是個很好的入門</li></ul></li><li><p><code>Expect-CT</code></p><ul><li>您需要這個，因為它通過強迫不良行為者將他們錯誤發放證書的證據發佈到可公開驗證的附加數據結構中，增加這一層針對流氓/受損證書頒發機構的保護。<a href="https://scotthelme.co.uk/a-new-security-header-expect-ct/">瞭解更多Expect-CT</a></li><li>最初將它設為 <code>enforce,max-age=30</code>，並增加 <code>max-age</code> 直到你確定這樣不會造成服務中斷</li></ul></li><li><p><code>Referrer-Policy</code></p><ul><li>您需要這個，因為它允許你控制你是否洩漏有關用戶行為信息給第三方</li><li>Scott Helme 再一次的深入的介紹 <a href="https://scotthelme.co.uk/a-new-security-header-referrer-policy/">Referrer-Policy 檔頭</a></li><li>設定為 <code>same-origin</code> 或 <code>no-referrer</code> 除非你有其他理由來設置的更寬鬆</li></ul></li><li><p><code>Strict-Transport-Security</code></p><ul><li>您需要這個，因為他告訴瀏覽器強制所有功能請求(requests)透過同源的HTTPS而不是不安全的HTTP。</li><li>第一次部署時設定 <code>max-age=30</code>，然後當確定沒有任何內容會中斷的時候，將此值增大 (e.g. <code>31536000</code>)</li></ul></li><li><p><code>X-Content-Type-Options</code></p><ul><li>您需要這個，因為 MIME 類型的混淆可能會導致不可預期的結果，包括在奇怪邊際情況下允許 XSS 漏洞，最好伴著一個標準的 <code>Content-Type</code> 檔頭</li><li>設為 <code>nosniff</code> 除非你需要其他默認的狀況 (e.g. 用於檔案下載)</li></ul></li><li><p><code>X-Frame-Options</code></p><ul><li>您需要這個，因為它可以讓你防止點擊劫持(clickjacking)</li><li>設為 <code>DENY</code> (或 <code>SAMEORIGIN</code> 當你使用 <strong><frame></strong> 這元素時)</li></ul></li><li><p><code>X-XSS-Protection</code></p><ul><li>您需要這個，因為它啟用了一些瀏覽器在默認情況下未啟用的 anti-XSS 功能</li><li>設定 <code>1; mode=block</code></li></ul></li></ul><p>同樣的，如果您使用 PHP 內建的 session 管理功能(建議使用)，您可能需要調用 <code>seeion_start()</code> ，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session_start([</span><br><span class="line">    &#x27;cookie_httponly&#x27; =&gt; true,</span><br><span class="line">    &#x27;cookie_secure&#x27; =&gt; true</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>這會強制您的應用程式在 HTTP-Only 或安全標誌下發送 session id 時，防止被 XSS 攻擊竊取用戶資料，且強制他們分別通過 HTTPS 發送，這在之前 2015 年部落格文章中有介紹 <a href="https://paragonie.com/blog/2015/04/fast-track-safe-and-secure-php-sessions">secure PHP sessions</a></p><p><a name="subresource-integrity"></a></p><h2 id="Subresource-Integrity"><a href="#Subresource-Integrity" class="headerlink" title="Subresource Integrity"></a>Subresource Integrity</h2><p>在日後您可能會使用 CDN 的方式來載入 JavaScript / CSS 框架。</p><p>資安工程師已經注意到一個明顯的缺失；如果很多網站使用 CDN 來提供他們的內容，那麼 CDN 遭到盜用並且更換內容後，將可會影響到上千的網站。</p><p>使用 <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity">subresource integrity</a></p><p>Subresource integrity (SRI) 允許你將 CDN 服務的文件內容進行 hash 處理。SRI 目前只允許使用安全的加密 hash 方法，這表示攻擊者不可能生成跟原始文件內容 hash 後相同的文件。</p><p>舉個例子: <a href="https://v4-alpha.getbootstrap.com/">Bootstrap v4-alpha uses SRI in their CDN example snippet</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link</span><br><span class="line">    rel=&quot;stylesheet&quot;</span><br><span class="line">    href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css&quot;</span><br><span class="line">    integrity=&quot;sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ&quot;</span><br><span class="line">    crossorigin=&quot;anonymous&quot;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;script</span><br><span class="line">    src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js&quot;</span><br><span class="line">    integrity=&quot;sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn&quot;</span><br><span class="line">    crossorigin=&quot;anonymous&quot;</span><br><span class="line">&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a name="document-relationships"></a></p><h2 id="Document-Relationships"><a href="#Document-Relationships" class="headerlink" title="Document Relationships"></a>Document Relationships</h2><p>網頁開發人員經常在超連結上設置目標屬性(e.g. <code>target=&quot;_blank&quot;</code>)在新視窗開啟連結，但是，如果沒有使用 <code>rel=&quot;noopener&quot;</code> 屬性，則可能<a href="https://mathiasbynens.github.io/rel-noopener/">允許開啟的頁面來控制原始頁面</a></p><p>別這麼做，這會讓 <code>example.com</code> 有可能來控制你目前的頁面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://example.com&quot; target=&quot;_blank&quot;&gt;Click here&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>請替換成，這樣開啟新視窗到 <code>example.com</code> 時，就不用擔心會有惡意的第三方想來操控原本的頁面。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;https://example.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Click here&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.jitbit.com/alexblog/256-targetblank---the-most-underestimated-vulnerability-ever">進一步閱讀</a></p><p><a name="developing-secure-php-software"></a></p><h1 id="Developing-Secure-PHP-Software"><a href="#Developing-Secure-PHP-Software" class="headerlink" title="Developing Secure PHP Software"></a>Developing Secure PHP Software</h1><p>如果應用程式安全性對你是個新的議題，可先從 <a href="https://paragonie.com/blog/2015/08/gentle-introduction-application-security">A Gentle Introduction to Application Security(應用程式安全簡介)</a> 開始。大多數資安專家指出，開發人員可以使用 <a href="https://www.owasp.org/index.php/Top_10_2017-Top_10">OWASP Top 10</a> 等資源。</p><p>但是，大多數常見的漏洞可以看作是相同的高級別安全問題實例（代碼與資料沒有完全分離，邏輯不健全，不安全的操作環境，或殘破的密碼協議）。長遠來看，我們會假設教育這些安全新手，對這些安全問題有更簡單、更基本的理解以及如何解決這些問題，將會朔造更好的安全工程。</p><p><a name="database-interaction"></a></p><h2 id="Database-Interaction"><a href="#Database-Interaction" class="headerlink" title="Database Interaction"></a>Database Interaction</h2><blockquote><p>深入來說: 防止 PHP 應用程序中的 SQL Injection</p></blockquote><p>如果在撰寫 SQL 查詢語句，請確定是使用 prepared statements 的方式來將透過網路傳遞進來的參數傳遞進去，而不是用字串相接的方式來組出 SQL 語句。此外，確定<a href="https://stackoverflow.com/a/12202218">不是使用 emulated prepared statements</a></p><p>這裡用 <a href="https://github.com/paragonie/easydb">EasyDB</a> 舉例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Insecure code: */</span><br><span class="line">$query = $pdo-&gt;query(&quot;SELECT * FROM users WHERE username = &#x27;&quot; . $_GET[&#x27;username&#x27;] . &quot;&#x27;&quot;);</span><br></pre></td></tr></table></figure><p>請替換成這樣的語法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Secure against SQL injection: */</span><br><span class="line">$results = $easydb-&gt;row(&quot;SELECT * FROM users WHERE username = ?&quot;, $_GET[&#x27;username&#x27;]);</span><br></pre></td></tr></table></figure><p>還有其他資料庫抽象層提供了相同的安全性（EasyDB實際背後使用了PDO，避免使用到 emulation prepared statement 來防止安全問題），只要使用者輸入不會影響到查詢的結構，就很安全。(這包括了 stored procedures)</p><p><a name="file-uploads"></a></p><h2 id="File-Uploads"><a href="#File-Uploads" class="headerlink" title="File Uploads"></a>File Uploads</h2><blockquote><p>深入來說：<a href="https://paragonie.com/blog/2015/10/how-securely-allow-users-upload-files">如何安全地允許使用者上傳檔案</a></p></blockquote><p>接受檔案上傳是有風險的，但是可以安全地做到這點，只要採取一些基本的預防措施。也就是說：防止上傳的檔案可直接存取，這種方式可能意外的讓他們能夠被執行。上傳的檔案應該只能是唯讀或可讀可寫，永遠不能被執行。</p><p>如果你的網站根目錄為 <code>/var/www/example.com</code>，你將不會希望檔案存放到 <code>/var/www/example.com/uploaded_files</code>。反之，你希望將檔案放在不能直接存取的獨立目錄中(e.g. `/var/www/example.com-uploaded/)，避免以外的執行了 server 端的 script 並開啟遠端代碼執行。</p><p>更簡潔的解決辦法是將根目錄後移一層(如: <code>/var/www/example.com/public</code>)</p><p>檔案上傳的另一個問題是，安全的下載他們</p><ul><li>SVG 檔案，當直接訪問時，將可能會執行用戶端瀏覽器的 JavaScript 代碼，即使 <a href="https://github.com/w3c/svgwg/issues/266">MIME 類型是 <code>image/</code> 開頭</a></li><li>如上所述，MIME sniffing 可能會導致被攻擊，可以參照 <a href="https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#security-headers"><code>X-Content-Type-Options</code></a></li><li>如果你放棄先前關於如何安全地儲存上傳文件的建議，攻擊者可透過瀏覽器直接上傳 .php 或 .phtml 來執行任意代碼，進而讓他們獲得伺服器的完整控制權。</li></ul><p><a name="cross-site-scripting-xss"></a></p><h2 id="Cross-Site-Scripting-XSS"><a href="#Cross-Site-Scripting-XSS" class="headerlink" title="Cross-Site Scripting (XSS)"></a>Cross-Site Scripting (XSS)</h2><blockquote><p>深入來說：<a href="https://paragonie.com/blog/2015/06/preventing-xss-vulnerabilities-in-php-everything-you-need-know">你需要知道一切關於 PHP 中的跨站腳本攻擊</a></p></blockquote><p>實際上，XSS 和 SQL injection 一樣容易。我們可用個簡單易用的 API 來將檔案結構與資料分離。<br>不幸的是，在實際經驗上，大多數 Web 開發人員將生成一長串的 HTML 並將它發送到 HTTP 的響應中，這不只在 PHP 開發中見到，這只是一般常見的 Web 開發方式。</p><p>減輕 XSS 漏洞不是一個失敗的原因。 但是，瀏覽器安全部分中的所有內容突然變得非常相關。 簡而言之:</p><ol><li>輸出永遠記得跳脫(escape)，輸入則不用。如果乾淨的資料放在資料庫中，發現其他地方有 SQL 注入式攻擊(SQL injection)，攻擊者可以惡意軟體完全繞過 XSS 的保護來污染這些資料。</li><li>如果您使用的框架樣板引擎有提供自動上下文過濾，請使用它來讓框架變得安全。</li><li><code>echo htmlentities($string, ENT_QUOTES | ENT_HTML5, &#39;UTF-8&#39;);</code>是個有安全有效的方法來阻止 UTF-8 編碼頁面上所有的 XSS 攻擊，但不允許字串內有 HTML 編碼。</li><li>如果允許你使用 Markdown 語法來替代 HTML，就盡可能別用 HTML</li><li>如果你需要使用 HTML 而非樣版引擎的話，請使用 <a href="http://htmlpurifier.org/">HTML Purifier</a>，HTML Purifier 不適合用在 HTML 轉譯的上下文。</li></ol><p><a name="cross-site-request-forgery-csrf"></a></p><h2 id="Cross-Site-Request-Forgery-CSRF"><a href="#Cross-Site-Request-Forgery-CSRF" class="headerlink" title="Cross-Site Request Forgery (CSRF)"></a>Cross-Site Request Forgery (CSRF)</h2><p>跨網站偽造請求是種混淆副攻擊，通常藉著欺騙用戶瀏覽器或提高用戶權限來，代替攻擊者執行惡意的 HTTP 請求。</p><p>一般情況下可以透過簡單的兩步驟來解決：</p><ol><li>使用 HTTPS，這是先決條件，在沒有 HTTPS 的情況下連線就相對不安全，不過 HTTPS 並不能制止 CSRF。</li><li>添加基本的挑戰響應機制的驗證(challenge-response)</li></ol><ul><li>為每個表單加入一個隱藏的表單屬性</li><li>填入安全的隨機碼(稱為 token)</li><li>驗證表單是否提供這隱藏屬性，是否符合預期</li></ul><p>我們寫了個 <a href="https://github.com/paragonie/anti-csrf">Anti-CSRF</a> 的函式庫來更進階處理：</p><ul><li>你可以使每個 token 只能使用一次來，來防止重複攻擊</li><li>多個 token 存放在後端</li><li>token 到期後記得替換成新的</li><li>每個 token 綁定到特定的 URL</li><li>如果一個 token 洩漏，就無法在不同的內容中使用</li><li>Token 可以綁定到特定IP</li><li>v2.1版之後，token 就可以被重複使用(為了 AJAX 調用)</li></ul><p>如果你用的框架沒有做到 CSRF 漏洞的處理，記得使用 Anti-CSRF。在不久的將來，可以使用 <a href="https://www.sjoerdlangkemper.nl/2016/04/14/preventing-csrf-with-samesite-cookie-attribute/">SameSite cookies 來防止 CSRF 攻擊</a>。</p><p><a name="xml-attacks-xxe-xpath-injection"></a></p><h2 id="XML-Attacks-XXE-XPath-Injection"><a href="#XML-Attacks-XXE-XPath-Injection" class="headerlink" title="XML Attacks (XXE, XPath Injection)"></a>XML Attacks (XXE, XPath Injection)</h2><p>在執行大量 XML 處理的應用程序中存在兩個主要的漏洞：</p><ul><li>XML External Entities（XXE）</li><li>XPath Injection</li></ul><p>XXE 攻擊可以啟動本地/遠端包含攻擊執行的文件。早期著名的有 Google Docs 遭到 XXE 攻擊，但是在他們大量操作 XML 的商業應用程序之外大部分是聞所未聞的。</p><p>針對 XXE 襲擊的主要緩解措施如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libxml_disable_entity_loader(true);</span><br></pre></td></tr></table></figure><p><a href="https://www.owasp.org/index.php/XPATH_Injection">XPath Injection</a> 與 SQL injection 很像，不過是使用 XML 檔案。幸運的是，PHP 生態中要將用戶輸入的值傳入 XPath 是很罕見的。反之不幸的是，也意味著 PHP 生態中不存在可用的最佳解法，最好的方法是在任何有關 XPath 查詢的資料上使用允許的字符當作白名單。白名單比黑名單來得安全。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types=1);</span><br><span class="line"></span><br><span class="line">class SafeXPathEscaper</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @param string $input</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public static function allowAlphaNumeric(string $input): string</span><br><span class="line">    &#123;</span><br><span class="line">        return \preg_replace(&#x27;#[^A-Za-z0-9]#&#x27;, &#x27;&#x27;, $input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param string $input</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public static function allowNumeric(string $input): string</span><br><span class="line">    &#123;</span><br><span class="line">        return \preg_replace(&#x27;#[^0-9]#&#x27;, &#x27;&#x27;, $input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Usage:</span><br><span class="line">$selected = $xml-&gt;xpath(</span><br><span class="line">    &quot;/user/username/&quot; . SafeXPathEscaper::allowAlphaNumeric(</span><br><span class="line">        $_GET[&#x27;username&#x27;]</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><a name="deserialization-and-php-object-injection"></a></p><h2 id="Deserialization-and-PHP-Object-Injection"><a href="#Deserialization-and-PHP-Object-Injection" class="headerlink" title="Deserialization and PHP Object Injection"></a>Deserialization and PHP Object Injection</h2><blockquote><p>深入來說：<a href="https://paragonie.com/blog/2016/04/securely-implementing-de-serialization-in-php">在 PHP 中安全地實現(反)序列化</a></p></blockquote><p>如果將不可靠的數據傳入 <code>unserialize()</code>，通常會是下面兩個結果之一：</p><ol><li>PHP Object Injection，它可以被用來啟動一連串反應並觸發其他被誤用的物件漏洞。</li><li>PHP 直譯器本身的記憶體損壞</li></ol><p>大多數開發者喜歡用 JSON 來做序列化，這對改善軟體安全是有幫助的，但是記住 <code>json_decode()</code> 容易受到透過 <a href="http://lukasmartinelli.ch/web/2014/11/17/php-dos-attack-revisited.html">hash 碰撞造成的阻斷式攻擊(hash-collision denial-of-service (Hash-DoS))</a>，不幸的是 PHP 的 <a href="https://bugs.php.net/bug.php?id=70644">Hash-DoS 問題還沒能完全解決</a>。</p><p>從 djb33 遷移到 SipHash，對於字串的輸入，hash 輸出最高為設為 1，對於整數輸入設置為 0，在每個請求時使用 CSPRNG(密碼學偽隨機數生成器，英文：Cryptographically secure pseudorandom number generator，通稱CSPRNG)，將能完全解決這問題。</p><p>不幸的是，PHP 團隊還沒有準備好放棄他們在 PHP 7 中取得的性能提升，所以說服他們放棄 djb33（這個速度非常快，但是不安全），轉而支持SipHash（雖然速度不如 djb33 快，但更安全），這是一個很難解決的問題。如果效能受到重大影響，可能會阻礙在未來版本被採用，進而影響到安全性。</p><p>所以，最好的做法是：</p><ul><li>使用 JSON，因為比 <code>unserialize()</code> 安全</li><li>如果可以，在反序列化輸入內容前先驗證過<ul><li>對於提供給最終用戶的數據，透過只有網路伺服器才知道的密鑰使用 <code>sodium_crypto_auth()</code> 和 <code>sodium_crypto_auth_verify()</code></li><li>對於提供給第三方的數據，請他們透過 <code>sodium_crypto_sign()</code> 來對 JSON 做簽署，並搭配第三公鑰使用 <code>sodium_crypto_sign_open()</code> 來做驗證<ul><li>如果需要對 hex 或 base64 編碼傳輸進行簽署，也可以使用分離的簽署 API</li></ul></li><li>如果無法驗證 JSON 字串，請嚴格限速並阻止 IP 地址來減少重複的違規者</li></ul></li></ul><p><a name="password-hashing"></a></p><h2 id="Password-Hashing"><a href="#Password-Hashing" class="headerlink" title="Password Hashing"></a>Password Hashing</h2><blockquote><p>深入來說：<a href="https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016">在2016年如何安全地儲存您的密碼</a></p></blockquote><p>安全的密碼儲存曾經是個激烈的議題，但現在實作起來相當微不足道，特別是在 PHP 中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$hash = \password_hash($password, PASSWORD_DEFAULT);</span><br><span class="line"></span><br><span class="line">if (\password_verify($password, $hash)) &#123;</span><br><span class="line">    // Authenticated.</span><br><span class="line">    if (\password_needs_rehash($hash, PASSWORD_DEFAULT)) &#123;</span><br><span class="line">        // Rehash, update database.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你甚至不用知道背後使用什麼演算法，如果使用了最新版本的 PHP，也就會使用當前最新的演算法，並且只要有新的演算法可用，用戶的密碼也會被自動升級。不論妳做什麼，都不要做 <a href="https://paragonie.com/blog/2016/08/on-insecurity-popular-open-source-php-cms-platforms#wordpress-password-storage">WordPress 做過的事</a>。</p><p>如果你很好奇，從 PHP 5.5 到 PHP 7.2 默認的演算法是 bcrypt，未來可能改用<a href="https://password-hashing.net/">密碼 hash 大賽冠軍</a>的 Argon2。如果您以前沒有使用 <code>password_*</code> API，並且有傳統的 hash 需要遷移，請確保以<a href="https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016#legacy-hashes">這種方式</a>進行。很多公司弄錯，最有名的是 <a href="https://www.theregister.co.uk/2016/12/15/yahoos_password_hash/">Yahoo</a>，最近不正確的升級了傳統的 hash 似乎導致了 <a href="https://objective-see.com/blog/blog_0x24.html">Apple 最近的 <code>iamroot</code> 錯誤</a>。</p><p><a name="general-purpose-cryptography"></a></p><h2 id="General-Purpose-Cryptography"><a href="#General-Purpose-Cryptography" class="headerlink" title="General-Purpose Cryptography"></a>General-Purpose Cryptography</h2><p>這是我們寫的另一個主題：</p><ul><li><a href="https://paragonie.com/blog/2015/05/using-encryption-and-authentication-correctly">正確使用加密和認證</a>(2015)</li><li><a href="https://paragonie.com/blog/2015/07/how-safely-generate-random-strings-and-integers-in-php">如何在PHP中安全地產生隨機字符串和整數</a>(2015)</li><li>推薦：<a href="https://paragonie.com/blog/2015/11/choosing-right-cryptography-library-for-your-php-project-guide">為您的PHP項目選擇正確的加密庫：指南</a>（2015）</li><li>建議：<a href="https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded">You Wouldn’t Base64 a Password - Cryptography Decoded</a>（2015）</li><li><a href="https://paragonie.com/blog/2017/02/cryptographically-secure-php-development">Cryptographically Secure PHP Development</a>(2017)</li><li>推薦：<a href="https://paragonie.com/blog/2017/06/libsodium-quick-reference-quick-comparison-similar-functions-and-which-one-use">Libsodium快速參考：類似命名的函數及其使用案例</a>（2017）</li></ul><p>一般來說，您總是希望使用 Sodium 密碼函式庫（libsodium）進行應用層的加密，如果你需要支援 PHP 7.2 之前的版本，可以使用 <a href="https://github.com/paragonie/sodium_compat">sodium_compat</a>來假裝用戶也在 7.2 的版本。</p><p>在特殊情況下，因為嚴格的演算法選擇與相互操作上，您可以需要不同的函式庫。如果有疑問，可以諮詢密碼專家，來了解密碼選擇和密碼工程師實作上是否安全。</p><p><a name="specialized-use-cases"></a></p><h1 id="Specialized-Use-Cases"><a href="#Specialized-Use-Cases" class="headerlink" title="Specialized Use-Cases"></a>Specialized Use-Cases</h1><p>現在您已經掌握了2018年以後構建安全PHP應用程序的基礎知識，接下來我們來看一些更專業的用例</p><p><a name="searchable-encryption"></a></p><h2 id="Searchable-Encryption"><a href="#Searchable-Encryption" class="headerlink" title="Searchable Encryption"></a>Searchable Encryption</h2><blockquote><p>深入來說：<a href="https://paragonie.com/blog/2017/05/building-searchable-encrypted-databases-with-php-and-sql">使用PHP和SQL構建可搜索的加密資料庫</a></p></blockquote><p>可搜索的加密資料庫是理想的，但普遍被認為是不太可能實現的。上面的文章試圖讓讀者通過我們的解決方案來發展得更深入，但實際上：</p><ol><li>設計您的架構，database compromise 不會讓攻擊者訪問您的加密金鑰</li><li>在一個密鑰下加密數據</li><li>基於 HMAC 或具有靜態 salt 的安全KDF(如: Argon2)創建多個索引（具有它們自己獨特的密鑰）。</li><li>可選：放棄第三步驟，使用布隆過濾器(Bloom filter)</li><li>在 SELECT 查詢結果使用步驟3或4來輸出</li><li>解密結果</li></ol><p>這過程的任何一步都可以根據使用情況來斟酌。</p><p><a name="token-based-authentication-without-side-channels"></a></p><h2 id="Token-based-Authentication-without-Side-Channels"><a href="#Token-based-Authentication-without-Side-Channels" class="headerlink" title="Token-based Authentication without Side-Channels"></a>Token-based Authentication without Side-Channels</h2><blockquote><p>深入來說：<a href="https://paragonie.com/blog/2017/02/split-tokens-token-based-authentication-protocols-without-side-channels">Split Tokens: Token-Based Authentication Protocols without Side-Channels</a></p></blockquote><p>說到資料庫，你知道 SELECT 查詢在理論上可能是定時訊息洩漏的來源。<br>簡單的遷移：</p><ol><li>把驗證的 token 減少一半</li><li>使用一半的 SELECT 查詢在理論上可能是定時訊息洩漏的來源。</li><li>在常數時間內驗證後半部</li></ol><ul><li>您可以選擇將後半部分的 hash 存在資料庫中，而不是半個 token。這對於只能使用一次的 token 是有意義的;像是密碼重置或“記住我”</li></ul><p>這樣即時使用了定時洩漏所竊取來的一半 token，剩下的另一半需要強烈的攻擊才能成功。</p><p><a name="developing-secure-apis"></a></p><h2 id="Developing-Secure-APIs"><a href="#Developing-Secure-APIs" class="headerlink" title="Developing Secure APIs"></a>Developing Secure APIs</h2><blockquote><p>深入來說：<a href="https://paragonie.com/blog/2017/06/hardening-your-php-powered-apis-with-sapient">使用 Sapient 來強化 PHP 支援的 API</a></p></blockquote><p>我們開發了 Secure API ENgineering Toolkit <a href="https://github.com/paragonie/sapient">SAPIENT</a>來確保兩台伺服器間的身份驗證不用費太多力氣。除了 HTTPS 提供的安全性外，Sapinet 允許您使用共享密鑰或公鑰加密來加密/驗證訊息。</p><p>這使您可以使用 Ed25519 對 API 請求和響應進行身份驗證，或者將消息加密到只能由接收方服務器的密鑰解密，即使存在中間人攻擊者並設有流氓/入侵 證書頒發機構。</p><p>由於每個 HTTP 訓息都通過安全密碼進行身份驗證，因此可以安全地使用它來代替有狀態 token 雜耍協議（例如OAuth）。但是，在密碼學方面，在不做任何規範的事情之前，總要確保他們的實現是由專家研究的。</p><p>所有 Sapient 使用的密碼都由 Sodium 密碼術函式庫提供。</p><p>進一步閱讀:</p><ul><li><a href="https://github.com/paragonie/sapient/tree/master/docs">Sapient Documentation</a></li><li><a href="https://github.com/paragonie/sapient/blob/master/docs/Tutorial.md">Sapient Tutorial</a></li><li><a href="https://github.com/paragonie/sapient/blob/master/docs/Specification.md">Sapient Specification</a></li></ul><p>Paragon Initiative Enterprises 已經在其許多產品（包括許多開源軟體專案）中使用了 Sapient，並將繼續為 Sapient 用戶組合添加軟件項目。</p><p><a name="security-event-logging-with-chronicle"></a></p><h2 id="Security-Event-Logging-with-Chronicle"><a href="#Security-Event-Logging-with-Chronicle" class="headerlink" title="Security Event Logging with Chronicle"></a>Security Event Logging with Chronicle</h2><blockquote><p>深入來說：<a href="https://paragonie.com/blog/2017/07/chronicle-will-make-you-question-need-for-blockchain-technology">Chronicle 會讓你質疑區塊鏈技術的需求</a></p></blockquote><p>Chronicle 是個基於 hash-chain 資料結構的 只進行追加(append-only)加密帳本，引起了許多公司對”區塊鏈”技術的興趣。除了只進行追加(append-only)加密帳本具創造性之外，Chronicle 集成到 SIEM 中時也有優點，因為您可以發送安全關鍵事件到私有的 Chronicle 中，並且它們保持不可變。如果您的 Chronicle 設置為將其摘要散列交叉簽名到其他 Chronicle 中，或是還有其他重製您 Chronicle 內容的實例，攻擊者將很難篡改您的安全事件日誌。<br>通過 Chronicle，您可以獲得區塊鏈的所有彈性，而沒有任何隱私，性能或彈性問題。要將資料發佈到本地的 Chronicle，您可以使用任何與 <a href="https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-api-sapient">Sapient 兼容的 API</a>，但最簡單的解決方案稱為 <a href="https://github.com/paragonie/quill">Quill</a>。</p><p><a name="%E4%BD%9C%E8%80%85%E5%BE%8C%E8%A8%98"></a></p><h1 id="作者後記"><a href="#作者後記" class="headerlink" title="作者後記"></a>作者後記</h1><p>一個聰明的讀者可能注意到我們引用了很多我們自己的工作（部落格文章和開源軟件），但我們不僅僅是引用了我們自己的工作。</p><p>這不是偶然的。</p><p>自從我們於2015年初成立以來，我們一直在編寫安全性相關的函式庫，並致力於提高 PHP 生態系統的安全性。</p><p>我們已經介紹了很多，我們的資安工程師（他們最近在 PHP 核心中推行更安全的加密技術，只是要到 PHP 7.2），並不擅長宣揚他的工作或興趣完成的作品。對於我們多年來開發的工具或函式庫，你可能有一半沒聽過，關於這點我很抱歉。</p><p>但是，我們也不可能成為各方面的先行者，所以我們在可能的情況下，選擇了認為與公眾利益更一致的專業工作，而不藏私。這就是為什麼瀏覽器安全專用的許多部分都參考了 Scott Helme 和公司的工作，他們在為開發人員提供這些容易理解的新安全功能。</p><p>本指南當然不是詳盡的。寫出不安全代碼的方法幾乎和撰寫代碼一樣多。安全是一種心態，而不是目的性。隨著上面所寫的一切與提供的資源，我們希望這將有助於全世界的開發人員從今天開始用 PHP 開發安全的軟體。</p><p><a name="resources"></a></p><h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1><p>如果您已經按照本篇上的所有內容進行了操作，並且需要更多內容，那麼您可能會對我們策劃的<a href="https://github.com/paragonie/awesome-appsec">閱讀列表感興趣，以便學習應用程序安全性</a>。</p><p>如果你已經寫出了足夠安全的代碼，並且希望我們從資安工程師的角度來提供指教。這正是我們<a href="https://paragonie.com/services">提供的服務</a>。</p><p>[打廣告部分先省略]</p><p>接下來是 PHP 和資訊安全社區提供的資源列表，這些資源幫助互聯網更加安全：</p><ul><li><a href="http://www.phptherightway.com/">PHP: The Right Way</a>，線上免費的現代PHP開發指南</li><li><a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/">Mozilla’s SSL Config Generator</a></li><li><a href="https://letsencrypt.org/">Let’s Encrypt</a>，通過證書頒發機構提供免費 TLS 證書來創造更安全的網路。</li><li><a href="https://www.ssllabs.com/ssltest">Qualys SSL Labs</a> 提供一個快速又簡單的工具來測試 TLS 配置，幾乎每個人都用這個來解決他們安全憑證相關問題。</li><li><a href="https://www.websiteplanet.com/webtools/ssl-checker/">SSL Checker</a> 提供SSL檢查的工具，介面友善好操作，網站上還有其他有用的工具可以參考使用。</li><li><a href="https://securityheaders.io/">Security Headers</a> 讓您可以使用瀏覽器安全功能來保護您的用戶，且驗證網站安全。</li><li><a href="https://report-uri.com/">Report-URI</a> 一個不錯的免費網路資源，用來開始檢查檔頭安全。如果有發現 XSS 的媒介，會被通報到 Report-URI，讓 Report-URI 彙整這些問題來提供你更好的服務。</li><li><a href="https://www.ripstech.com/php-security-calendar-2017">The PHP Security Advent Calendar</a> by the team behind <a href="https://www.ripstech.com/">RIPSTech</a>。</li><li><a href="https://snuffleupagus.readthedocs.io/">Snuffleupagus</a>, 一個安全導向的 PHP 模組 (有很大程度是被遺棄的 <a href="https://github.com/sektioneins/suhosin">Suhosin</a> 精神繼承者).</li><li><a href="https://phpdelusions.net/">PHP Delusions</a>，一個致力於更好地使用PHP的網站。大部分的口氣都有點自負，但作者對技術的準確性和清晰度的奉獻使得它值得一讀，特別是對於那些不太喜歡PDO功能的人來說。</li><li><a href="https://haveibeenpwned.com/">Have I Been Pwned?</a> 幫助用戶找出他們過去的資料是否洩漏。</li></ul>]]></content>
    
    
    <summary type="html">&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#php-versions&quot;&gt;PHP Versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dependency-management&quot;&gt;Dependency Management&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#recommended-packages&quot;&gt;Recommended Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#https-and-browser-security&quot;&gt;HTTPS and Browser Security&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#security-headers&quot;&gt;Security Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#subresource-integrity&quot;&gt;Subresource Integrity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#document-relationships&quot;&gt;Document Relationships&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#developing-secure-php-software&quot;&gt;Developing Secure PHP Software&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#database-interaction&quot;&gt;Database Interaction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#file-uploads&quot;&gt;File Uploads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cross-site-scripting-xss&quot;&gt;Cross-Site Scripting (XSS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cross-site-request-forgery-csrf&quot;&gt;Cross-Site Request Forgery (CSRF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#xml-attacks-xxe-xpath-injection&quot;&gt;XML Attacks (XXE, XPath Injection)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#deserialization-and-php-object-injection&quot;&gt;Deserialization and PHP Object Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#password-hashing&quot;&gt;Password Hashing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#general-purpose-cryptography&quot;&gt;General-Purpose Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#specialized-use-cases&quot;&gt;Specialized Use-Cases&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#searchable-encryption&quot;&gt;Searchable Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#token-based-authentication-without-side-channels&quot;&gt;Token-based Authentication without Side-Channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#developing-secure-apis&quot;&gt;Developing Secure APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#security-event-logging-with-chronicle&quot;&gt;Security Event Logging with Chronicle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BD%9C%E8%80%85%E5%BE%8C%E8%A8%98&quot;&gt;作者後記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;p&gt;原文網址：&lt;a href=&quot;https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software&quot;&gt;https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隨著將到來的 2018 年，一般技術人員（尤其是網路開發者）必須拋棄原有開發安全 PHP 應用軟體的舊習與信念。尤其是對於許多不相信這樣壯舉的人來說。&lt;br&gt;本指南作為「&lt;a href=&quot;http://www.phptherightway.com/&quot;&gt;PHP: The Right Way&lt;/a&gt;」電子書（&lt;a href=&quot;http://laravel-taiwan.github.io/php-the-right-way/&quot;&gt;繁中版&lt;/a&gt;）的補充，強調的是安全性，而不是一般PHP程式開發者主題（如：代碼風格）&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;php-versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;PHP-Versions&quot;&gt;&lt;a href=&quot;#PHP-Versions&quot; class=&quot;headerlink&quot; title=&quot;PHP Versions&quot;&gt;&lt;/a&gt;PHP Versions&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;簡而言之：建議在 2018 年運行 PHP 7.2, 並計劃在 2019年初轉換到 PHP 7.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PHP 7.2 已經在 2017-11-30 釋出。&lt;/p&gt;
&lt;p&gt;在撰寫本文時，僅有 PHP 7.1 與 7.2 會得到 PHP 開發人員的積極支援，而 PHP 5.6 和 7.0 大約會在一年內得到安全性修正。&lt;/p&gt;
&lt;p&gt;一些提供舊版本PHP的長期支援(LTS)作業系統，這樣的做法通常被認為是有害的。尤其是，在它們增加安全補丁時，不一併增加PHP版號的壞習慣，使得很難推論這些PHP版本的安全性。&lt;/p&gt;
&lt;p&gt;因此，無論供應商做出了什麼承諾，只要你能夠幫忙，就應該努力在任何時候運行被主動支持的PHP版本。這樣的話，即使最終只購買一個安全版本，持續升級的工作也會讓你的生活免受不愉快的驚喜。&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://soarlin.github.io/categories/PHP/"/>
    
    
    <category term="composer" scheme="https://soarlin.github.io/tags/composer/"/>
    
    <category term="security" scheme="https://soarlin.github.io/tags/security/"/>
    
    <category term="https" scheme="https://soarlin.github.io/tags/https/"/>
    
    <category term="injection" scheme="https://soarlin.github.io/tags/injection/"/>
    
    <category term="XSS" scheme="https://soarlin.github.io/tags/XSS/"/>
    
    <category term="CSRF" scheme="https://soarlin.github.io/tags/CSRF/"/>
    
    <category term="password" scheme="https://soarlin.github.io/tags/password/"/>
    
  </entry>
  
  <entry>
    <title>常用CSS紀錄</title>
    <link href="https://soarlin.github.io/2017/11/05/%E5%B8%B8%E7%94%A8CSS%E7%B4%80%E9%8C%84/"/>
    <id>https://soarlin.github.io/2017/11/05/%E5%B8%B8%E7%94%A8CSS%E7%B4%80%E9%8C%84/</id>
    <published>2017-11-05T13:16:43.000Z</published>
    <updated>2021-07-18T11:02:45.157Z</updated>
    
    <content type="html"><![CDATA[<p>已經兩個月沒更新 blog 了，感覺再不寫都快忘光 hexo, Travis CI 跟 elasticsearch 的使用了，不過先前已經將大部分的工作都自動化了，所以現在省事很多，只要 git push 後沒出問題的話</p><p>最近一兩個月下來，本來有想說寫一下怎麼做 FB 產品目錄，不過感覺這個找相關文件看好像就好了，加上寫文章動力大減，就一直荒廢中，而工作也幾乎都是切版，套程式，雖然有花一點時間摸索一下 docker 跟 golang 可是礙於工作需完成的進度很趕，所以實在沒太多時間好好深入這兩個東西，覺得非常可惜！希望之後可以跟得上大家的進度，不要扯後腿。</p><p>之所以寫這篇只是記錄一下最近幾次的切版習慣跟用法，以及一些常用的 mixin 函式</p><h2 id="SCSS-慣用目錄結構"><a href="#SCSS-慣用目錄結構" class="headerlink" title="SCSS 慣用目錄結構"></a>SCSS 慣用目錄結構</h2><p>雖然我是寫 scss 語法，可是我好像都把目錄命名成 sass，不曉得當初怎麼想的，反正就參考吧！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./sass</span><br><span class="line">├── main.scss</span><br><span class="line">├── modules</span><br><span class="line">│   ├── _common.scss</span><br><span class="line">│   ├── _component.scss</span><br><span class="line">│   ├── _mixins.scss</span><br><span class="line">│   ├── _normalize.scss</span><br><span class="line">│   └── _variables.scss</span><br><span class="line">└── partials</span><br><span class="line">    ├── _auth.scss</span><br><span class="line">    ├── _blog.scss</span><br><span class="line">    ├── _button.scss</span><br><span class="line">    ├── _category.scss</span><br><span class="line">    ├── _footer.scss</span><br><span class="line">    ├── _header.scss</span><br><span class="line">    ├── _list.scss</span><br><span class="line">    ├── _login.scss</span><br><span class="line">    ├── _modal.scss</span><br><span class="line">    ├── _order.scss</span><br><span class="line">    └── _smartbanner.scss</span><br></pre></td></tr></table></figure><p>主要就用 main.scss 來 import 其他檔案來編譯， modules 裡面放些比較通用的資源，如： normalize (不過有另外用 bootstrap 的話應該不用在 import 了)、網站 CSS 通用變數、mixin 函式等等，而另一個 partials 就可能依照頁面名稱、功能來撰寫相關 CSS</p><span id="more"></span><p>所以 main.scss 的檔案大概就只會像這樣，這裡我還多了 body 的樣式，主要是用來控制全站頁面 body 的 padding</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import &#x27;modules/normalize&#x27;;</span><br><span class="line">@import &#x27;modules/variables&#x27;;</span><br><span class="line">@import &#x27;modules/mixins&#x27;;</span><br><span class="line">@import &#x27;modules/common&#x27;;</span><br><span class="line">@import &#x27;modules/component&#x27;;</span><br><span class="line"></span><br><span class="line">@import &#x27;partials/button&#x27;;</span><br><span class="line">@import &#x27;partials/list&#x27;;</span><br><span class="line">@import &#x27;partials/smartbanner&#x27;;</span><br><span class="line">....</span><br><span class="line">@import &#x27;partials/login&#x27;;</span><br><span class="line">@import &#x27;partials/modal&#x27;;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">    padding-top: 70px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用-mixin-function"><a href="#常用-mixin-function" class="headerlink" title="常用 mixin function"></a>常用 mixin function</h2><h3 id="清除-float"><a href="#清除-float" class="headerlink" title="清除 float"></a>清除 float</h3><p>後來少用了，大多用 flexbox 排版了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@mixin clearfix &#123;</span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: table;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用上</span><br><span class="line">.my-container &#123;</span><br><span class="line">    @include clearfix;</span><br><span class="line">    padding: 10px 20px;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="過長文字結尾省略"><a href="#過長文字結尾省略" class="headerlink" title="過長文字結尾省略"></a>過長文字結尾省略</h3><p>多行的用法不是每個瀏覽器都適用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@mixin ellipsis($line:1) &#123;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    overflow: hidden;</span><br><span class="line"></span><br><span class="line">    @if $line == 1 &#123;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">    &#125; @else &#123;</span><br><span class="line">        display: -webkit-box;</span><br><span class="line">        -webkit-line-clamp: $line;</span><br><span class="line">        -webkit-box-orient: vertical;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用上, 標題過長省略(一行), 描述第三行後省略</span><br><span class="line">.card &#123;</span><br><span class="line">    .title &#123;</span><br><span class="line">        font-size: 1em;</span><br><span class="line">        line-height: 1.4;</span><br><span class="line">        width: 100%;</span><br><span class="line">        @include ellipsis;</span><br><span class="line">    &#125;</span><br><span class="line">    .description &#123;</span><br><span class="line">        font-size: .8em;</span><br><span class="line">        line-height: 1.2;</span><br><span class="line">        @include ellipsis(3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="容器-flexbox-排版-預設置中"><a href="#容器-flexbox-排版-預設置中" class="headerlink" title="容器, flexbox 排版(預設置中)"></a>容器, flexbox 排版(預設置中)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@mixin size($w, $h:$w, $bdrs:0) &#123;</span><br><span class="line">    width: $w;</span><br><span class="line">    height: $h;</span><br><span class="line">    border-radius: $bdrs;</span><br><span class="line">&#125;</span><br><span class="line">@mixin flex($jc:center, $ai:center) &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: $jc;</span><br><span class="line">    align-items: $ai;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 範例: 按鈕內文字置中</span><br><span class="line">.redeem-btn &#123;</span><br><span class="line">    @include size(80, 50, 6);</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    font-size: 1em;</span><br><span class="line">    line-height: 1.3;</span><br><span class="line">    @include flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空背景"><a href="#空背景" class="headerlink" title="空背景"></a>空背景</h3><p>方便替換圖片</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@mixin no-image-bg &#123;</span><br><span class="line">    background-color: rgba(255,255,255, .1);</span><br><span class="line">    background-position: center center;</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 範例: 某封面圖</span><br><span class="line">.cover &#123;</span><br><span class="line">    @include size(160, 120, 10);</span><br><span class="line">    @include flex;</span><br><span class="line">    @include no-image-bg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// HTML 內搭配背景圖片使用</span><br><span class="line">&lt;div class=&quot;cover&quot; style=&quot;background-image:url(&#x27;path-to-cover-image&#x27;)&quot;&gt;</span><br><span class="line">  &lt;h3 class=&quot;title&quot;&gt;封面標題&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="RWD-使用"><a href="#RWD-使用" class="headerlink" title="RWD 使用"></a>RWD 使用</h3><p>這個之前好像有寫過，這裡詳細列出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 尺寸變數 */</span><br><span class="line">$desktop-lg-min: 1200px;</span><br><span class="line">$desktop-max:    1199px;</span><br><span class="line">$tablet-max:      991px;</span><br><span class="line">$mobile-max:      767px;</span><br><span class="line">$mobile-min:      480px;</span><br><span class="line"></span><br><span class="line">@mixin lg-desktop &#123;</span><br><span class="line">    @media screen and (min-width: $desktop-lg-min) &#123;</span><br><span class="line">        @content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@mixin desktop &#123;</span><br><span class="line">    @media screen and (max-width: $desktop-max) &#123;</span><br><span class="line">        @content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@mixin tablet &#123;</span><br><span class="line">    @media screen and (max-width: $tablet-max) &#123;</span><br><span class="line">        @content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@mixin phone &#123;</span><br><span class="line">    @media screen and (max-width: $mobile-max) &#123;</span><br><span class="line">        @content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@mixin phoneV &#123;</span><br><span class="line">    @media screen and (max-width: $mobile-min) &#123;</span><br><span class="line">        @content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用範例</span><br><span class="line">.swiper-slide &#123;</span><br><span class="line">    width: calc(33.33% - 10px);</span><br><span class="line"></span><br><span class="line">    @include tablet &#123;</span><br><span class="line">        width: calc(50% - 10px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @include phone &#123;</span><br><span class="line">        width: calc(75% - 10px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @include phoneV &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="捲軸隱藏-非支援所有瀏覽器"><a href="#捲軸隱藏-非支援所有瀏覽器" class="headerlink" title="捲軸隱藏, 非支援所有瀏覽器"></a>捲軸隱藏, 非支援所有瀏覽器</h3><p>有時候覺得捲軸有點醜，可以在 Chrome 瀏覽器內隱藏起來，只是使用時要小心，使用者因此不曉得可以捲動，反而造成使用上的困擾</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.my-dropdown-list &#123;</span><br><span class="line">    max-height: 300px;</span><br><span class="line">    overflow-x: hidden;</span><br><span class="line">    overflow-y: scroll;</span><br><span class="line"></span><br><span class="line">    &amp;::-webkit-scrollbar &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外最近幫網站切版，發現幾乎大量使用到 <a href="http://idangero.us/swiper/">Swiper</a> 這套件，而開始用這套件時，還是 3.4.2 版，而現在時過境遷，都更新到 4.0.1 版了，查閱的 API 資料也開始不適用了…感覺有點糟糕，要是全站套件更新，感覺是個大工程，只能先繼續使用舊版，而相關參數應該不會差太多，目前已知的是左右切換的按鈕參數寫法改變了</p><p>這裡也記錄一下最常用的幾個參數</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 必要 DOM</span><br><span class="line">&lt;div class=&quot;swiper-container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-slide&quot;&gt;Slide 1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-slide&quot;&gt;Slide 2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-slide&quot;&gt;Slide 3&lt;/div&gt;</span><br><span class="line">    ....</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// JS</span><br><span class="line">new Swiper (&#x27;.swiper-container&#x27;, &#123;</span><br><span class="line">    freeMode: false,</span><br><span class="line">    freeModeSticky: false,</span><br><span class="line">    freeModeMomentumRatio: 5,</span><br><span class="line">    threshold: 50,</span><br><span class="line">    slidesPerView: &#x27;auto&#x27;,</span><br><span class="line">    spaceBetween: 30,</span><br><span class="line">    paginationClickable: true,</span><br><span class="line">    touchReleaseOnEdges: true,</span><br><span class="line">    prevButton: &#x27;.swiper-button-prev&#x27;,</span><br><span class="line">    nextButton: &#x27;.swiper-button-next&#x27;,</span><br><span class="line">    breakpoints: &#123;</span><br><span class="line">        991: &#123;</span><br><span class="line">            spaceBetween: 10,</span><br><span class="line">        &#125;,</span><br><span class="line">        1199: &#123;</span><br><span class="line">            spaceBetween: 15,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>freeMode</code> 預設 false，如果設定成 tree, 在手機上滑動的時候，會非常平順，不過也不好定下來</li><li><code>freeModeSticky</code> 在 free mode 下設定 true 好讓 slide 可以再鬆開滑動時，停在某一 slide 下</li><li><code>freeModeMomentumRatio</code> 滑動釋放時的動量</li><li><code>threshold</code> 行動裝置上, touch 時移動的容錯距離，在這範圍內不觸法 slider 滑動</li><li><code>slidesPerView</code> 指定每一頁 slider 要放幾個，當有給定 swiper-slide 寬度時，使用 auto 可自行排序，但是畫面會等 js 處理</li><li><code>spaceBetween</code> 每個 slide 中間的間距，在 <code>slidesPerView</code> 設定 auto 時，可以明顯感受出來</li><li><code>paginationClickable</code> 顧名思義，當有 pagination 時，可點擊下方小圓點來切換</li><li><code>touchReleaseOnEdges</code> 有點忘了當初為何有用這個，好像是可以讓滑到 slider 邊緣時，繼續滑動吧？！</li><li><code>breakpoints</code> 很好用，但是不一定常用，用來指定在不同螢幕寬度下，要變化的參數</li></ul><p>大概就先這樣吧！其實最近還有用到一個套件是 <a href="http://dotdotdot.frebsite.nl/">jquery.dotdotdot</a> 的樣子，不過才剛使用沒多久，馬上就版本更新，害我後來想找舊版文件超難找，還好一開始有寫好一個版本可以參考，不然真的就 GG 了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;已經兩個月沒更新 blog 了，感覺再不寫都快忘光 hexo, Travis CI 跟 elasticsearch 的使用了，不過先前已經將大部分的工作都自動化了，所以現在省事很多，只要 git push 後沒出問題的話&lt;/p&gt;
&lt;p&gt;最近一兩個月下來，本來有想說寫一下怎麼做 FB 產品目錄，不過感覺這個找相關文件看好像就好了，加上寫文章動力大減，就一直荒廢中，而工作也幾乎都是切版，套程式，雖然有花一點時間摸索一下 docker 跟 golang 可是礙於工作需完成的進度很趕，所以實在沒太多時間好好深入這兩個東西，覺得非常可惜！希望之後可以跟得上大家的進度，不要扯後腿。&lt;/p&gt;
&lt;p&gt;之所以寫這篇只是記錄一下最近幾次的切版習慣跟用法，以及一些常用的 mixin 函式&lt;/p&gt;
&lt;h2 id=&quot;SCSS-慣用目錄結構&quot;&gt;&lt;a href=&quot;#SCSS-慣用目錄結構&quot; class=&quot;headerlink&quot; title=&quot;SCSS 慣用目錄結構&quot;&gt;&lt;/a&gt;SCSS 慣用目錄結構&lt;/h2&gt;&lt;p&gt;雖然我是寫 scss 語法，可是我好像都把目錄命名成 sass，不曉得當初怎麼想的，反正就參考吧！&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./sass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── main.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── _common.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── _component.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── _mixins.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── _normalize.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── _variables.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── partials&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── _auth.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── _blog.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── _button.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── _category.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── _footer.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── _header.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── _list.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── _login.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── _modal.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── _order.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── _smartbanner.scss&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;主要就用 main.scss 來 import 其他檔案來編譯， modules 裡面放些比較通用的資源，如： normalize (不過有另外用 bootstrap 的話應該不用在 import 了)、網站 CSS 通用變數、mixin 函式等等，而另一個 partials 就可能依照頁面名稱、功能來撰寫相關 CSS&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="CSS" scheme="https://soarlin.github.io/tags/CSS/"/>
    
    <category term="SCSS" scheme="https://soarlin.github.io/tags/SCSS/"/>
    
    <category term="mixin" scheme="https://soarlin.github.io/tags/mixin/"/>
    
    <category term="flexbox" scheme="https://soarlin.github.io/tags/flexbox/"/>
    
  </entry>
  
  <entry>
    <title>Google Analytics與Facebook Pixel事件追蹤筆記</title>
    <link href="https://soarlin.github.io/2017/09/02/Google-Analytics%E8%88%87Facebook-Pixel%E4%BA%8B%E4%BB%B6%E8%BF%BD%E8%B9%A4%E7%AD%86%E8%A8%98/"/>
    <id>https://soarlin.github.io/2017/09/02/Google-Analytics%E8%88%87Facebook-Pixel%E4%BA%8B%E4%BB%B6%E8%BF%BD%E8%B9%A4%E7%AD%86%E8%A8%98/</id>
    <published>2017-09-02T08:00:20.000Z</published>
    <updated>2021-07-18T11:02:45.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h1><h2 id="基本作法"><a href="#基本作法" class="headerlink" title="基本作法"></a>基本作法</h2><p>每一頁都加上 pageview，這個真的太基本了，就不在浪費時間說明了</p><h2 id="使用事件追蹤"><a href="#使用事件追蹤" class="headerlink" title="使用事件追蹤"></a>使用事件追蹤</h2><p>事件追蹤主要分幾個參數可以使用</p><ul><li>Category</li><li>Action</li><li>Label</li><li>Value (int, 可選擇)</li></ul><p>下面用個簡單的例子說明，如果想要對用戶登入、註冊進行事件追蹤，大概可以這樣設計</p><table><thead><tr><th>說明</th><th align="center">Category</th><th align="center">Action</th><th>Label</th></tr></thead><tbody><tr><td>Email登入</td><td align="center">Login</td><td align="center">Click</td><td>Email_Login</td></tr><tr><td>Facebook登入</td><td align="center">Login</td><td align="center">Click</td><td>Facebook_Login</td></tr><tr><td>Email註冊</td><td align="center">Register</td><td align="center">Click</td><td>Email_Register</td></tr><tr><td>Facebook註冊</td><td align="center">Register</td><td align="center">Click</td><td>Facebook_Register</td></tr></tbody></table><p>JavaScript 程式碼說明，也可以看 <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/events">Google Analytics的教學文件</a></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ga(&#x27;send&#x27;, &#x27;event&#x27;, [eventCategory], [eventAction], [eventLabel], [eventValue], [fieldsObject]);</span><br></pre></td></tr></table></figure><h2 id="設定目標"><a href="#設定目標" class="headerlink" title="設定目標"></a>設定目標</h2><p>GA增加目標，可以用來驗證 AdWords 廣告成果轉換率，以及在「轉換」頁籤中的分析統計資料</p><p>目標設定的方式有四種，這裡只介紹有用過的兩種，一種是針對頁面來設定，一種是針對事件</p><h3 id="針對頁面設定目標"><a href="#針對頁面設定目標" class="headerlink" title="針對頁面設定目標"></a>針對頁面設定目標</h3><p>決定好目標頁面<br>填寫連結目標頁面網址，記得用反斜線<code>/</code>開頭，可以用以下三種方法</p><ul><li>完全相等的網址(e.g. <code>/payment/product-123</code>)</li><li>開始路徑一樣(e.g. <code>/payment/product-</code>)</li><li>正規表示式的網址寫法(e.g. <code>/payment/product-[0-9]+</code>)<br>如果需要先經過其他頁面，再到目標頁面，才算完成目標的話，再將需要先經過的頁面寫上</li></ul><p>例如：目標是「進入商品購買頁面」，需要先經過商品頁面瀏覽，就記得在開啟「程序」，然後步驟內填上畫面網址</p><h3 id="針對事件設定目標"><a href="#針對事件設定目標" class="headerlink" title="針對事件設定目標"></a>針對事件設定目標</h3><p>將目標的事件先加入追蹤，假定目標為成功登入的事件<br>進入目標詳情裡面的設定，記得跟當初事件追蹤用的 Category, Action, Label, Value(如果有的話)</p><ul><li>類別 = Login</li><li>動作 = Click</li><li>標籤 = Email_Login</li><li>價值 (X) 不設定</li></ul><p><strong>使用事件價值做為這項轉換的目標價值</strong>，這個意思是說如果事件本身有設定價值，可以用來當成這次目標達成的價值，不然可以自己設定一個金額，但不是每個目標都有價值，所以見仁見智了</p><h3 id="驗證目標"><a href="#驗證目標" class="headerlink" title="驗證目標"></a>驗證目標</h3><p>這個步驟非常重要，當 GA 放置一段時間後，開始有資料統計後，再來設定目標會比較準確，因為可以透過驗證剛剛設定的目標，檢查是否到目前為止有出現過你想追蹤的目標，如果驗證的結果 &gt; 0.0%，就表示你設定沒錯啦！不然可能就是設定出問題或這目標在先前的統計資料裡還沒有資訊。</p><h2 id="電子商務追蹤"><a href="#電子商務追蹤" class="headerlink" title="電子商務追蹤"></a>電子商務追蹤</h2><p>這個追蹤肯定沒有自己的後台訂單追蹤來的準確，畢竟很容易遇到消費者退訂、取消訂單之類的，所以加入這個追蹤只能當作是參考用，應該會超過 87% 的程度與實際相符。</p><p>使用方式：</p><p>開始結帳的時候，先在頁面加入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ga(&#x27;require&#x27;, &#x27;ecommerce&#x27;);</span><br></pre></td></tr></table></figure><p>當商品加入購物車時可加入，如果是單一商品結帳畫面，可以再填寫結帳資訊時加入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ga(&#x27;ecommerce:addItem&#x27;, &#123;</span><br><span class="line">  &#x27;id&#x27;: 訂單ID,</span><br><span class="line">  &#x27;sku&#x27;: 商品ID,</span><br><span class="line">  &#x27;name&#x27;: 商店名稱-商品名稱,</span><br><span class="line">  &#x27;category&#x27;: 商品分類,</span><br><span class="line">  &#x27;price&#x27;: 訂單價格,</span><br><span class="line">  &#x27;quantity&#x27;: &#x27;1&#x27;,</span><br><span class="line">  &#x27;currency&#x27;: 幣別(e.g. TWD, HKD..)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>交易(付款)成功時，加入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ga(&#x27;ecommerce:addTransaction&#x27;, &#123;</span><br><span class="line">    &#x27;id&#x27;         : 訂單ID or 商品ID,</span><br><span class="line">    &#x27;affiliation&#x27;: 商店名稱,</span><br><span class="line">    &#x27;revenue&#x27;    : 訂單價格,</span><br><span class="line">    &#x27;currency&#x27;   : 幣別</span><br><span class="line">&#125;);</span><br><span class="line">ga(&#x27;ecommerce:send&#x27;);</span><br></pre></td></tr></table></figure><p>若中途返回，訂單要釋放時</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ga(&#x27;ecommerce:clear&#x27;);</span><br></pre></td></tr></table></figure><h1 id="Facebook-Pixel-Tracking"><a href="#Facebook-Pixel-Tracking" class="headerlink" title="Facebook Pixel Tracking"></a>Facebook Pixel Tracking</h1><p>基本的像素追蹤，也是每頁加入 PageView 事件(注意大小寫，與GA不同)<br>Chrome 擴充套件 **Facebook Pixel Helper **可以檢查</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>已經定義9種標準事件，大致上已經夠用，可再自行增加事件定義，以下是以目前工作上使用的紀錄為例</p><table><thead><tr><th>說明</th><th align="center">Event Name</th><th align="center">參數</th><th>備註</th></tr></thead><tbody><tr><td>完成註冊</td><td align="center">CompleteRegistration</td><td align="center"></td><td></td></tr><tr><td>使用關鍵字搜尋時</td><td align="center">Search</td><td align="center">search_string</td><td></td></tr><tr><td>進入商品頁面</td><td align="center">ViewContent</td><td align="center">value, currency, content_name, content_type, content_ids</td><td>動態商品廣告中用到，必要參數 content_ids 與 content_type</td></tr><tr><td>進入預訂享樂流程</td><td align="center">InitiateCheckout</td><td align="center">content_type, content_ids, content_name</td><td></td></tr><tr><td>進入信用卡頁面</td><td align="center">AddToCart</td><td align="center">value, currency, content_name, content_type, content_ids</td><td>動態商品廣告中用到，必要參數 content_ids 與 content_type</td></tr><tr><td>新增信用卡資料</td><td align="center">AddPaymentInfo</td><td align="center">value, currency, content_name, content_ids</td><td></td></tr><tr><td>訂單交易成功</td><td align="center">Purchase</td><td align="center">value, currency, content_name, content_type, content_ids</td><td>動態商品廣告中用到，必要參數 content_ids 與 content_type</td></tr></tbody></table><p>ViewContent 範例 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fbq(&#x27;track&#x27;, &#x27;ViewContent&#x27;, &#123;</span><br><span class="line">  content_type: &#x27;product&#x27;,// 固定名稱為 product</span><br><span class="line">  content_ids: [&#x27;204&#x27;],   // product_id, array</span><br><span class="line">  content_name: &#x27;店家名稱-商品名稱&#x27;,</span><br><span class="line">  value: 13,              // 價格,integer</span><br><span class="line">  currency: &#x27;TWD&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>AddToCart 範例 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fbq(&#x27;track&#x27;, &#x27;AddToCart&#x27;, &#123;</span><br><span class="line">    content_type: &#x27;product&#x27;,</span><br><span class="line">    content_ids: [&#x27;204&#x27;],</span><br><span class="line">    content_name: &#x27;店家名稱-商品名稱&#x27;,</span><br><span class="line">    value: 68,</span><br><span class="line">    currency: &#x27;TWD&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Purchase 範例 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fbq(&#x27;track&#x27;, &#x27;Purchase&#x27;, &#123;</span><br><span class="line">    value: 68,</span><br><span class="line">    currency: &#x27;TWD&#x27;,</span><br><span class="line">    content_type: &#x27;product&#x27;,</span><br><span class="line">    content_ids: [&#x27;204&#x27;],</span><br><span class="line">    content_name: &#x27;店家名稱-商品名稱&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其實 FB Pixel 還有其他用途，算是用在商品目錄上，讓公司可以針對客戶再行銷使用</p><p>使用情境像是，顧客A到網站上瀏覽了類別①的商品，也將商品加入購物車，但最後卻沒有完成結帳。</p><p>這樣是不是很可惜，沒有好好把握到這位顧客，所以FB可已讓妳投廣告的時候打到精準的客戶，讓他再重新看到這項商品，溝引起他想買的慾望。有時候一次購買需要2~3次的推波助瀾才會成功，而FB的再行銷就可以在這邊用上，只是這個過程有點複雜，日後再補上另一篇詳細一點的介紹吧！<br>(如果有人需要的話..XD，根據這網站的流量，我猜應該是沒人需要)</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Google-Analytics&quot;&gt;&lt;a href=&quot;#Google-Analytics&quot; class=&quot;headerlink&quot; title=&quot;Google Analytics&quot;&gt;&lt;/a&gt;Google Analytics&lt;/h1&gt;&lt;h2 id=&quot;基本作法&quot;&gt;&lt;a href=&quot;#基本作法&quot; class=&quot;headerlink&quot; title=&quot;基本作法&quot;&gt;&lt;/a&gt;基本作法&lt;/h2&gt;&lt;p&gt;每一頁都加上 pageview，這個真的太基本了，就不在浪費時間說明了&lt;/p&gt;
&lt;h2 id=&quot;使用事件追蹤&quot;&gt;&lt;a href=&quot;#使用事件追蹤&quot; class=&quot;headerlink&quot; title=&quot;使用事件追蹤&quot;&gt;&lt;/a&gt;使用事件追蹤&lt;/h2&gt;&lt;p&gt;事件追蹤主要分幾個參數可以使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Category&lt;/li&gt;
&lt;li&gt;Action&lt;/li&gt;
&lt;li&gt;Label&lt;/li&gt;
&lt;li&gt;Value (int, 可選擇)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面用個簡單的例子說明，如果想要對用戶登入、註冊進行事件追蹤，大概可以這樣設計&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Category&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Action&lt;/th&gt;
&lt;th&gt;Label&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Email登入&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Login&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Click&lt;/td&gt;
&lt;td&gt;Email_Login&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Facebook登入&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Login&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Click&lt;/td&gt;
&lt;td&gt;Facebook_Login&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Email註冊&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Register&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Click&lt;/td&gt;
&lt;td&gt;Email_Register&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Facebook註冊&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Register&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Click&lt;/td&gt;
&lt;td&gt;Facebook_Register&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;JavaScript 程式碼說明，也可以看 &lt;a href=&quot;https://developers.google.com/analytics/devguides/collection/analyticsjs/events&quot;&gt;Google Analytics的教學文件&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Others" scheme="https://soarlin.github.io/categories/Others/"/>
    
    
    <category term="google analytics" scheme="https://soarlin.github.io/tags/google-analytics/"/>
    
    <category term="facebook pixel" scheme="https://soarlin.github.io/tags/facebook-pixel/"/>
    
    <category term="tracking" scheme="https://soarlin.github.io/tags/tracking/"/>
    
  </entry>
  
  <entry>
    <title>Android 中 Webview 內的 Facebook login</title>
    <link href="https://soarlin.github.io/2017/07/02/Android%E4%B8%ADWebview%E5%85%A7%E7%9A%84Facebook-login/"/>
    <id>https://soarlin.github.io/2017/07/02/Android%E4%B8%ADWebview%E5%85%A7%E7%9A%84Facebook-login/</id>
    <published>2017-07-02T14:10:01.000Z</published>
    <updated>2021-07-18T11:02:45.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上週一一大早本來想說，好不容易完成多語系的初版，可以再稍微修改調整，準備上code來測試，誰知道突然來了個問題，原本以為這問題應該半天可以處理掉，誰知道竟然花了整整三天，真的改到好崩潰啊！</p><h2 id="遇到的問題"><a href="#遇到的問題" class="headerlink" title="遇到的問題"></a>遇到的問題</h2><p>目前正在開發的 mobile web 為了搭配某銀行的優惠活動，所以之前趕緊把整個購買流程跟會員登入的功能都補上去，結果請對方先行測試，果然都不會測試，等活動一上線才發現問題，問題就是 App 內開啟網頁後，facebook 登入的功能就…無效了！？</p><h1 id="處理經過"><a href="#處理經過" class="headerlink" title="處理經過"></a>處理經過</h1><h2 id="嘗試一-手動建立登入流程"><a href="#嘗試一-手動建立登入流程" class="headerlink" title="嘗試一 - 手動建立登入流程"></a>嘗試一 - 手動建立登入流程</h2><p>原本就是按照Facebook Developer內文件教學來撰寫的，但還是出問題，只好先暫時改用<a href="https://developers.facebook.com/docs/facebook-login">Facebook登入</a>裡面的進階做法了，裡面有個<a href="https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow">手動建立登入流程</a>，照著這個做法，把原本fb登入呼叫API的行爲替換成一個帶有回傳網址(redirect_uri)的連結。</p><p>不過很偷懶，回傳網址還是跟原本頁面一樣，只是在透過 js 把一些回傳參數接起來處理，另外也把一些對方反應我們提供的優惠怎麼只有新註冊會員才有，而原本我們服務的舊會員沒有享受到優惠這樣不行啦！所以除了改登入問題，順便偷渡了這個商業邏輯的處理上去。</p><span id="more"></span><p><strong>結果</strong></p><ul><li>iOS 裝置都可以正常登入啦！(撒花～)</li><li>Android 裝置一樣毫無反應….Orz (哭哭)</li></ul><h2 id="嘗試二-獨立寫一個-FB-callback-頁面"><a href="#嘗試二-獨立寫一個-FB-callback-頁面" class="headerlink" title="嘗試二 - 獨立寫一個 FB callback 頁面"></a>嘗試二 - 獨立寫一個 FB callback 頁面</h2><p>星期一的所有努力，遇到了 Android 還是無解，所以想說乖乖地另外寫一頁來接收 facebook callback 吧！當然也把授權的行為改到 PHP 端來處理，不過我又想偷吃步，把授權後的資料丟給 JS 再來完成後續的登入/註冊流程。這也不能怪我，原本 js 端把所有的註冊登入流程都寫好了，code 不拿來用真的很可惜啊！</p><p><strong>結果</strong></p><ul><li>iOS 裝置都可以正常登入啦！(撒花～)</li><li>Android 裝置畫面跳轉了，但是….沒下文了 (哭哭)</li></ul><h2 id="嘗試三-克難的建立測試方式"><a href="#嘗試三-克難的建立測試方式" class="headerlink" title="嘗試三 - 克難的建立測試方式"></a>嘗試三 - 克難的建立測試方式</h2><p>因為只有 Android 裝置不行，而我本身也沒有 Android 的裝置可以測試，為了讓自己好測試 debug，所以出動了 <a href="https://www.genymotion.com/">Genymotion 模擬器</a>，不得不說這個模擬器真的是之前試過可以在電腦內快速啟動的 Android 模擬器，要是用原本 Android Studio 裡另外安裝的模擬器，可能要跑到天荒地老了。</p><p>然後請同事幫忙開發一個只有 webview 的測試 APP，好讓我能夠隨時測試，雖然聽起來很美好，但是真的透過 Android Studio build code 然後在 install pkg 到模擬器內，這過程真的是很漫長，而且電腦會跑的很慢，風扇也會持續發出哀號，我難過啊～</p><p>但是暫時也只能先這樣進行，不過沒辦法在 app 內的 webview 看到 js 印出來的 console.log 真的非常難除錯，感覺都只能用猜的，不過後來去 google 了一下類似的問題，發現了幾行神奇的 sample code 就順手把它加到原本 android 那個精簡的測試 app 內，然後再重新 build，結果這次竟然就成功了！！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">    CookieManager.getInstance().setAcceptThirdPartyCookies(myWebView, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>後來查了一下，這是讓 webview 內的頁面能夠接受第三方寫入 cookie，也就是說 facebook js sdk 的登入流程中，會將一些必要的 cookie 寫到我的網站內，但是 Android APP 內的 webview 預設是不允許的，所以 facebook 登入才會一直失敗沒反應，也就是說原本寫好的登入流程，得全部改用 php 來重寫…崩潰！</p><h2 id="嘗試四-使用-Facebook-PHP-SDK"><a href="#嘗試四-使用-Facebook-PHP-SDK" class="headerlink" title="嘗試四 - 使用 Facebook PHP SDK"></a>嘗試四 - 使用 Facebook PHP SDK</h2><p>最後真的沒其他招了，只好乖乖的去改用 PHP SDK 來撰寫這整段 facebook 登入註冊流程，然後順便把 fb 新註冊會員的資料確認頁面一起做好，雖然 android 的程式只要加個三行 code 就可以解決這個問題，但是日後可能還有其他合作夥伴，不可能要求每個廠商都把他們 android 的 app 重新 build 一版上架，而且還要對方的用戶都有更新才行，所以還是得自己來，只是內心都會想著「人家只要改個三行code就好了，可是我卻要改三天」，唉～</p><p>星期三花了一整天再改寫 PHP，到了下班前測了幾台 android 裝置，發現除了 android 7.0 以上的機器外，其他版本的 android 都正常了，這…到底該不該高興呢？抱著哀傷的心情先上一版 code 吧！至少可以先解決 android 7.0 版本以下的用戶，回家再來想想會是什麼問題。</p><h2 id="嘗試五-Facebook-OAuth-重新導向-URI"><a href="#嘗試五-Facebook-OAuth-重新導向-URI" class="headerlink" title="嘗試五 - Facebook OAuth 重新導向 URI"></a>嘗試五 - Facebook OAuth 重新導向 URI</h2><p>回家的一路上，一直在思考，為何 Android 有的裝置跳轉網址還是會有問題，後來才想到原因應該是 Facebook OAuth 重新導向 URI 的白名單設定問題，其實原本的名單也不算有錯，只是我寫的是<code>https</code>的網址，但是在這幾天改寫手動登入流程的過程中，需要重組 callback uri，可是我自己本機開發時，抓到 server 的 port 都很正常是 443，但是 code 一到 server 上，會抓到 80 port，造成我一開始的重組的 redirect_uri 有問題，只好都改成寫死是<code>https</code>開頭的網址。</p><p>但是 facebook App 的登入設定內，OAuth redirect uri 卻不能寫死<code>https</code>，必須改成<code>http</code>才能正常運作，我實在搞不懂這到底是什麼道理啊！！！！！</p><p>只能推測目前公司的 server 都是架設在 ELB 後面，而是透過 ELB 來做 port forward，所以原本 server 不一定要強制將網頁導向 443 port，所以 php code 才會都抓到 80 port。</p><h2 id="結論！能動最重要"><a href="#結論！能動最重要" class="headerlink" title="結論！能動最重要"></a>結論！能動最重要</h2><p>因為我沒有管理 AWS 的權限，所以不太清楚 ELB 設定的如何，只能用推測的來猜想結論，反正自己的結論就是 code 裡面產生的 redirect_uri 一定要 https 開頭，但是 facebook app 設定一定要 http 開頭，然後就可以在這微妙的設定下達成平衡，程式就可以正常運作了～喔耶！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上週一一大早本來想說，好不容易完成多語系的初版，可以再稍微修改調整，準備上code來測試，誰知道突然來了個問題，原本以為這問題應該半天可以處理掉，誰知道竟然花了整整三天，真的改到好崩潰啊！&lt;/p&gt;
&lt;h2 id=&quot;遇到的問題&quot;&gt;&lt;a href=&quot;#遇到的問題&quot; class=&quot;headerlink&quot; title=&quot;遇到的問題&quot;&gt;&lt;/a&gt;遇到的問題&lt;/h2&gt;&lt;p&gt;目前正在開發的 mobile web 為了搭配某銀行的優惠活動，所以之前趕緊把整個購買流程跟會員登入的功能都補上去，結果請對方先行測試，果然都不會測試，等活動一上線才發現問題，問題就是 App 內開啟網頁後，facebook 登入的功能就…無效了！？&lt;/p&gt;
&lt;h1 id=&quot;處理經過&quot;&gt;&lt;a href=&quot;#處理經過&quot; class=&quot;headerlink&quot; title=&quot;處理經過&quot;&gt;&lt;/a&gt;處理經過&lt;/h1&gt;&lt;h2 id=&quot;嘗試一-手動建立登入流程&quot;&gt;&lt;a href=&quot;#嘗試一-手動建立登入流程&quot; class=&quot;headerlink&quot; title=&quot;嘗試一 - 手動建立登入流程&quot;&gt;&lt;/a&gt;嘗試一 - 手動建立登入流程&lt;/h2&gt;&lt;p&gt;原本就是按照Facebook Developer內文件教學來撰寫的，但還是出問題，只好先暫時改用&lt;a href=&quot;https://developers.facebook.com/docs/facebook-login&quot;&gt;Facebook登入&lt;/a&gt;裡面的進階做法了，裡面有個&lt;a href=&quot;https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow&quot;&gt;手動建立登入流程&lt;/a&gt;，照著這個做法，把原本fb登入呼叫API的行爲替換成一個帶有回傳網址(redirect_uri)的連結。&lt;/p&gt;
&lt;p&gt;不過很偷懶，回傳網址還是跟原本頁面一樣，只是在透過 js 把一些回傳參數接起來處理，另外也把一些對方反應我們提供的優惠怎麼只有新註冊會員才有，而原本我們服務的舊會員沒有享受到優惠這樣不行啦！所以除了改登入問題，順便偷渡了這個商業邏輯的處理上去。&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://soarlin.github.io/categories/PHP/"/>
    
    
    <category term="facebook sdk" scheme="https://soarlin.github.io/tags/facebook-sdk/"/>
    
    <category term="android" scheme="https://soarlin.github.io/tags/android/"/>
    
    <category term="webview" scheme="https://soarlin.github.io/tags/webview/"/>
    
  </entry>
  
  <entry>
    <title>Slim 3 + Twig 實作多語系版本(i18n)</title>
    <link href="https://soarlin.github.io/2017/06/21/Use-gettext-in-Twig-to-implement-i18n/"/>
    <id>https://soarlin.github.io/2017/06/21/Use-gettext-in-Twig-to-implement-i18n/</id>
    <published>2017-06-21T23:58:35.000Z</published>
    <updated>2021-07-18T11:02:45.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前廢言"><a href="#前廢言" class="headerlink" title="前廢言"></a>前<del>廢</del>言</h1><p>原本就認為做個多語系，應該不會太簡單，先撇除掉翻譯的問題，以前使用的 Laravel 裡面，已經有相關套件以及預留好的語系檔存放路徑了，要實作的話應該不會是太大問題，但是換了 Slim 3 這個極其精簡的框架後，想要什麼功能，就得自己找出方法加進去，雖然大部分都有相關模組或套件可以使用，不過還是得花上一些學習成本上去，較為費時，但也可以多學一些東西。</p><p>這篇也不是要從頭教學，畢竟網路上相關的教學文章已經很多了，我只是記錄一下學習過程中，一些基本的步驟以及該注意的小東西。</p><h1 id="實作步驟"><a href="#實作步驟" class="headerlink" title="實作步驟"></a>實作步驟</h1><p>網路上搜尋關於 slim 3 + i18n，出現的文章其實都有段時間了，有時候跟著做到後來，發現似乎不合用，所以這裡記錄一下，希望能夠幫助到其他有需要的人(或是兩個月後的自己)</p><p>其實歸納到最後，是使用 PHP 推薦的 <a href="http://php.net/manual/en/book.gettext.php">gettext</a> 的方式來實踐多語系版本，而 slim 3 搭配的樣版引擎 Twig，本身也有提供 Extension 套件(i18n)來實作，所以找到 gettext 的教學文章，看懂基本原理後，再搭配 twig i18n 的套件來實作，底下收錄我後來覺得最實用的參考文章</p><span id="more"></span><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.sitepoint.com/easy-multi-language-twig-apps-with-gettext/">Easy Multi-Language Twig Apps with Gettext</a></li><li><a href="http://twig-extensions.readthedocs.io/en/latest/i18n.html">Twig-extensions - The i18n Extension</a></li></ul><p>其實可以多找幾篇看，不過第一篇應該已經是精華的集大成者了。</p><h2 id="步驟記錄"><a href="#步驟記錄" class="headerlink" title="步驟記錄"></a>步驟記錄</h2><ul><li>安裝 Twig Extension - i18n<ul><li><code>composer require twig/extensions</code></li></ul></li><li>在自己專案內新增要放多國語系檔的目錄 <code>./resource/lang</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 專案路徑</span><br><span class="line">PROJECT</span><br><span class="line">├── app            # 主要 PHP 程式目錄</span><br><span class="line">├── bootstrap</span><br><span class="line">│   └── app.php    # 程式起始檔案</span><br><span class="line">├── resources</span><br><span class="line">│   ├── assets     # js/css/font/images 等資源目錄</span><br><span class="line">│   ├── lang       # 多國語言檔案目錄</span><br><span class="line">│   └── views      # twig 樣板目錄</span><br><span class="line">├── vendor</span><br><span class="line">├── ...</span><br><span class="line">└── ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>建立一份語言範本檔 (.pot)  <code>./resource/lang/message.pot</code>，</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SOME DESCRIPTIVE TITLE.</span><br><span class="line"># Copyright (C) YEAR THE PACKAGE&#x27;S COPYRIGHT HOLDER</span><br><span class="line"># This file is distributed under the same license as the PACKAGE package.</span><br><span class="line"># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.</span><br><span class="line">#</span><br><span class="line">#, fuzzy</span><br><span class="line">msgid &quot;&quot;</span><br><span class="line">msgstr &quot;&quot;</span><br><span class="line">&quot;Project-Id-Version: PACKAGE VERSION\n&quot;</span><br><span class="line">&quot;Report-Msgid-Bugs-To: \n&quot;</span><br><span class="line">&quot;POT-Creation-Date: 2016-04-10 10:44+0000\n&quot;</span><br><span class="line">&quot;PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n&quot;</span><br><span class="line">&quot;Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n&quot;</span><br><span class="line">&quot;Language-Team: LANGUAGE &lt;LL@li.org&gt;\n&quot;</span><br><span class="line">&quot;Language: \n&quot;</span><br><span class="line">&quot;MIME-Version: 1.0\n&quot;</span><br><span class="line">&quot;Content-Type: text/plain; charset=CHARSET\n&quot;</span><br><span class="line">&quot;Content-Transfer-Encoding: 8bit\n&quot;</span><br><span class="line"></span><br><span class="line">#: public/i18n.php:13</span><br><span class="line">msgid &quot;HELLO_WORLD&quot;</span><br><span class="line">msgstr &quot;&quot;</span><br></pre></td></tr></table></figure><ul><li>使用 .pot 檔來建立不同語系的 .po 檔 (人類看得懂的語言包索引檔)</li><li><ul><li>根據 gettext 的實作原則，多語系的目錄下，根據每個語系再產生類似 <code>語系/LC_MESSAGES</code> 的目錄, e.g. <code>en_US/LC_MESSAGES</code> or <code>zh_TW/LC_MESSAGES</code></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msginit --locale=en_US --output-file=resources/lang/en_US/LC_MESSAGES/message.po --input=resources/lang/message.pot</span><br><span class="line"></span><br><span class="line">msginit --locale=zh_CN --output-file=resources/lang/zh_CN/LC_MESSAGES/message.po --input=resources/lang/message.pot</span><br><span class="line"></span><br><span class="line">msginit --locale=zh_TW --output-file=resources/lang/zh_TW/LC_MESSAGES/message.po --input=resources/lang/message.pot</span><br></pre></td></tr></table></figure><ul><li>編輯 .po 檔裡的語言翻譯</li><li>編輯完成後，產生 .mo 檔 (給機器讀取的語言包檔案)</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msgfmt -c -o resources/lang/en_US/LC_MESSAGES/message.mo resources/lang/en_US/LC_MESSAGES/message.po</span><br><span class="line"></span><br><span class="line">msgfmt -c -o resources/lang/zh_CN/LC_MESSAGES/message.mo resources/lang/zh_CN/LC_MESSAGES/message.po</span><br><span class="line"></span><br><span class="line">msgfmt -c -o resources/lang/zh_TW/LC_MESSAGES/message.mo resources/lang/zh_TW/LC_MESSAGES/message.po</span><br></pre></td></tr></table></figure><ul><li>這時候整個語言包的目錄大致上會長這樣，到這邊已經把基本架構做好了</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./resource/lang</span><br><span class="line">├── en_US               # english</span><br><span class="line">│   └── LC_MESSAGES</span><br><span class="line">│       ├── message.mo</span><br><span class="line">│       └── message.po</span><br><span class="line">├── zh_CN               # 简体中文语言</span><br><span class="line">│   └── LC_MESSAGES</span><br><span class="line">│       ├── message.mo</span><br><span class="line">│       └── message.po</span><br><span class="line">├── zh_TW               # 繁體中文語言</span><br><span class="line">│   └── LC_MESSAGES</span><br><span class="line">│       ├── message.mo</span><br><span class="line">│       └── message.po</span><br><span class="line">└── message.pot         # 語言包範本</span><br></pre></td></tr></table></figure><ul><li>接著才進入到 twig i18n 套件的使用</li></ul><p>接下來其實就參考 <a href="http://twig-extensions.readthedocs.io/en/latest/i18n.html">Twig-extensions - The i18n Extension</a> 這邊的方式，大致上應該就可以做出來啦！</p><h1 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h1><p>這個真的非常重要，因為我為了這奇怪的問題，鬼打牆一整天(絕對不是因為那陣子剛好在看鬼吹燈的關係)，由於 PHP 檔案在執行當下會編譯出機器碼並且快取起來，所以有時候語言包更新了，卻發現網頁上要顯示的翻譯文字出不來，只會顯示 .po 檔裡的 msgid 字串，而不是對映出來的 msgstr 的翻譯內容，這時候絕對不是你程式碼有寫錯(前提是你真的沒寫錯)，只是先前的翻譯資料被 cache 了，而我也找不到該去哪清理這 cache，後來找到的解決辦法是 <strong>Apache 重啟</strong>，我知道這招很爛，但是很管用</p><h2 id="解決-gettext-無法正常顯示方法"><a href="#解決-gettext-無法正常顯示方法" class="headerlink" title="解決 gettext 無法正常顯示方法"></a>解決 gettext 無法正常顯示方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># on Mac OS</span><br><span class="line">sudo apachectl restart</span><br><span class="line"></span><br><span class="line"># on Ubuntu</span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><p>但是有時候 Server 上的機器，可不是隨隨便便就可以將 web server 重啟，所以同事幫忙找了另一個解決辦法，雖然我實際測試後，效果不如預期，還是有可能會失敗，不過還是提供來參考</p><p><a href="https://stackoverflow.com/questions/13625659/how-to-clear-phps-gettext-cache-without-restart-apache-nor-change-domain">How to clear php’s gettext cache without restart Apache nor change domain?</a></p><p>原理是，在語言目錄下，建立一個虛擬目錄連結(nocache)，指向原本目錄(.)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd resource/lang</span><br><span class="line">ln -s . nocache</span><br></pre></td></tr></table></figure><p>然後在 bindtextdomain 的時候，先指向 nocache 目錄，再指向正確目錄</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bindtextdomain(&#x27;message&#x27;, &#x27;./resources/lang/nocache&#x27;);</span><br><span class="line">bindtextdomain(&#x27;message&#x27;, &#x27;./resources/lang/&#x27;);</span><br></pre></td></tr></table></figure><h2 id="翻譯語言內，增加變數-動態資料-顯示"><a href="#翻譯語言內，增加變數-動態資料-顯示" class="headerlink" title="翻譯語言內，增加變數(動態資料)顯示"></a>翻譯語言內，增加變數(動態資料)顯示</h2><p>根據 <a href="http://twig-extensions.readthedocs.io/en/latest/i18n.html">twig extension - i18n</a> 的教學文件提到，可以在翻譯的文字內使用 %name% 之類的方式來插入變數</p><p>舉個例子</p><ul><li>「Congratulations! You get xxx points」</li><li>「恭喜你！獲得 xxx 分」</li></ul><p>當中的 xxx 就是要替換的變數，確定好 PHP 程式從 Controller 傳給 View (twig template) 的變數名稱，比方說是 <code>score</code>，那麼在 .po 檔裡面大概長這樣</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msgid &quot;Congratulations! You get %score% points&quot;</span><br><span class="line">msgstr &quot;恭喜你！獲得%score%分&quot;</span><br></pre></td></tr></table></figure><p>在 Controller 裡，要將變數 <code>$score</code> 傳給 View，而到了 .twig 檔裡面，使用雙括號來顯示變數 <code>&#123;&#123; score &#125;&#125;</code>，大致如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  &#123;% trans %&#125;</span><br><span class="line">    Congratulations! You get &#123;&#123; score &#125;&#125; points</span><br><span class="line">  &#123;% endtrans %&#125;</span><br><span class="line">&lt;p&gt;</span><br></pre></td></tr></table></figure><h1 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h1><p>原本以為都改好可以正常運作了，程式碼 deploy 到 server 上才發現更可怕的事實，辛辛苦苦做好的多語系功能完全無法執行…WTF。好在有另外寫一個測試的檔案，可以很快看出是 setlocale 這個 function 無法順利執行，上網查了一些解決方法，提供以下兩個連結。</p><p><a href="https://stackoverflow.com/questions/10909911/php-setlocale-has-no-effect">PHP setlocale has no effect</a><br><a href="https://stackoverflow.com/questions/3694294/setlocale-returns-false">setlocale() returns false</a></p><p>我看完這兩篇後，大概就是以下幾個步驟：</p><ul><li>先檢查 server 上可設定的語系</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locale -a</span><br><span class="line"></span><br><span class="line"># 原本只能看到以下幾個</span><br><span class="line">C</span><br><span class="line">C.UTF-8</span><br><span class="line">en_US.utf8</span><br><span class="line">POSIX</span><br></pre></td></tr></table></figure><p>而我需要有zh_TW, zh_CN, ja_JP，所以需要自行在安裝這幾個語系的檔案</p><p><em>備註: 這是在 Ubuntu 14.04 環境下</em></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/share/locales/install-language-pack zh_TW</span><br><span class="line">sudo /usr/share/locales/install-language-pack zh_CN</span><br><span class="line">sudo /usr/share/locales/install-language-pack ja_JP</span><br></pre></td></tr></table></figure><p>如果是 <em>Ubuntu 16.04</em> ，在 zh_TW 與 zh_CN，就需要換成 <code>zh_TW.UTF-8</code> 與 <code>zh_CN.UTF-8</code>，所以指令會變成下面這樣</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/share/locales/install-language-pack zh_TW.UTF-8</span><br><span class="line">sudo /usr/share/locales/install-language-pack zh_CN.UTF-8</span><br><span class="line">sudo /usr/share/locales/install-language-pack ja_JP</span><br></pre></td></tr></table></figure><p>其實都到這裡了，應該要可以跑吧！<strong>但是</strong>還是沒那麼簡單，因為 Mac OSX 的系統與 Ubuntu 系統內的名稱還是不太一樣</p><p>MAC OSX下的<code>locale -a</code>可以看到，語系種類非常多種，跟剛剛在 server 上看到那兩三個相差甚遠</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">en_US</span><br><span class="line">en_US.ISO8859-1</span><br><span class="line">en_US.ISO8859-15</span><br><span class="line">en_US.US-ASCII</span><br><span class="line">en_US.UTF-8</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">ja_JP</span><br><span class="line">ja_JP.eucJP</span><br><span class="line">ja_JP.SJIS</span><br><span class="line">ja_JP.UTF-8</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">zh_CN</span><br><span class="line">zh_CN.GB2312</span><br><span class="line">zh_CN.GBK</span><br><span class="line">zh_CN.UTF-8</span><br><span class="line"></span><br><span class="line">zh_TW</span><br><span class="line">zh_TW.Big5</span><br><span class="line">zh_TW.UTF-8</span><br></pre></td></tr></table></figure><p>而要注意的是，原本程式內寫的 <code>setlocale(LC_ALL, &#39;zh_TW&#39;);</code> 到了 server 上就要跟著調整成 <code>setlocale(LC_ALL, &#39;zh_TW.utf8&#39;);</code> 大概做完這些動作，我辛辛苦苦做好的多語系版本總算可以運作了，就甘心！</p><p>P.S. 有時候 server 需要更新一下 locale，指令是 <code>sudo dpkg-reconfigure locales</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前廢言&quot;&gt;&lt;a href=&quot;#前廢言&quot; class=&quot;headerlink&quot; title=&quot;前廢言&quot;&gt;&lt;/a&gt;前&lt;del&gt;廢&lt;/del&gt;言&lt;/h1&gt;&lt;p&gt;原本就認為做個多語系，應該不會太簡單，先撇除掉翻譯的問題，以前使用的 Laravel 裡面，已經有相關套件以及預留好的語系檔存放路徑了，要實作的話應該不會是太大問題，但是換了 Slim 3 這個極其精簡的框架後，想要什麼功能，就得自己找出方法加進去，雖然大部分都有相關模組或套件可以使用，不過還是得花上一些學習成本上去，較為費時，但也可以多學一些東西。&lt;/p&gt;
&lt;p&gt;這篇也不是要從頭教學，畢竟網路上相關的教學文章已經很多了，我只是記錄一下學習過程中，一些基本的步驟以及該注意的小東西。&lt;/p&gt;
&lt;h1 id=&quot;實作步驟&quot;&gt;&lt;a href=&quot;#實作步驟&quot; class=&quot;headerlink&quot; title=&quot;實作步驟&quot;&gt;&lt;/a&gt;實作步驟&lt;/h1&gt;&lt;p&gt;網路上搜尋關於 slim 3 + i18n，出現的文章其實都有段時間了，有時候跟著做到後來，發現似乎不合用，所以這裡記錄一下，希望能夠幫助到其他有需要的人(或是兩個月後的自己)&lt;/p&gt;
&lt;p&gt;其實歸納到最後，是使用 PHP 推薦的 &lt;a href=&quot;http://php.net/manual/en/book.gettext.php&quot;&gt;gettext&lt;/a&gt; 的方式來實踐多語系版本，而 slim 3 搭配的樣版引擎 Twig，本身也有提供 Extension 套件(i18n)來實作，所以找到 gettext 的教學文章，看懂基本原理後，再搭配 twig i18n 的套件來實作，底下收錄我後來覺得最實用的參考文章&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://soarlin.github.io/categories/PHP/"/>
    
    
    <category term="i18n" scheme="https://soarlin.github.io/tags/i18n/"/>
    
    <category term="twig" scheme="https://soarlin.github.io/tags/twig/"/>
    
    <category term="slim 3" scheme="https://soarlin.github.io/tags/slim-3/"/>
    
    <category term="gettext" scheme="https://soarlin.github.io/tags/gettext/"/>
    
  </entry>
  
  <entry>
    <title>CSS筆記(2017/06/10)</title>
    <link href="https://soarlin.github.io/2017/06/10/CSS%E7%AD%86%E8%A8%98-2017-06-10/"/>
    <id>https://soarlin.github.io/2017/06/10/CSS%E7%AD%86%E8%A8%98-2017-06-10/</id>
    <published>2017-06-10T07:54:31.000Z</published>
    <updated>2021-07-18T11:02:45.153Z</updated>
    
    <content type="html"><![CDATA[<!-- MarkdownTOC --><ul><li><a href="#%E6%96%87%E5%AD%97%E9%81%8E%E9%95%B7%E7%9C%81%E7%95%A5">文字過長省略</a></li><li><a href="#%E9%81%8E%E5%A0%B4%E5%8B%95%E7%95%AB%E6%95%88%E6%9E%9C">過場動畫效果</a><ul><li><a href="#animation-%E5%8B%95%E7%95%AB%E6%95%88%E6%9E%9C%E5%8F%83%E6%95%B8%E8%A7%A3%E8%AA%AA">Animation 動畫效果參數解說</a></li></ul></li></ul><!-- /MarkdownTOC --><p>最近太久沒寫 blog 文章，覺得真的越來越懶惰了，趁著這個週末有點時間，來稍微紀錄一下最近忙的東西，從四月底到現在大致上做了些事情：</p><ol><li>換工作前把原本考尚樂平台，增加一個可以讓老師們放上宣傳圖片的功能</li><li>跟佑鈞接了一個賣藥的網頁切版</li><li>跟阿宏交接一下國研院專利檢索平臺的專案</li><li>新工作的專案(Vue 2.0 + Vuex + vue-router)</li></ol><p>當中做最多的應該還是 CSS 撰寫，以及使用 Vue 開發專案吧！而這次接案跟新工作中寫的 css 都用上了一點點小小的動畫效果，雖然後來接案的業主說：「動畫效果拿掉，改成靜態畫面」最後沒機會出現動畫效果，但開始跟 css animation 漸漸變熟了一些些，雖然還是要一直查資料，但是覺得有進步了。</p><p><a name="%E6%96%87%E5%AD%97%E9%81%8E%E9%95%B7%E7%9C%81%E7%95%A5"></a></p><h1 id="文字過長省略"><a href="#文字過長省略" class="headerlink" title="文字過長省略"></a>文字過長省略</h1><p>最近幾次的排版，常常會遇到標題文字，在某些版面會過長自動換行的情況，有時候為了版面對其，標題行只能給一行的高度，所以超過寬度的文字需要被省略，所以越來越長使用到這功能了，就稍微紀錄一下。如果文字要兩行的高度，就不適用了，唯一作法就是把文字區塊高度設定成兩倍行高，讓超過的文字被隱藏。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@mixin ellipsis &#123;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">    @include ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://codepen.io/SoarLin">Codepen 上的範例</a></p><p data-height="350" data-theme-id="0" data-slug-hash="OgMGOE" data-default-tab="css,result" data-user="SoarLin" data-embed-version="2" data-pen-title="ellipsis" class="codepen">See the Pen <a href="https://codepen.io/SoarLin/pen/OgMGOE/">ellipsis</a> by soar_lin (<a href="https://codepen.io/SoarLin">@SoarLin</a>) on <a href="https://codepen.io">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p><a name="%E9%81%8E%E5%A0%B4%E5%8B%95%E7%95%AB%E6%95%88%E6%9E%9C"></a></p><h1 id="過場動畫效果"><a href="#過場動畫效果" class="headerlink" title="過場動畫效果"></a>過場動畫效果</h1><p>雖然寫了兩三次，還是覺得很難掌握，只好有空多練習了，所以在 codepen 上做了一個範例，順便附上一些過程中用到的工具、網站</p><ul><li><a href="http://www.patternify.com/">CSS Pattern Generator</a>，用來製作重複圖樣背景還不錯，缺點是無法做太大的重複區塊</li><li><a href="https://matthewlein.com/ceaser/">CSS EASING ANIMATION TOOL</a>，用來製作過場時間函示(transition-timing-function)還不錯</li></ul><p>目前用的招式很普通，先把要做動畫的物件寫出來後，透明度設定成 0, 然後透過 js 將寫好的動畫 css 加到物件內，然後再設定個 Timeout 在動畫持續時間結束後，也把動畫 css 移除</p><p>部分參考範例 code</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">span.hint &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    animation: hint-show-hide 1.5s ease 0s 1 normal forwards;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes hint-show-hide &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        opacity: .3;</span><br><span class="line">        top: -10px;</span><br><span class="line">    &#125;</span><br><span class="line">    80% &#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">        top: -25px;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        opacity: .5;</span><br><span class="line">        top: -26px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="animation-%E5%8B%95%E7%95%AB%E6%95%88%E6%9E%9C%E5%8F%83%E6%95%B8%E8%A7%A3%E8%AA%AA"></a></p><h2 id="Animation-動畫效果參數解說"><a href="#Animation-動畫效果參數解說" class="headerlink" title="Animation 動畫效果參數解說"></a>Animation 動畫效果參數解說</h2><p><strong>animation: @keyframes | duration | timing-function | delay | (iteration-count) | (direction) | fill-mode | (play-state) | (name)</strong></p><p>其實我大概常會用到，就只有幾個</p><table><thead><tr><th>Name</th><th>說明</th></tr></thead><tbody><tr><td>animation-name</td><td>動畫效果 @keyframes 名稱</td></tr><tr><td>animation-duration</td><td>動畫一次週期的時間, e.g. 1s, 300ms</td></tr><tr><td>animation-timing-function</td><td>動畫轉變時時間的加速曲線, e.g. ease, ease-in-out</td></tr><tr><td>animation-fill-mode</td><td>元素在動畫播放外(動畫開始前及結束後)的狀態 <br />e.g. forwards(停在最後), backwards(停在最初)</td></tr></tbody></table><p><a href="https://codepen.io/SoarLin/pen/pwgBKM/">Codepen 上的範例</a></p><p>原本只是想寫個簡單的範例，但是又覺得太單調，所以就模擬一下超級馬力得到金幣的情形，所以點一下中間那問號磚塊，會彈出硬幣</p><p data-height="380" data-theme-id="0" data-slug-hash="pwgBKM" data-default-tab="result" data-user="SoarLin" data-embed-version="2" data-pen-title="Super Mario Coin" class="codepen">See the Pen <a href="https://codepen.io/SoarLin/pen/pwgBKM/">Super Mario Coin</a> by soar_lin (<a href="https://codepen.io/SoarLin">@SoarLin</a>) on <a href="https://codepen.io">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    
    <summary type="html">&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%96%87%E5%AD%97%E9%81%8E%E9%95%B7%E7%9C%81%E7%95%A5&quot;&gt;文字過長省略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%81%8E%E5%A0%B4%E5%8B%95%E7%95%AB%E6%95%88%E6%9E%9C&quot;&gt;過場動畫效果&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#animation-%E5%8B%95%E7%95%AB%E6%95%88%E6%9E%9C%E5%8F%83%E6%95%B8%E8%A7%A3%E8%AA%AA&quot;&gt;Animation 動畫效果參數解說&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;p&gt;最近太久沒寫 blog 文章，覺得真的越來越懶惰了，趁著這個週末有點時間，來稍微紀錄一下最近忙的東西，從四月底到現在大致上做了些事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;換工作前把原本考尚樂平台，增加一個可以讓老師們放上宣傳圖片的功能&lt;/li&gt;
&lt;li&gt;跟佑鈞接了一個賣藥的網頁切版&lt;/li&gt;
&lt;li&gt;跟阿宏交接一下國研院專利檢索平臺的專案&lt;/li&gt;
&lt;li&gt;新工作的專案(Vue 2.0 + Vuex + vue-router)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;當中做最多的應該還是 CSS 撰寫，以及使用 Vue 開發專案吧！而這次接案跟新工作中寫的 css 都用上了一點點小小的動畫效果，雖然後來接案的業主說：「動畫效果拿掉，改成靜態畫面」最後沒機會出現動畫效果，但開始跟 css animation 漸漸變熟了一些些，雖然還是要一直查資料，但是覺得有進步了。&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;%E6%96%87%E5%AD%97%E9%81%8E%E9%95%B7%E7%9C%81%E7%95%A5&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;文字過長省略&quot;&gt;&lt;a href=&quot;#文字過長省略&quot; class=&quot;headerlink&quot; title=&quot;文字過長省略&quot;&gt;&lt;/a&gt;文字過長省略&lt;/h1&gt;&lt;p&gt;最近幾次的排版，常常會遇到標題文字，在某些版面會過長自動換行的情況，有時候為了版面對其，標題行只能給一行的高度，所以超過寬度的文字需要被省略，所以越來越長使用到這功能了，就稍微紀錄一下。如果文字要兩行的高度，就不適用了，唯一作法就是把文字區塊高度設定成兩倍行高，讓超過的文字被隱藏。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="ellipsis" scheme="https://soarlin.github.io/tags/ellipsis/"/>
    
    <category term="animation" scheme="https://soarlin.github.io/tags/animation/"/>
    
    <category term="transform" scheme="https://soarlin.github.io/tags/transform/"/>
    
  </entry>
  
  <entry>
    <title>工作筆記之PHP PSR-4 autoload</title>
    <link href="https://soarlin.github.io/2017/05/14/%E5%B7%A5%E4%BD%9C%E7%AD%86%E8%A8%98%E4%B9%8BPHP-PSR-4-autoload/"/>
    <id>https://soarlin.github.io/2017/05/14/%E5%B7%A5%E4%BD%9C%E7%AD%86%E8%A8%98%E4%B9%8BPHP-PSR-4-autoload/</id>
    <published>2017-05-14T12:53:14.000Z</published>
    <updated>2021-07-18T11:02:45.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>最近手上的工作接手了一個很精簡的 PHP 專案，但是收到的消息是之後要針對這個站台增加許多功能、版面大改，因為是個以前沒碰過的 PHP 框架做成的專案(Slim Framework)，所以一開始花了很多時間在看 Framework 的使用，以及了解前人使用這框架開發的架構。</p><p>原本有幾度想整個換成熟悉的 Laravel，但是又覺得整個打掉重練不曉得要花多久，雖然內心是覺得原本站台還不複雜應該可以在一週內換框架重建，最後還是放棄這個誘人的想法，決定好好在熟悉新環境的開發模式。</p><p>一開始將前端的開發，建立起一些自動化處理的流程，透過 bower 來管理 3rd 套件，導入 Scss 來替以後切版做打算，利用 Gulp 來將 js/css 等檔案打包以及加上亂數版號，等這一切都處理得差不多其實也花了約兩天了，接著先開始研究增加登入(FB註冊登入)等流程，目前專案內並不直接存取資料庫，所有的資料存取行為全都是透過 API 的方式來實現，讓我有點突發奇想的乾脆全部頁面都用前端框架 Vue framework 來做好了，可是這樣會增加太多技術債，這兩天已經增加的夠多了。</p><p>為了記住登入的使用者資訊，還是先從簡單的 PHP 寫 Session or Cookie 開始吧！因為考量到還沒開始使用 redis 來存取 Session，而正式部署的機器不只一台的情況，就先放棄 Session 這個方式，改以 Cookie 的方式來著手，可是花了一天的時間不段的嘗試，只要我在 Controller 內將 cookie 存好，透過 route 切換到新頁面，cookie 就會神秘的消失，即使後來看到 Slim Framework 官網上建議使用 <a href="https://github.com/dflydev/dflydev-fig-cookies">FIG Cookies</a>，還是一直搞不清處為何 Request, Response 兩邊都去寫 cookie 了，透過 route 導向新頁面一樣無效…XD，最後經過一天的努力，宣告不治，放棄治療</p><p>後來在找資料的同時有看到一個 Slim Framework 的教學影片，看著裡面逐步用一個精簡的框架打造成小有規模的架構，覺得很感動，所以隔天一早就開始了把現有的結構調整一下，看著目錄架構慢慢接近熟悉的 laravel 有點小感動，而且在電腦上運行都很正常，直到我把 code push 上去接著到測試機器上面測試後，發現糟糕了…出事了！</p><span id="more"></span><h1 id="釐清問題"><a href="#釐清問題" class="headerlink" title="釐清問題"></a>釐清問題</h1><p>由於將整個 Namespace 下的程式目錄名字更換了，所以特別記得要執行 <code>composer dump-autoload</code>，甚至在 Jenkins build 上也多加了這條指令，確保 build 完打包起來的程式碼是有引用到更換目錄名稱的 class，為了確定編譯後的程式碼，還特地把 jenkins 編譯後的檔案整包抓回本機測試，依然可以正常運行，但是上了測試機，就一直出現 Class not found 的錯誤訊息</p><p>後來真的沒辦法，只好請同事幫忙找找看問題，最後同事土法煉鋼的慢慢抽絲剝繭發現，我的目錄名稱跟寫在程式碼裡面的 Namespace 大小寫不一樣….WTF。原本的 namespace 幾乎都是用小寫的，後來我把幾個字眼的首字改成大寫，如: Controller, Models, … 等，但是原本資料夾都還是維持全部小寫的名稱，而這是因為在 Mac 的作業系統下，引用檔案時會忽略大小寫，而在 Linux 下的 Apache 可是有區分大小寫的，所以這起慘案就在神隊友的幫助下，順利解決了！</p><h1 id="重點"><a href="#重點" class="headerlink" title="重點"></a>重點</h1><p>這次更改整個程式目錄架構的過程中，其實也學到不少東西，一個是PHP PSR-4 的 Autoload 機制，因為 namespace 目錄名稱換掉的關係，所以了解到要去 Composer.json 裡面把 autoload 下面 psr-4 的對應目錄做更換，而且還需要執行 <code>composer dump-autoload</code> 來重新產生 autoload 的所指定的檔案路徑</p><p>另一個是 Mac 跟 Linux 環境針對大小寫的判斷，原本印象中 Linux 上是沒有特別區分大小寫的，不過看來真的是自己記錯了，希望以後不要再被大小寫這問題給陰了(印象中以前好像已經有過一次了)</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>原文參考：<br><a href="http://www.php-fig.org/psr/psr-4/">PSR-4: Autoloader</a></p><p>中文參考：<br><a href="http://blog.tonycube.com/2016/09/php-psr-4-autoloader.html">PHP PSR-4 Autoloader 機制</a></p><p>其他參考：<br><a href="http://blog.webgolds.com/view/230#PSR-4">代碼、原始碼寫作風格 PSR-4 - PHP編碼規範</a><br><a href="https://www.phpini.com/apache/apache-case-insensitive-mod_speling">Apache 設定忽略檔案字母大小寫</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h1&gt;&lt;p&gt;最近手上的工作接手了一個很精簡的 PHP 專案，但是收到的消息是之後要針對這個站台增加許多功能、版面大改，因為是個以前沒碰過的 PHP 框架做成的專案(Slim Framework)，所以一開始花了很多時間在看 Framework 的使用，以及了解前人使用這框架開發的架構。&lt;/p&gt;
&lt;p&gt;原本有幾度想整個換成熟悉的 Laravel，但是又覺得整個打掉重練不曉得要花多久，雖然內心是覺得原本站台還不複雜應該可以在一週內換框架重建，最後還是放棄這個誘人的想法，決定好好在熟悉新環境的開發模式。&lt;/p&gt;
&lt;p&gt;一開始將前端的開發，建立起一些自動化處理的流程，透過 bower 來管理 3rd 套件，導入 Scss 來替以後切版做打算，利用 Gulp 來將 js/css 等檔案打包以及加上亂數版號，等這一切都處理得差不多其實也花了約兩天了，接著先開始研究增加登入(FB註冊登入)等流程，目前專案內並不直接存取資料庫，所有的資料存取行為全都是透過 API 的方式來實現，讓我有點突發奇想的乾脆全部頁面都用前端框架 Vue framework 來做好了，可是這樣會增加太多技術債，這兩天已經增加的夠多了。&lt;/p&gt;
&lt;p&gt;為了記住登入的使用者資訊，還是先從簡單的 PHP 寫 Session or Cookie 開始吧！因為考量到還沒開始使用 redis 來存取 Session，而正式部署的機器不只一台的情況，就先放棄 Session 這個方式，改以 Cookie 的方式來著手，可是花了一天的時間不段的嘗試，只要我在 Controller 內將 cookie 存好，透過 route 切換到新頁面，cookie 就會神秘的消失，即使後來看到 Slim Framework 官網上建議使用 &lt;a href=&quot;https://github.com/dflydev/dflydev-fig-cookies&quot;&gt;FIG Cookies&lt;/a&gt;，還是一直搞不清處為何 Request, Response 兩邊都去寫 cookie 了，透過 route 導向新頁面一樣無效…XD，最後經過一天的努力，宣告不治，放棄治療&lt;/p&gt;
&lt;p&gt;後來在找資料的同時有看到一個 Slim Framework 的教學影片，看著裡面逐步用一個精簡的框架打造成小有規模的架構，覺得很感動，所以隔天一早就開始了把現有的結構調整一下，看著目錄架構慢慢接近熟悉的 laravel 有點小感動，而且在電腦上運行都很正常，直到我把 code push 上去接著到測試機器上面測試後，發現糟糕了…出事了！&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://soarlin.github.io/categories/PHP/"/>
    
    
    <category term="slim" scheme="https://soarlin.github.io/tags/slim/"/>
    
    <category term="autoload" scheme="https://soarlin.github.io/tags/autoload/"/>
    
    <category term="composer" scheme="https://soarlin.github.io/tags/composer/"/>
    
    <category term="psr-4" scheme="https://soarlin.github.io/tags/psr-4/"/>
    
  </entry>
  
  <entry>
    <title>Composer與NPM指令 install 與 update 的差異</title>
    <link href="https://soarlin.github.io/2017/04/21/Composer-NPM-install-update/"/>
    <id>https://soarlin.github.io/2017/04/21/Composer-NPM-install-update/</id>
    <published>2017-04-21T05:29:48.000Z</published>
    <updated>2021-07-18T11:02:45.153Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>其實這是一篇偽技術文，實際上是最近面試的心得文</p></blockquote><p>前陣子接連不斷的面試，讓我也學到了不少，有些公司技術背景不錯的，就會由淺入深的問，也有面試官人很好的，類似聊天方式的相互交流技術資訊，整個面試完都沒發現其實自己很多答不出來的東西，都還是面試官經驗分享讓我學習不少，可惜沒有緣分一起合作。</p><p>面試找工作真的是一件勞心勞力的事，有些比較體恤求職者的，就會是一試定江山，有些比較謹慎找人的，就會有兩三次的面試流程，也因為這樣從投遞履歷到收到 Offer, 感謝函, 無聲卡等過程所經歷的時間實在是很難掌握，最後會到哪上班似乎也是種緣份！</p><p>這裡分享一下之前被問到的一點點東西，原因是自己真的沒弄懂，趁現在來紀錄一下，希望以後要是再被問到，不要又回答錯了。</p><h1 id="Composer-基本用法"><a href="#Composer-基本用法" class="headerlink" title="Composer 基本用法"></a>Composer 基本用法</h1><p>這裡就不在寫啥是 Composer 了，簡單來說就是開發 PHP 專案時，一個用來方便安裝使用第三方套件的工具，使用上會有一個 <code>composer.json</code> 的相依套件描述檔案。並在安裝過套件後，會產生一份 <code>composer.lock</code>，如果有使用 Git 這類版本控管工具的話，建議這兩個檔案都要加入追蹤。</p><h2 id="Composer-lock"><a href="#Composer-lock" class="headerlink" title="Composer.lock"></a>Composer.lock</h2><p>在安裝過相依套件後，會在專案底下額外產生一份 <code>Composer.lock</code> 檔案來鎖定目前安裝的相依套件版本與資訊，之後再執行 <code>install</code> 指令時，會先檢查這份 lock 檔案來安裝，所以當有版本變更或新增套件時，也是會更新這份資料</p><span id="more"></span><h2 id="Composer-install"><a href="#Composer-install" class="headerlink" title="Composer install"></a>Composer install</h2><p>當 <code>composer install</code> 指令執行時，會依序執行以下行為</p><ul><li>檢查 <strong>composer.lock</strong> 檔案是否存在<ul><li>No, 檔案不存在，改以執行 <code>composer update</code> 來建立</li><li>Yes, 檔案存在，根據 lock 檔內描述安裝指定套件版本<ul><li>已存在套件可能會更新版本</li><li>若有新增套件，安裝新套件</li></ul></li></ul></li></ul><h2 id="Composer-update"><a href="#Composer-update" class="headerlink" title="Composer update"></a>Composer update</h2><p>當執行 <code>composer update</code> 時，會依序執行以下行為</p><ul><li>檢查 <code>composer.json</code> 檔案</li><li>根據 <code>composer.json</code> 內的套件版本規格，安裝最新一版</li><li>安裝後更新資訊到 <code>composer.lock</code> 檔案內</li></ul><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>當初開發的專案<code>composer.lock</code>被加到<code>.gitignore</code>內，導致後來每次使用 composer 安裝套件的時候，到別人的機器或 server 上就會問題重重，正確的作法應該是要保留<code>composer.lock</code>檔到 git repository 內，等其他人需要更新時，透過 <code>composer install</code> 來安裝每次變更的紀錄就好</p><h1 id="NPM-基本介紹"><a href="#NPM-基本介紹" class="headerlink" title="NPM 基本介紹"></a>NPM 基本介紹</h1><p>由於太多處理是要透過後端執行的 Node.js，所以也勢必要學一下 npm 這東西，透過 Node.js 官網提供的檔案安裝後，其實就會將 Node.js 與 NPM 一起裝好，而 NPM(Node Package Manager) 也就是 Node.js 的一些套件管理工具。</p><blockquote><p>目前用自己最多的還是在使用前端自動化工具 Gulp 時，需要安裝許多套件來加速前端自動化處理的流程，在還不知道 Gulp 或是 Grunt 之前，我只能自己土炮 shell script 來跑一些 css, js comporess, concat 等行為。原本想學 Grunt 但是天資不夠聰穎，還沒學會前就跳槽到 gulp 了，沒想到還挺好上手的</p></blockquote><p>使用 npm 來進行套件管理時，專案下可先透過 <code>npm init</code> 來產生一份 <code>package.json</code> 檔案，而之後安裝過的套件記得用 <code>--save</code> (or <code>--save-dev</code>) 的參數來將套件名稱與版號加入 <code>package.json</code> 內</p><h2 id="NPM-基本指令"><a href="#NPM-基本指令" class="headerlink" title="NPM 基本指令"></a>NPM 基本指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 顯示套件相關資訊</span><br><span class="line">npm show &lt;package&gt;</span><br><span class="line"></span><br><span class="line"># 安裝相關套件</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># 安裝指定套件</span><br><span class="line">npm install &lt;package&gt;</span><br><span class="line"></span><br><span class="line"># 升級所有套件</span><br><span class="line">npm update</span><br><span class="line"></span><br><span class="line"># 升級指定套件</span><br><span class="line">npm update &lt;package&gt;</span><br><span class="line"></span><br><span class="line"># 刪除套件</span><br><span class="line">npm uninstall &lt;package&gt;</span><br><span class="line"></span><br><span class="line"># 套件清單</span><br><span class="line">npm list</span><br></pre></td></tr></table></figure><h2 id="npm-install-vs-npm-update"><a href="#npm-install-vs-npm-update" class="headerlink" title="npm install vs npm update"></a>npm install vs npm update</h2><p>這裡可以參考 stack overflow 的一篇<a href="http://stackoverflow.com/questions/12478679/npm-install-vs-update-whats-the-difference">精美解釋</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:          &quot;my-project&quot;,</span><br><span class="line">  &quot;version&quot;:       &quot;1.0&quot;,                             // install   update</span><br><span class="line">  &quot;dependencies&quot;:  &#123;                                  // ------------------</span><br><span class="line">    &quot;already-installed-versionless-module&quot;:  &quot;*&quot;,     // ignores   &quot;1.0&quot; -&gt; &quot;1.1&quot;</span><br><span class="line">    &quot;already-installed-semver-module&quot;:       &quot;^1.4.3&quot; // ignores   &quot;1.4.3&quot; -&gt; &quot;1.5.2&quot;</span><br><span class="line">    &quot;already-installed-versioned-module&quot;:    &quot;3.4.1&quot;  // ignores   ignores</span><br><span class="line">    &quot;not-yet-installed-versionless-module&quot;:  &quot;*&quot;,     // installs  installs</span><br><span class="line">    &quot;not-yet-installed-semver-module&quot;:       &quot;^4.2.1&quot; // installs  installs</span><br><span class="line">    &quot;not-yet-installed-versioned-module&quot;:    &quot;2.7.8&quot;  // installs  installs</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上可以看出，<code>npm install</code> 基本上就是將尚未安裝過的 module 安裝進去，而 <code>npm update</code> 除了安裝 module 外，還會將已經安裝過的 module，根據版號描述去更新最新版本</p><h2 id="小結-1"><a href="#小結-1" class="headerlink" title="小結"></a>小結</h2><p>記得面試時，面試官問了這幾個指令的差異，但因為我印象中 npm 與 composer 在各自的 install 與 update 行為上似乎是相反的(※正確來說應該是 install 針對已安裝套件有些微不同處理)，但當時聽完說明後又有點不清楚，所以決定花點時間查詢並且做一下記錄</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://getcomposer.ycnets.com/doc/01-basic-usage.md">Composer基本用法</a></p><p><a href="https://blog.engineyard.com/2014/composer-its-all-about-the-lock-file">Composer: It’s All About the Lock File</a></p><p><a href="http://blog.johnsonlu.org/node-jsnode-js%E5%AE%89%E8%A3%9D%E5%BB%BA%E7%AB%8B%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83/">[Node.js]Node.js &amp; NPM 安裝(建立開發環境)</a></p><p><a href="http://stackoverflow.com/questions/12478679/npm-install-vs-update-whats-the-difference">npm install vs. update - what’s the difference?</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;其實這是一篇偽技術文，實際上是最近面試的心得文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前陣子接連不斷的面試，讓我也學到了不少，有些公司技術背景不錯的，就會由淺入深的問，也有面試官人很好的，類似聊天方式的相互交流技術資訊，整個面試完都沒發現其實自己很多答不出來的東西，都還是面試官經驗分享讓我學習不少，可惜沒有緣分一起合作。&lt;/p&gt;
&lt;p&gt;面試找工作真的是一件勞心勞力的事，有些比較體恤求職者的，就會是一試定江山，有些比較謹慎找人的，就會有兩三次的面試流程，也因為這樣從投遞履歷到收到 Offer, 感謝函, 無聲卡等過程所經歷的時間實在是很難掌握，最後會到哪上班似乎也是種緣份！&lt;/p&gt;
&lt;p&gt;這裡分享一下之前被問到的一點點東西，原因是自己真的沒弄懂，趁現在來紀錄一下，希望以後要是再被問到，不要又回答錯了。&lt;/p&gt;
&lt;h1 id=&quot;Composer-基本用法&quot;&gt;&lt;a href=&quot;#Composer-基本用法&quot; class=&quot;headerlink&quot; title=&quot;Composer 基本用法&quot;&gt;&lt;/a&gt;Composer 基本用法&lt;/h1&gt;&lt;p&gt;這裡就不在寫啥是 Composer 了，簡單來說就是開發 PHP 專案時，一個用來方便安裝使用第三方套件的工具，使用上會有一個 &lt;code&gt;composer.json&lt;/code&gt; 的相依套件描述檔案。並在安裝過套件後，會產生一份 &lt;code&gt;composer.lock&lt;/code&gt;，如果有使用 Git 這類版本控管工具的話，建議這兩個檔案都要加入追蹤。&lt;/p&gt;
&lt;h2 id=&quot;Composer-lock&quot;&gt;&lt;a href=&quot;#Composer-lock&quot; class=&quot;headerlink&quot; title=&quot;Composer.lock&quot;&gt;&lt;/a&gt;Composer.lock&lt;/h2&gt;&lt;p&gt;在安裝過相依套件後，會在專案底下額外產生一份 &lt;code&gt;Composer.lock&lt;/code&gt; 檔案來鎖定目前安裝的相依套件版本與資訊，之後再執行 &lt;code&gt;install&lt;/code&gt; 指令時，會先檢查這份 lock 檔案來安裝，所以當有版本變更或新增套件時，也是會更新這份資料&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://soarlin.github.io/categories/PHP/"/>
    
    
    <category term="Composer" scheme="https://soarlin.github.io/tags/Composer/"/>
    
    <category term="NPM" scheme="https://soarlin.github.io/tags/NPM/"/>
    
    <category term="PHP" scheme="https://soarlin.github.io/tags/PHP/"/>
    
    <category term="Node.js" scheme="https://soarlin.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>使用 Travis CI 自動發布 Hexo 內容到 Github</title>
    <link href="https://soarlin.github.io/2017/03/29/use-travis-ci-auto-deploy-to-github/"/>
    <id>https://soarlin.github.io/2017/03/29/use-travis-ci-auto-deploy-to-github/</id>
    <published>2017-03-29T15:27:57.000Z</published>
    <updated>2021-07-18T11:02:45.157Z</updated>
    
    <content type="html"><![CDATA[<!-- MarkdownTOC --><ul><li><a href="#%E5%89%8D%E6%9C%9F%E6%BA%96%E5%82%99">前期準備</a></li><li><a href="#add-private-key">Add Private Key</a></li><li><a href="#%E5%8A%A0%E5%85%A5-ssh-%E9%80%A3%E7%B7%9A%E8%A8%AD%E5%AE%9A">加入 SSH 連線設定</a><ul><li><a href="#%E5%A2%9E%E5%8A%A0-ssh-%E9%80%A3%E7%B7%9A%E7%9A%84-config-%E8%A8%AD%E5%AE%9A">增加 ssh 連線的 config 設定</a></li><li><a href="#travisyml-%E5%85%A7%E8%A8%AD%E5%AE%9A">.travis.yml 內設定</a></li></ul></li><li><a href="#%E5%A2%9E%E5%8A%A0-git-%E8%B3%87%E8%A8%8A">增加 git 資訊</a></li><li><a href="#%E5%8A%A0%E5%85%A5-hexo-%E4%BB%A5%E5%8F%8A%E5%9F%B7%E8%A1%8C-deploy">加入 Hexo 以及執行 Deploy</a><ul><li><a href="#%E8%A3%9C%E5%85%85%EF%BC%9A">補充：</a></li></ul></li><li><a href="#%E5%BE%8C%E8%A8%98">後記</a></li><li><a href="#reference">Reference</a></li></ul><!-- /MarkdownTOC --><p>其實一直都想研究一下 CI/CD 的一些流程，知道 Travis CI 可以結合 Github 上的專案來進行，那就先從一些簡單的小專案開始好了，上網找到一篇<a href="https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/">文章</a>有 Travis CI 與 Github 以及 Hexo 的關鍵字，害我好興奮，看了好一陣子後決定上了！</p><p><a name="%E5%89%8D%E6%9C%9F%E6%BA%96%E5%82%99"></a></p><h1 id="前期準備"><a href="#前期準備" class="headerlink" title="前期準備"></a>前期準備</h1><ul><li>申請 Travis CI 帳號</li><li>串接 Github 上的 repo</li><li>替 github 的 repo 加上 .trivas.yml 檔案<ul><li>這就比較麻煩，因為得根據各自專案的程式語言來撰寫，我也超不熟，只好去官方網站看<a href="https://docs.travis-ci.com/user/languages/">文件</a>了</li><li>我先以目前 hexo 的專案為例，就如下面顯示少少兩三行</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - &#x27;4&#x27;</span><br></pre></td></tr></table></figure><p><a name="add-private-key"></a></p><h1 id="Add-Private-Key"><a href="#Add-Private-Key" class="headerlink" title="Add Private Key"></a>Add Private Key</h1><p>因為不能大辣辣的把自己 ssh private key 丟到 github 上，所以 Travis CI 提供加密的方式，可以把 private 加密，等到 Travis 上再來處理；因為我已經把自己電腦的 private key 加到 github 上，所以就直接把 key 加到 Travis 與對應的 repo 上</p><ul><li>安裝 Travis command line tool，因為使用 ruby 所以要確認電腦已經安裝好 ruby</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gem install travis</span><br></pre></td></tr></table></figure><ul><li>透過 Command Line Tool 登入到 Travis，需要輸入 github 的帳號密碼</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">travis login --auto</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li>將自己的 private key 加到對應 repo，加入後會自動改寫 .travis.yml 檔案<ul><li>我後來在專案下建立 .travis 目錄，然後將 private key 資料放進去</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">travis encrypt-file ~/.ssh/id_rsa_github --add</span><br><span class="line"></span><br><span class="line">// or 手動指定 repo</span><br><span class="line">travis encrypt-file ~/.ssh/id_rsa_github --add YOUR-NAME/YOUR-REPO-NAME</span><br><span class="line"></span><br><span class="line">mkdir .travis</span><br><span class="line">cp id_rsa_github.enc .travis/</span><br></pre></td></tr></table></figure><p>這時候 .travis.yml 裡面會被添加一些加解密的指令，就不要亂改嘍！注意最後的 <code>-in xxxxx.enc -out oooooo -d</code>，當中<code>xxxxx</code>是剛剛加密後產生的 .enc 檔，而<code>ooooo</code>是 Travis 解密後的檔案路徑，之後會一直用到</p><ul><li><code>-in xxxxx.enc</code> 整個 repo 被 Travis CI 抓取後 private key 的相對路徑，剛剛搬到 .travis 目錄下，所以是 <code>.travis/id_rsa_github.enc</code></li><li><code>-out ooooooo</code> 解密後 private key 路徑，後續會再用到，這裡我定義成 <code>~/.ssh/id_rsa</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">- &#x27;4&#x27;</span><br><span class="line">before_install:</span><br><span class="line">- openssl aes-256-cbc -K $encrypted_43f1702cd897_key -iv $encrypted_43f1702cd897_iv -in .travis/id_rsa_github.enc -out ~/.ssh/id_rsa -d</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="%E5%8A%A0%E5%85%A5-ssh-%E9%80%A3%E7%B7%9A%E8%A8%AD%E5%AE%9A"></a></p><h1 id="加入-SSH-連線設定"><a href="#加入-SSH-連線設定" class="headerlink" title="加入 SSH 連線設定"></a>加入 SSH 連線設定</h1><p>這時只是把自己的 private key 加密後，在 Travis 從 github 抓出來解密成功，接著還需要指定 SSH 連回 github 使用剛剛解密的 private key，步驟大概是：</p><p><a name="%E5%A2%9E%E5%8A%A0-ssh-%E9%80%A3%E7%B7%9A%E7%9A%84-config-%E8%A8%AD%E5%AE%9A"></a></p><h2 id="增加-ssh-連線的-config-設定"><a href="#增加-ssh-連線的-config-設定" class="headerlink" title="增加 ssh 連線的 config 設定"></a>增加 ssh 連線的 config 設定</h2><ul><li>自己的再連 github 的時候，因為有兩個 github 帳號，所以產生了兩組 private key使用，連帶需要把 ssh 連線設定分開寫</li><li>這邊只列出自己目前常用帳號的 ssh 連線設定提供參考</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim .travis/ssh_config</span><br></pre></td></tr></table></figure><p>內容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SoarLin@github</span><br><span class="line">Host SoarLin.github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">StrictHostKeyChecking no</span><br><span class="line"># 底下路徑需要根據實際 Travis CI 上存取解開後的 private key 位置</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">IdentitiesOnly yes</span><br></pre></td></tr></table></figure><p><a name="travisyml-%E5%85%A7%E8%A8%AD%E5%AE%9A"></a></p><h2 id="travis-yml-內設定"><a href="#travis-yml-內設定" class="headerlink" title=".travis.yml 內設定"></a>.travis.yml 內設定</h2><ol><li>更改 private key 權限為 600</li><li>將 private key 增加到系統中</li><li>將 ssh 連線搬到系統 <code>~/.ssh</code> 目錄下</li></ol><p>以上這些動作，大概會讓 .travis.yml 檔案變成如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">- &#x27;4&#x27;</span><br><span class="line">before_install:</span><br><span class="line">- openssl aes-256-cbc -K $encrypted_43f1702cd897_key -iv $encrypted_43f1702cd897_iv -in .travis/id_rsa_github.enc -out id_rsa -d</span><br><span class="line"></span><br><span class="line">- chmod 600 ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">- eval $(ssh-agent)</span><br><span class="line">- ssh-add ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">- cp .travis/ssh_config ~/.ssh/config</span><br></pre></td></tr></table></figure><p><a name="%E5%A2%9E%E5%8A%A0-git-%E8%B3%87%E8%A8%8A"></a></p><h1 id="增加-git-資訊"><a href="#增加-git-資訊" class="headerlink" title="增加 git 資訊"></a>增加 git 資訊</h1><p>因為 hexo deploy 的時候，會將所有產生出來的檔案 push 回 github，所以需要有個 git psuh 的使用者資訊，所以繼續加入 .travis.yml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">- &#x27;4&#x27;</span><br><span class="line">before_install:</span><br><span class="line">- openssl aes-256-cbc -K $encrypted_43f1702cd897_key -iv $encrypted_43f1702cd897_iv -in id_rsa_github.enc -out id_rsa_github -d</span><br><span class="line"></span><br><span class="line">- chmod 600 id_rsa_github</span><br><span class="line"></span><br><span class="line">- eval $(ssh-agent)</span><br><span class="line">- ssh-add id_rsa_github</span><br><span class="line"></span><br><span class="line">- cp .travis/ssh_config ~/.ssh/config</span><br><span class="line"></span><br><span class="line">- git config --global user.name &quot;Soar Lin&quot;</span><br><span class="line">- git config --global user.email soar.lin@gmail.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="%E5%8A%A0%E5%85%A5-hexo-%E4%BB%A5%E5%8F%8A%E5%9F%B7%E8%A1%8C-deploy"></a></p><h1 id="加入-Hexo-以及執行-Deploy"><a href="#加入-Hexo-以及執行-Deploy" class="headerlink" title="加入 Hexo 以及執行 Deploy"></a>加入 Hexo 以及執行 Deploy</h1><p>最後當然是把 hexo 套件安裝好，然後執行<code>hexo generate</code>來產生檔案，以及<code>hexo deploy</code>來自動發布，因為我自己還要把 blog 文章丟去 ElasticSearch Server 建立 index 來做搜尋索引，所以會再多一些東西，最後完成的 .travis.yml 大概如下：</p><p><a name="%E8%A3%9C%E5%85%85%EF%BC%9A"></a></p><h2 id="補充："><a href="#補充：" class="headerlink" title="補充："></a>補充：</h2><p>一開始忘了把 package.json 內相關套件安裝，所以後來才又補上 <code>npm install</code>，以及增加個 cache，才不用每次都重新安裝 node_modules 內的套件。</p><p>目前 repo 內的佈景，不曉得為何沒有跟著上 github，所以之前 deploy 後，整個頁面空空如也，所以只好再把布景重新傳上去</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language: node_js</span><br><span class="line"></span><br><span class="line">node_js:</span><br><span class="line">  - &#x27;4&#x27;</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line"></span><br><span class="line">before_install:</span><br><span class="line">  - openssl aes-256-cbc -K $encrypted_43f1702cd897_key -iv $encrypted_43f1702cd897_iv -in .travis/id_rsa_github.enc -out ~/.ssh/id_rsa -d</span><br><span class="line"></span><br><span class="line">  - chmod 600 ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">  - eval $(ssh-agent)</span><br><span class="line">  - ssh-add ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">  - cp .travis/ssh_config ~/.ssh/config</span><br><span class="line"></span><br><span class="line">  - git config --global user.name &quot;Soar Lin&quot;</span><br><span class="line">  - git config --global user.email soar.lin@gmail.com</span><br><span class="line"></span><br><span class="line">  - npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hexo generate</span><br><span class="line">  - curl -i -X POST &quot;https://soar.stco.tw/update&quot; -F &#x27;file=@db.json&#x27; -F &#x27;index=blog&#x27; -F &#x27;type=articles&#x27;</span><br><span class="line">  - hexo deploy</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line"> only:</span><br><span class="line">  - master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="%E5%BE%8C%E8%A8%98"></a></p><h1 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h1><p>雖然好像不複雜，可是我也是照著大大的教學文章，做了好幾個小時，不斷的失敗，不斷的找其他資料參考，最後才完成這小小的流程。希望之後可以越來越上手嘍～</p><p><a name="reference"></a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.karlzhou.com/2016/05/28/travis-ci-deploy-blog/">用Travis CI自动部署Hexo博客</a> &lt;– 推薦這篇，很詳細<br><a href="https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/">用 Travis CI 自動部署網站到 GitHub</a> &lt;– Hexo作者大大的文章<br><a href="https://ssarcandy.tw/2016/07/29/hexo-auto-deploy/">用 Travis CI 自動部屬 hexo 到 GitHub</a><br><a href="http://xwartz.xyz/pupa/2016/06/auto-update-with-travis-ci/">使用 Travis CI 自动更新 Hexo Blog</a></p>]]></content>
    
    
    <summary type="html">&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%89%8D%E6%9C%9F%E6%BA%96%E5%82%99&quot;&gt;前期準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#add-private-key&quot;&gt;Add Private Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8A%A0%E5%85%A5-ssh-%E9%80%A3%E7%B7%9A%E8%A8%AD%E5%AE%9A&quot;&gt;加入 SSH 連線設定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A2%9E%E5%8A%A0-ssh-%E9%80%A3%E7%B7%9A%E7%9A%84-config-%E8%A8%AD%E5%AE%9A&quot;&gt;增加 ssh 連線的 config 設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#travisyml-%E5%85%A7%E8%A8%AD%E5%AE%9A&quot;&gt;.travis.yml 內設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A2%9E%E5%8A%A0-git-%E8%B3%87%E8%A8%8A&quot;&gt;增加 git 資訊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8A%A0%E5%85%A5-hexo-%E4%BB%A5%E5%8F%8A%E5%9F%B7%E8%A1%8C-deploy&quot;&gt;加入 Hexo 以及執行 Deploy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%A3%9C%E5%85%85%EF%BC%9A&quot;&gt;補充：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%BE%8C%E8%A8%98&quot;&gt;後記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#reference&quot;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;


&lt;p&gt;其實一直都想研究一下 CI/CD 的一些流程，知道 Travis CI 可以結合 Github 上的專案來進行，那就先從一些簡單的小專案開始好了，上網找到一篇&lt;a href=&quot;https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/&quot;&gt;文章&lt;/a&gt;有 Travis CI 與 Github 以及 Hexo 的關鍵字，害我好興奮，看了好一陣子後決定上了！&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;%E5%89%8D%E6%9C%9F%E6%BA%96%E5%82%99&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前期準備&quot;&gt;&lt;a href=&quot;#前期準備&quot; class=&quot;headerlink&quot; title=&quot;前期準備&quot;&gt;&lt;/a&gt;前期準備&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;申請 Travis CI 帳號&lt;/li&gt;
&lt;li&gt;串接 Github 上的 repo&lt;/li&gt;
&lt;li&gt;替 github 的 repo 加上 .trivas.yml 檔案&lt;ul&gt;
&lt;li&gt;這就比較麻煩，因為得根據各自專案的程式語言來撰寫，我也超不熟，只好去官方網站看&lt;a href=&quot;https://docs.travis-ci.com/user/languages/&quot;&gt;文件&lt;/a&gt;了&lt;/li&gt;
&lt;li&gt;我先以目前 hexo 的專案為例，就如下面顯示少少兩三行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;language: node_js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node_js:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;#x27;4&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;&lt;a name=&quot;add-private-key&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Add-Private-Key&quot;&gt;&lt;a href=&quot;#Add-Private-Key&quot; class=&quot;headerlink&quot; title=&quot;Add Private Key&quot;&gt;&lt;/a&gt;Add Private Key&lt;/h1&gt;&lt;p&gt;因為不能大辣辣的把自己 ssh private key 丟到 github 上，所以 Travis CI 提供加密的方式，可以把 private 加密，等到 Travis 上再來處理；因為我已經把自己電腦的 private key 加到 github 上，所以就直接把 key 加到 Travis 與對應的 repo 上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安裝 Travis command line tool，因為使用 ruby 所以要確認電腦已經安裝好 ruby&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gem install travis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;透過 Command Line Tool 登入到 Travis，需要輸入 github 的帳號密碼&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;travis login --auto&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="CI/CD" scheme="https://soarlin.github.io/categories/CI-CD/"/>
    
    
    <category term="TravisCI" scheme="https://soarlin.github.io/tags/TravisCI/"/>
    
    <category term="Hexo" scheme="https://soarlin.github.io/tags/Hexo/"/>
    
    <category term="Github" scheme="https://soarlin.github.io/tags/Github/"/>
    
  </entry>
  
</feed>
