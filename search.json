[{"title":"透過 Webpack 傳入變數到 pug, scss 檔案內","url":"https://soarlin.github.io/2021/04/09/Webpack%E5%82%B3%E5%85%A5%E8%AE%8A%E6%95%B8%E5%88%B0pug-scss%E6%AA%94%E6%A1%88/","content":"最近在做前端切版的時候，遇到了一個以前沒注意到的問題，就是在本機端開發時，存取圖片或其他檔案都預設從根目錄開始找 (e.g. /images/...)，可是當專案開發完，要發佈到其他位置時，圖片等檔案的位置就會有所變更，這時候圖片的路徑就會找不到檔案了，必須要再手動調整過，當然不可能每次都手動一個一個改路徑。\n所以開始著手研究怎麼把路徑的變數，透過 webpack 編譯階段判斷目前是開發環境，還是 production 環境，來改變圖片等檔案的前綴路徑。底下就以 pug-sass-template 專案來說明幾個重要的步驟。\nStep 1 - Webpack Get Environment Variables\n參考： https://webpack.js.org/guides/environment-variables/\n\n上面網址提供的範例在傳入參數時，一個與多個在接收時，其實有所不同，這邊也是踩了雷才注意到Webpack 版本 : 4.43.0\n// 傳入兩組 env 時npx webpack --env NODE_ENV=local --env production --progress// 在 webpack 內module.exports = (env) =&gt; &#123;  console.log(&#x27;env:&#x27;, env); // [ &#x27;NODE_ENV=local&#x27;, &#x27;production&#x27; ]  console.log(&#x27;Production: &#x27;, env.production); // true  return &#123;    entry: &#x27;./src/index.js&#x27;,    output: &#123;      filename: &#x27;bundle.js&#x27;,      path: path.resolve(__dirname, &#x27;dist&#x27;),    &#125;,  &#125;;&#125;;\n傳入兩組 env 值的時候，所收到的 env 其實是一組陣列，各別是 --env XXXXX 裡面的 XXXXX，但是當傳入的只有一組 env 時，例如：--env production這時候 env 就是 production 這個值，就不再是陣列了\n\n\n// 傳入一組 env 時npx webpack --env production --progress// 在 webpack 內module.exports = (env) =&gt; &#123;  console.log(&#x27;env:&#x27;, env); // &#x27;production&#x27;  return &#123;    entry: &#x27;./src/index.js&#x27;,    output: &#123;      filename: &#x27;bundle.js&#x27;,      path: path.resolve(__dirname, &#x27;dist&#x27;),    &#125;,  &#125;;&#125;;\n雖然目前 webpack 參考的頁面是 v5.31.0 版，可是沒特別寫出這個差異，讓我一直踩雷踩到懷疑人生了…\n另外，可以也使用 mode 來傳入環境變數\nnpx webpack --mode production --progressmodule.exports = (env, options) =&gt; &#123;  console.log(&#x27;options.mode:&#x27;, options.mode); // &#x27;production&#x27;  return &#123;    entry: &#x27;./src/index.js&#x27;,    output: &#123;      filename: &#x27;bundle.js&#x27;,      path: path.resolve(__dirname, &#x27;dist&#x27;),    &#125;,  &#125;;&#125;;\n\nStep 2 - Pass Variables Into PUG files\n參考： https://www.npmjs.com/package/pug-html-loader\n\n根據這個套件的說明，可以簡單地透過在 options 裡面加入 data 來將要傳入 pug 的變數傳進去即可。而 data 的格式，寫成 JSON 即可。結合一下上面的步驟一，就可以來調整圖片的前綴網址。\n// package.json 內的 scriptswebpack --env production --mode production --config webpack.config.js// webpack.config.jsmodule.exports = (env, options) =&gt; &#123;  const _VARIABLES = &#123;    IMG_PREFIX_URL: (options.mode === &#x27;production&#x27;) ? &#x27;https://soarlin.github.io/&#x27; : &#x27;/&#x27;  &#125;;  let config = &#123;    context: path.resolve(__dirname, &#x27;src&#x27;),    entry: &#123;      index: &#x27;./js/index.js&#x27;    &#125;,    output: ....,    module: &#123;      rules: [        &#123;          test: /\\.pug$/,          use: [            &#123;              loader: &#x27;html-loader&#x27;,              options: &#123;                minimize: (options.mode === &#x27;production&#x27;) ? true : false              &#125;            &#125;,            &#123;              loader: &#x27;pug-html-loader&#x27;,              options: &#123;                data: _VARIABLES,                pretty: (options.mode === &#x27;production&#x27;) ? false : true              &#125;            &#125;          ]        &#125;,        ....      ]    &#125;,    plugins: [      ...    ]  &#125;  return config;&#125;;\n而到時候 pug 檔內，就可以讀到傳入的變數了\n// 接收變數- var imgPrefixUrl = IMG_PREFIX_URL// 套用在圖片上img.rounded-circle(src=imgPrefixUrl+&#x27;images/soarlin-avatar.jpg&#x27;, alt=&quot;avatar&quot;)\n\nStep 3 - Pass Variables Into Sass/SCSS files\n參考： https://www.npmjs.com/package/sass-loader#additionaldata\n\n雖然在 stack overflow 上也有找到解答，可是上面的解答實際使用時有問題，後來是在 sass-loader npm 的頁面上找到正確的參數，可能是版本的關係產生的不同吧！\n在 sass-loader 的 \boptions 加入 additionalData 來傳入參數到 Sass/SCSS 檔內。而 additionalData 可使用字串或是函示，使用的方式在上述參考網址也有了，所以我就以我自己的範例來寫就好\n// package.json 內的 scriptswebpack --env production --mode production --config webpack.config.js// webpack.config.jsmodule.exports = (env, options) =&gt; &#123;  const _VARIABLES = &#123;    IMG_PREFIX_URL: (options.mode === &#x27;production&#x27;) ? &#x27;https://soarlin.github.io/&#x27; : &#x27;/&#x27;  &#125;;  let config = &#123;    context: path.resolve(__dirname, &#x27;src&#x27;),    entry: &#123;      index: &#x27;./js/index.js&#x27;    &#125;,    output: ....,    module: &#123;      rules: [        ...,        &#123;          test: /\\.s[ac]ss$/i,          use: [            &#x27;style-loader&#x27;,            &#x27;css-loader&#x27;,            &#123;              loader: &#x27;sass-loader&#x27;,              options: &#123;                sourceMap: true,                additionalData: &quot;$imgPrefix: &#x27;&quot; + _VARIABLES.IMG_PREFIX_URL + &quot;&#x27;;&quot;              &#125;            &#125;          ]        &#125;,        ....      ]    &#125;,    plugins: [      ...    ]  &#125;  return config;&#125;;\n\n這樣似乎會將 additionalData 放在所有 Sass/SCSS 的最前方，讓它以變數的方式直接帶入 Sass/SCSS 內，所以就可以直接使用變數\n// 傳入 $imgPrefix: _VARIABLES.IMG_PREFIX_URL.item-bg &#123;  background-image: url($imgPrefix+&#x27;images/background-0.jpg&#x27;);  background-repeat: no-repeat;  background-position: center center;  background-size: cover;&#125;\n\n以上大概就是這在切版遇到的問題，為了找這些方法花了不少時間，所以非得好好紀錄一下，以供後人參考，減少走冤枉路。也讓自己以後可以拿來抄。\n而文中寫到的範例程式，都可以到 Github 上的 pug-sass-template 專案上找到，歡迎大家幫忙按顆星星。\n","title_tokenize":["透過","Webpack","傳","入","變數","pug","scss","檔案內"],"content_tokenize":["最近","做","前端","切版","時候","遇到","1","個","之前","沒","注意到","問題","機端開發時","存取","圖","片","檔案","都","預設從根目錄開始","找","e","g","images","當專案開發完","要發佈","位置","時","圖","片","檔案","位置","會","有所","變","更","這時候圖","片","路徑","會","找不到","檔案","必","須要再","手","動調整過","當然","不可能","每次","都","手","動","1","個","1","個","改","路徑","開始著","手","研究","怎麼","路徑","變數","透過","webpack","編譯階","段","判","斷","目前","開發環境","還","production","環境","來","改","變圖","片","檔案","前","綴路徑","底下","pug","sass","template","專案來說明幾個","重要的","步","驟","Step","1","Webpack","Get","Environment","Variables","參","考","https://webpack.js.org/guides/environment-variables/","上面","網址","提供","範例","傳","入","參數時","1","個與多個","接收","時","實","有所不同","這邊","也是","踩","雷才","注意到","Webpack","版本","4.43.0","傳","入","兩組","env","時","npx","webpack","env","NODE","ENV","local","env","production","progress","webpack","內","module","exports","env","gt","123","console","log","x","27","env","x","27","env","x","27","NODE","ENV","local","x","27","x","27","production","x","27","console","log","x","27","Production","x","27","env","production","true","return","123","entry","x","27","src","index","js","x","27","output","123","filename","x","27","bundle","js","x","27","path","path","resolve","dirname","x","27","dist","x","27","125","125","125","傳","入","兩組","env","值","時候","收到","env","實","1","組陣","列","各別","env","XXXXX","裡","面","XXXXX","當傳","入","只","1","組","env","時","env","production","這時候","env","production","這個值","不再","陣","列","傳","入","1","組","env","時","npx","webpack","env","production","progress","webpack","內","module","exports","env","gt","123","console","log","x","27","env","x","27","env","x","27","production","x","27","return","123","entry","x","27","src","index","js","x","27","output","123","filename","x","27","bundle","js","x","27","path","path","resolve","dirname","x","27","dist","x","27","125","125","125","雖然","目前","webpack","參","考","頁","面","v","5.31.0","版","沒","特","別寫","出","這個","差","異","讓","1","直","踩雷踩","懷疑","人生","使用","mode","來傳","入","環境變數","npx","webpack","mode","production","progressmodule","exports","env","options","gt","123","console","log","x","27","options","mode","x","27","options","mode","x","27","production","x","27","return","123","entry","x","27","src","index","js","x","27","output","123","filename","x","27","bundle","js","x","27","path","path","resolve","dirname","x","27","dist","x","27","125","125","125","Step","2","Pass","Variables","Into","PUG","files","參","考","https://www.npmjs.com/package/pug-html-loader","根據這個","套件","說明","簡單","透過","options","裡","面","加入","data","來將要傳","入","pug","變數傳進","去","即可","data","格式","寫","成","JSON","即可","結","合一","下","上面","步","驟","1","來調整圖","片","前","綴網址","package","json","內","scriptswebpack","env","production","mode","production","config","webpack","config","js","webpack","config","jsmodule","exports","env","options","gt","123","const","VARIABLES","123","IMG","PREFIX","URL","options","mode","x","27","production","x","27","x","27","https://soarlin.github.io/&#x27;","x","27","x","27","125","let","config","123","context","path","resolve","dirname","x","27","src","x","27","entry","123","index","x","27","js","index","js","x","27","125","output","module","123","rules","123","test","pug","use","123","loader","x","27","html","loader","x","27","options","123","minimize","options","mode","x","27","production","x","27","true","false","125","125","123","loader","x","27","pug","html","loader","x","27","options","123","data","VARIABLES","pretty","options","mode","x","27","production","x","27","false","true","125","125","125","125","plugins","125","return","config","125","時候","pug","檔內","讀","傳","入","變數","接收","變數","var","imgPrefixUrl","IMG","PREFIX","URL","套用","圖","片","上","img","rounded","circle","src","imgPrefixUrl","x","27","images","soarlin","avatar","jpg","x","27","alt","quot","avatar","quot","Step","3","Pass","Variables","Into","Sass","SCSS","files","參","考","https://www.npmjs.com/package/sass-loader#additionaldata","雖然","stack","overflow","上","找到","解答","上面","解答","實際","使用","時","問題","後來","sass","loader","npm","頁","面上","找到","正","確","參數","可能","版本","關係產生","不同","sass","loader","\b","options","加入","additionalData","來傳","入","參數","Sass","SCSS","檔內","additionalData","使用","字串","函示","使用","方式","上述","參","考","網址","有了","範例來寫","好","package","json","內","scriptswebpack","env","production","mode","production","config","webpack","config","js","webpack","config","jsmodule","exports","env","options","gt","123","const","VARIABLES","123","IMG","PREFIX","URL","options","mode","x","27","production","x","27","x","27","https://soarlin.github.io/&#x27;","x","27","x","27","125","let","config","123","context","path","resolve","dirname","x","27","src","x","27","entry","123","index","x","27","js","index","js","x","27","125","output","module","123","rules","123","test","s","ac","ss","i","use","x","27","style","loader","x","27","x","27","css","loader","x","27","123","loader","x","27","sass","loader","x","27","options","123","sourceMap","true","additionalData","quot","imgPrefix","x","27","quot","VARIABLES","IMG","PREFIX","URL","quot","x","27","quot","125","125","125","125","plugins","125","return","config","125","這樣","恍如","會將","additionalData","放","所有","Sass","SCSS","最","前方","讓","變數","方式","直接","帶","入","Sass","SCSS","內","直接","使用","變數","傳","入","imgPrefix","VARIABLES","IMG","PREFIX","URL","item","bg","123","background","image","url","imgPrefix","x","27","images","background","0","jpg","x","27","background","repeat","no","repeat","background","position","center","center","background","size","cover","125","以上","大概","這","切版","遇到","問題","為","找","這些","方法","花","很多","時間","非得","好好","紀錄","一下","供","後人參","考","減","少","走","冤枉路","讓","後","來","抄","文中","寫","範","例程","式","都","Github","上","pug","sass","template","專案","上","找到","歡迎","大家","幫忙按顆","星星"]},{"title":"Vue 專案搭配 Vuesax / Element UI 開發筆記","url":"https://soarlin.github.io/2020/11/08/vuejs-with-element-ui-development-note/","content":"最近因為參加了公司舉辦的 hackathon，總算又有機會回來寫寫 Vue.js 了，太久沒寫真的生疏好多，加上最近 Angular 寫太多，再次回來寫 Vue 看到 .vue 檔裡面放著 template, script, style 覺得程式碼變得好長，不過好處是不用在 VSCode 裡面開一堆 .html, .ts, .scss 等檔案，透過 tab 找起檔案來會快一點點。\n由於參加了兩組比賽，所以可以嘗試不同的東西，這次就找了兩套 UI Component 來搭配使用，一個是使用 Vuesax，另一個則是使用 Element，先說結論吧！ Element 用起來比較舒服，除了文件有中文可以看，元件也比較多種可選擇。一開始選擇 Vuesax 時，覺得這套畫面感覺很生動，就選來試試看！但是遇到安裝了 3.x 版，卻找去 4.0 版的說明文件，結果一直覺得怪怪的，好一陣子後才發現。\n不過 Vuesax 的 input 真的做得好精緻，除了有底線顏色、驗證狀態，還可以讓 placeholder 躍升變成 label，以及 checkbox 跟 switch 的一些畫面小動畫，感覺在表單製作上可以做得很精緻，在專案中用它建立了一個簡單的登入畫面覺得很滿意，可惜後來登入頁面被捨棄，沒辦法展現一下。不過實際上在使用 Vuesax 開發時，還是覺得看文件編開發卡卡的，可能還不太習慣用 UI Component 來開發吧！\n後來另一個專案想說換一個玩看看，就選了 Element，發現這個真的好用很多，可能真的因為文件有中文的吧(先加100分)！實作上也覺得 Layout 跟 Container 比較快上手，也可能是經歷了之前一個套件的關係吧！而這次開發時，碰到了幾個小問題，一個是以前也碰過只是解法有點複雜的在 Vue 專案內讓每個元件可以引入共同的 Sass/SCSS 檔案，另一個則是因為用了 UI Component 後可能會遇到的問題，在寫 style 的時候，無法去客製化引用的 UI 元件，正確來說應該是寫的 css selector 無法複寫到元件內的樣式，底下就針對這兩個來記錄說明吧！\n\n\n開發環境紀錄\nNode v12.18\nnpm 6.14.6\n@vue/cli 4.5.6\n\nImport Sass/Scss files into Every Vue Component參考文件 :\n\nHow to Import a Sass File into Every Vue Component in an App\nVue CLI 專案中引入 SCSS 檔案的四種方法，該如何使用呢？\n\n這邊忽略建立 Vue 專案的過程，直接進入重點：\nInstall Loader先安裝所需要的 loader，node-sass跟sass-loader\nnpm install --save-dev node-sass sass-loader\n\nCreate vue.config.js如果已經有調整過 vue 專案的編譯過程，可能已經新增過這個檔案了，如果還沒有這個檔案就在專案目錄下新增，用以調整 webpack 的設定，這邊載入兩個共用的 scss 檔案，一個是我用來放 css 顏色的變數，而另一個是放一些常用的 mixin\nmodule.exports = &#123;  css: &#123;    loaderOptions: &#123;      sass: &#123;        data: `          @import &quot;@/assets/styles/_variables.scss&quot;;          @import &quot;@/assets/styles/_mixin.scss&quot;;        `      &#125;    &#125;  &#125;&#125;\n\n另外如果 sass-loader 會根據不同版本，有不同的寫法，上述的是 v7 或更舊的版本，\n\nsass-loader v8 : data請更換為prependData\nsass-loader v9 : data請更換為additionalData\n\n做完這兩部，基本上就算完成了。接下來在專案內的 vue 檔撰寫 style 時，都可以套用已經 import 的變數跟 mixin 了。\nCustomize Element-UI Style這次在使用 Element UI 的時候，有一些要客製化的需求，但是在 vue 檔的 style 直接寫，似乎無法將 css 套用到 Element UI 上，所以只好上網問問 Google 大神了。\n參考文件 :\n\n如何在Vue裡面使用Element-ui並修改CSS樣式呢？\nElement-UI 不能自定义样式吗\n/deep/ 是什麼？ — 聊聊 Vue 裡的 scoped css\n\nMethod 1 - Remove ‘scoped’將 vue 檔內 style 的 scoped 參數移除，這樣一來就可以全局套用了，只是缺點就是影響的範圍太廣，實在不是一個很好的方法\n...&lt;style lang=&quot;scss&quot; scoped&gt;.el-main &#123;    ....&#125;&lt;/style&gt;　　　　　// 改寫成下面&lt;style lang=&quot;scss&quot;&gt;.el-main &#123;    ....&#125;&lt;/style&gt;\n\n\nMethod 2 - Customize at local將 node_modules 裡面 Element UI 的 scss 整包抓下來自己修改，然後另外放到 assets 目錄下自行修改，並在 main.js 內引入，但是這個真的沒路可走的時候再這麼做吧！不然自己維護一整份也挺累的，而且如果有更新的需求時就慘了\n\n樣式路徑 node_modules/element-ui/lib/theme-chalk\n複製到專案下 assets/element-ui/style\n將原本 main.js 的 import 改成\n\n// import &#x27;element-ui/lib/theme-chalk/index.css&#x27;// 將上面這行改成底下這行import &#x27;assets/element-ui/style/index.css&#x27;\n\nMethod 3 - Use Deep Selector這應該是目前最佳的解法，既不用取消 scoped 避免 style 影響到全局，也不用辛苦的維護一整份 css 檔案，而是透過 deep selector 來複寫到元件內的樣式，不過在網路上看到了幾種寫法，自己測試了很多次後，似乎只有一種寫法能正常運作。\n\nUse &gt;&gt;&gt;，不過這個在 Sass/SCSS 似乎無法被正確解析，應該比較適合單純 CSS 的用法\n\n&lt;style scoped&gt;.a &gt;&gt;&gt; .b &#123; /* ... */ &#125;&lt;/style&gt;\n\n\nUse /deep/ or ::v-deep在一些 pre-processors 的語法下，可以改用上述的兩個語法，不過自己實作時似乎 /deep/ 無法正常被解析編譯，只有 ::v-deep 試驗成功。\n\n使用 /deep/ 時，編譯會出錯，類似下面的錯誤訊息\nModule build failed (from ./node_modules/sass-loader/dist/cjs.js):SassError: expected selector.    ╷278 │       /deep/ .el-input input&#123;    │       ^    ╵  /&lt;MY-VUE-PROJECT&gt;/pages/UserList.vue 278:7  root stylesheet\n\n底下是一個要修改 el-input 元件邊框顏色的範例，當使用者輸入驗證有錯時，想把 input 的邊框改成紅色\n.add-user-dialog &#123;  .input-field &#123;    &amp;.invalid &#123;      ::v-deep .el-input input &#123;        border-color: $redColor;      &#125;    &#125;  &#125;&#125;\n\n以上大概是這次做 Vue 小專案搭配不同的 UI Component Library 的一些心得跟筆記。只是這篇文章無法一氣呵成的寫完，分了三、四天來寫，寫文章記錄真的是件苦差事，不過還是希望自己能繼續保持這個好習慣。\n","title_tokenize":["Vue","專案","搭配","Vuesax","Element","UI","開發筆記"],"content_tokenize":["最","近因","為參","加","公司","舉辦","hackathon","總算","機會回來寫寫","Vue","js","太","久","沒寫","真","生疏","好多","加上","最近","Angular","寫","太多","再次","回來寫","Vue","看到","vue","檔裡","面","放","著","template","script","style","覺","程式","碼變","好","長","不","過","好","處","不用","VSCode","裡","面","開","一堆","html","ts","scss","檔案","透過","tab","找","檔案來會","快","1","點點","於參","加","兩組","賽","嘗試","不同的","東西","這","次","找","兩","套","UI","Component","來","搭配","使用","1","個","使用","Vuesax","另外一","個則","使用","Element","先","說結論吧","Element","來","較","舒服","文件","中文","看","元件","較多種","選擇","1","開始選擇","Vuesax","時","覺","這","套","畫","面","感覺很生動","選來試試","看","遇到","安","裝","3","x","版","卻","找","去","4.0","版","說","明文","件","結果","覺","怪怪","好","1","陣","子","後","才","發現","不","過","Vuesax","input","真","做","好","精緻","有底","線顏色","驗證狀態","還","讓","placeholder","躍升變","成","label","checkbox","switch","畫","面","小","動畫","感覺","表單製","作","上","做","得很","精緻","專案","中用","建立","1","個簡單","登","入","畫","面","覺","得很","滿意","惋惜","後來","登","入","頁","面","捨棄","沒辦","法","展現","一下","不","過實際","上","使用","Vuesax","開發時","還","覺","看","文件","編開發卡卡","可能","還","不","太","習慣用","UI","Component","來開發吧","後來","另外一","個專案想說換","1","個","玩","看看","選","Element","發現這個","真","好","很多","可能","真","為","文件","中文","先","加","100分","實","作","上","覺","Layout","Container","較","快","上手","可能","經歷","之前","1","個","套件","關係吧","這","次","開發時","碰到","幾個","小","問題","1","個","之前","碰過","解法","點複雜","Vue","專案內讓","個","元件","引入","共同","Sass","SCSS","檔案","另外一","個則","為用","UI","Component","後","可能","會","遇到","問題","寫","style","時候","無","法","去","客製化","援用","UI","元件","正","確來說應該","寫","css","selector","無","法","複寫","元件","內","樣式","底下","針對這兩個來記錄說明吧","開發環境紀錄","Node","v","12.18","npm","6.14.6","vue/cli","4.5.6","Import","Sass","Scss","files","into","Every","Vue","Component","參","考","文件","How","to","Import","a","Sass","File","into","Every","Vue","Component","in","an","App","Vue","CLI","專案","中","引入","SCSS","檔案","4","種","方法","該","使用","這邊","忽视","建立","Vue","專案","過程","直接","進","入","重","點","Install","Loader","先","安","裝","需要","loader","node","sass","sass","loader","npm","install","save","dev","node","sass","sass","loader","Create","vue","config","js","已","經","調整過","vue","專案","編譯過程","可能","已","經","新增","過這個檔案","還沒","這個檔案","專案目錄","下","新增","用以","調整","webpack","設","定","這邊載","入","兩個","共用","scss","檔案","1","個","用來","放","css","顏色","變數","另外一","個","放","常用的","mixin","module","exports","123","css","123","loaderOptions","123","sass","123","data","import","quot","assets","styles","variables","scss","quot","import","quot","assets","styles","mixin","scss","quot","125","125","125","125","sass","loader","會根據","不同","版本","不同的","寫","法","上述","v","7","更","舊","版本","sass","loader","v","8","data","請","更","換為","prependData","sass","loader","v","9","data","請","更","換為","additionalData","做完","這兩","部","基本上","就算","完成","接下","來","專案內","vue","檔撰寫","style","時","都","套用","已","經","import","變數","mixin","Customize","Element","UI","Style","這","次","使用","Element","UI","時候","有一些","要客製化","需求","vue","檔","style","直接","寫","恍如","無","法","將","css","套用","Element","UI","上","只好","上","網問問","Google","大神","參","考","文件","何在","Vue","裡","面","使用","Element","ui","並","修改","CSS","樣式","Element","UI","不能","自定义","样式","deep","什麼","聊聊","Vue","裡","scoped","css","Method","1","Remove","scoped","將","vue","檔內","style","scoped","參數移","這樣","1","來","全局","套用","只","缺點","影響","範圍","太","廣","實","不是","1","個","很好","方法","lt","style","lang","quot","scss","quot","scoped","gt","el","main","123","125","lt","style","gt","改","寫","成","下面","lt","style","lang","quot","scss","quot","gt","el","main","123","125","lt","style","gt","Method","2","Customize","at","local","將","node","modules","裡","面","Element","UI","scss","整","包","抓","下","來","修改","然後","放到","assets","目錄","下","自行","修改","並","main","js","內","引入","這個","真","沒路","走","時候再這麼","做","維護","1","整","份","挺累","更新","需求","時","慘","樣式路徑","node","modules","element","ui","lib","theme","chalk","複製","專案","下","assets","element","ui","style","將","本来","main","js","import","改成","import","x","27","element","ui","lib","theme","chalk","index","css","x","27","將","上面","這行","改成","底下","這行","import","x","27","assets","element","ui","style","index","css","x","27","Method","3","Use","Deep","Selector","這應該","目前","最好","解法","既不","取消","scoped","避免","style","影響","全局","不用","辛苦的","維護","1","整","份","css","檔案","透過","deep","selector","來複寫","元件","內","樣式","不","過","網","路上","看","到了","幾種寫","法","測試","很多","次","後","恍如","1","種寫","法","正常","運","作","Use","gt","gt","gt","不","過這個","Sass","SCSS","恍如","無","法","正","確","解析","應該","較適","合","單純","CSS","用法","lt","style","scoped","gt","a","gt","gt","gt","b","123","125","lt","style","gt","Use","deep","or","v","deep","pre","processors","語","法","下","改用","上述","兩個語","法","不","過","實","作","時","恍如","deep","無","法","正常","解析","編譯","只","v","deep","試驗","成功","使用","deep","時","編譯會","出","錯","類似","下面","錯誤訊息","Module","build","failed","from","node","modules","sass","loader","dist","cjs","js","SassError","expected","selector","╷","278","deep","el","input","input","123","╵","lt","MY","VUE","PROJECT","gt","pages","UserList","vue","278","7","root","stylesheet","底下","1","個要","修改","el","input","元件","邊框顏色","範例","當","使用者","輸","入","驗證","錯時","想","input","邊框","改成","紅色","add","user","dialog","123","input","field","123","amp","invalid","123","v","deep","el","input","input","123","border","color","redColor","125","125","125","125","以上","大概是","這","次","做","Vue","小","專案","搭配","不同的","UI","Component","Library","心得","筆記","只","這","篇文章","無","法","1","氣呵","成","寫完","分","3","4","天來寫","寫","文章","記錄","真","件","苦差事","不","過還","希望","繼續","保持","這個","好","習慣"]},{"title":"使用 Webpack 製作前端樣板 (以 Pug 與 Sass 開發)","url":"https://soarlin.github.io/2020/07/18/pug-sass-boilerplate/","content":"\n\n\n前端樣板使用 Webpack 產生\n專案位置\n用到的技術\n開發環境\n工具安裝\n目錄架構\nWebpack 設定\nwebpack 基本設定檔\n進入點和上下文\n輸出檔案\nDevServer\nPug 轉 HTML\nSass rule\nCSS rule\nJS rule\nimages 相關處理\n靜態檔案處理與其他設定\n\n\n\n\n參考文章\n\n\n\n\n前端樣板使用 Webpack 產生由於之前做過的前端樣板實在是太過時了，除了 node 版本幾跟目前已經差太多了外(當時 v4.x，現在 v12.x)，前端流程的處理工具 gulp 現在也越來越少人知道了，時代的眼淚啊！前端真的是日新月異，每過一陣子，學過的東西就漸漸被淘汰，當時還用了一個現在幾乎沒人知道的 bower 前端套件管理工具，現在大家應該都只知道 npm 這東西吧！\n大概從去年就開始有在想要再弄一個新的前端樣板，以便日後有切版需求的時候可以使用。無奈自己懶惰加上也沒有任何切版的案子，所以就一直停滯沒動作，最近看到女友去接了一個友情外包案，就是要使用 pug + sass 來做切版。\n不過在我完成這個小工具之前，其實網路上應該也很多類似的專案了，甚至還有很多好用的前端開發工具，如： CodeKit、Prepros、Fire.app…等工具可以達到這些要求。\n不過這次就當作是練功，順便熟悉一下 Webpack 的一些設定，雖然大部分也是到處複製貼上後，拼湊出來的產物，不過…我也是花了不少時間先理解再抄襲效仿，底下紀錄一下這次的內容。\n\n\n\n專案位置https://github.com/SoarLin/pug-sass-template\n\n用到的技術\nWebpack : 一個強大的前端打包工具，雖然版本在從 2 -&gt; 4 的過程中，許多設定過程不一定能相容，甚至要重學，但是我想應該也趨近於穩定了吧！\nSass : CSS preprocessor，雖然是叫 Sass，不過實際上我是用 SCSS 的語法來寫啦！如果看不順眼的其實可以自行把 scss 改成 sass\nPug : HTML 的樣板語言，前身是 Jade，寫起來很精簡，但是…我跟它還很不熟，只是現在要我繼續寫 EJS 可能也忘得差不多了\n\n\n開發環境紀錄這次專案開發時的環境，避免之後每個套件版本差異太多，忘了該回到哪個版本來執行。\n\nnode v12.18.2\nnpm 6.14.5\nwebpack 4.43\n\n\n工具安裝基本上一定要先安裝 node.js 與 npm，這部分就麻煩大家自己先在電腦上安裝吧！Node.js 官網 然後版本盡可能不要與上述的相差太多，不然很有可能無法運作…XD\n\nnpm i -D webpack webpack-cli 先安裝 webpack 與 webpack-cli\nnpm install 安裝專案所需要的套件\n\n\n目錄架構目錄結構.├── README.md├── package-lock.json├── package.json├── src│ ├── assets│ ├── css│ ├── images│ ├── js│ ├── pug│ └── sass└── webpack.config.js\n\n專案目錄下的 README.md 與 package.json 都不是本次討論的重點，主要開發的檔案都放在 src 目錄下，而 webpack 的打包設定都寫在 webpack.config.js 裡面\n大概介紹一下 src 目錄下的結構\n\nassets : 用來放置一些靜態文件，可用來放字形檔(fonts), SVG 檔案或其他非圖片的檔案\nimages : 切版時偶爾會需要一些圖片檔案，就可以用來放這邊，如：jpg, png, gif 等\ncss : 一些額外的 css 檔案，這次專案使用到 Bootstrap 的範例，懶得自己重頭寫 css, 就把下載下來的範例 css 放這邊，並且在頁面內載入\njs : 主要的程式進入點 index.js 放在這裡，另外如果需要自行客製化 js 檔，也可以放這邊，但是記得在 index.js 內 import\nsass : 用來放切版用的 sass 檔，你可以自行管理裡面的目錄結構\npug : HTML 樣板檔案，可以自行設置不同的 layout 來繼承，也能製作共用的區塊來 include 等等，熟悉 pug 開發的人員應該比我還懂的怎麼使用\n\n\nWebpack 設定這裡我就只針對這次專案調整的部分說明，如果想知道更多細節，還是要去翻 webpack 上的說明。\n\nwebpack 基本設定檔webpack 在安裝後，需要自己產生一個設定檔，通常會是在專案目錄下新建一個 webpack.config.js 的檔案，而基本的內容會寫上如下：\nmodule.exports = &#123;  entry: &#x27;&#x27;,  output: &#x27;&#x27;,  module: &#123;    rules: []  &#125;,  plugins: []&#125;;\n\n\n進入點和上下文這裡介紹一下 entry 與 context，entry 顧名思義就是 webpack 要處理的 js 進入點，通常會在這裡開始把需要的套件再逐一 import 進來，而 context 是用來指定入口所處目錄的絕對路徑，之後可以給 entry 與 loader 套用。\n舉例來說：原本的 entry 路徑為 &lt;專案目錄&gt;/src/js/indes.js，但是因為我幾乎把所有開發用到的檔案都放到 src 目錄下，所以我可以使用 context 來指定以後再寫道 entry 或是 loader 的檔案路徑時，都從一個共同的絕對路徑再開始找，也就是 &lt;專案目錄&gt;/src\n所以再加入這兩項後，webpack 設定會變成如下：這裏使用到 path.resolve 來指定到專案目錄下 src 的目錄\nconst path = require(&#x27;path&#x27;);　　　module.exports = &#123;  context: path.resolve(__dirname, &#x27;src&#x27;),  entry: &#123;    index: &#x27;./js/index.js&#x27;  &#125;,  // ....&#125;\n\n\n輸出檔案指定這次的 bundle 後，輸出的檔案該如何配置。這邊透過 path 指定檔案輸出的絕對路徑，而 filename 用來指定輸出的檔名結構。經過調整後變成\nconst path = require(&#x27;path&#x27;);　　　module.exports = &#123;  // ...  output: &#123;    path: path.resolve(__dirname, &#x27;dist&#x27;),    filename: &#x27;./js/[name].js?[hash:8]&#x27;  &#125;,  // ....&#125;\n\n\nDevServer開發的過程中，還是需要一個可以即時預覽的 server 來顯示目前狀況，所以這裡使用 webpack-dev-server 這套件，所以需要手動安裝 npm install --save-dev webpack-dev-server 接著再到 webpack 設定內增加 devServer 的設定\nconst path = require(&#x27;path&#x27;);　　　module.exports = &#123;  // ....  devServer: &#123;    compress: true,    port: 3000  &#125;,  // ....&#125;\n\n\nPug 轉 HTML這次的重點之一，不過我這邊的解法也是去網路上找來的。主要是參考底下參考文章的第二篇，需要安裝三個套件 html-loader、pug-html-loader和html-webpack-plugin。\nnpm install --save-dev html-loader pug-html-loader html-webpack-plugin\n\n接著再 webpack.config.js 裡面設定調整如下：\nconst path = require(&#x27;path&#x27;);// 引入 html-webpack-plugin 套件const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);module.exports = &#123;  // ...  module: &#123;    rules: [      &#123;        test: /\\.pug$/,        use: [          &#123;            loader: &#x27;html-loader&#x27;,            options: &#123; minimize: false &#125;            // 不壓縮 HTML          &#125;,          &#123;            loader: &#x27;pug-html-loader&#x27;,            options: &#123; pretty: true &#125;            // 美化 HTML 的編排 (不壓縮HTML的一種)          &#125;        ]      &#125;,    ]  &#125;,  plugins: [    new HtmlWebpackPlugin(&#123;      template: &#x27;./pug/index.pug&#x27;,      filename: &#x27;index.html&#x27;,      inject: true,      chunks: [&#x27;index&#x27;],  // 根據 entry 的名字而定      minify: &#123;        sortAttributes: true,        collapseWhitespace: false, // 折疊空白字元就是壓縮Html        collapseBooleanAttributes: true, // 折疊布林值属性，例:readonly checked        removeComments: true, // 移除註釋        removeAttributeQuotes: true // 移除屬性的引號      &#125;    &#125;),  ]&#125;\n\n以上是只有一個 index.pug 檔需要轉換時，但實際上在切版時，肯定不會這麼簡單。當遇到多個 pug 檔需要轉換，這裡建議將要轉換為 html 的 pug 集中放到 /src/pug/ 下的第一層目錄，並且透過 glob 這工具抓取目錄下第一層的 pug 檔案後再用 forEach 的方式去撰寫 plugins 裡面的內容。所以可以改成下方這樣。\nconst path = require(&#x27;path&#x27;);const glob = require(&#x27;glob&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);// 將原本 module.exports 後的內容改寫道 config 變數內var config = &#123;  context: path.resolve(__dirname, &#x27;src&#x27;),  entry: &#123;    index: &#x27;./js/index.js&#x27;  &#125;,  output: &#123; //... &#125;,  devServer: &#123; // ... &#125;,  module: &#123;    rules: [      &#123;        test: /\\.pug$/,        use: [ // ... ]      &#125;    ]  &#125;,  plugins: [    // 將原本的 new HtmlWebpackPlugin 刪除  ]&#125;;// 透過 glob 找出所有 pug 檔後用 for 迴圈寫入 plugins 裡面glob.sync(&#x27;./src/pug/*.pug&#x27;).forEach((path) =&gt; &#123;  const start = path.indexOf(&#x27;/pug/&#x27;) + 5;  const end = path.length - 4;  const name = path.slice(start, end);  config.plugins.push(    new HtmlWebpackPlugin(&#123;      template: &#x27;./pug/&#x27; + name + &#x27;.pug&#x27;,      filename: name + &#x27;.html&#x27;,      inject: true,      chunks: [&#x27;index&#x27;],      minify: &#123;        sortAttributes: true,        collapseWhitespace: false,        collapseBooleanAttributes: true,        removeComments: true      &#125;    &#125;)  );&#125;);module.exports = config;\n\n\nSass rule為了讓 sass 能順利轉換成 css 並且可以在畫面上顯示，需要安裝至少三個 loader 插件與 node-sass、sass-loader、css-loader與style-loader，然後再設定檔內的 module 增加一個 rule\nnpm install --save-dev node-sass sass-loader css-loader style-loader\n\nconst path = require(&#x27;path&#x27;);// ...var config = &#123;  // ...  module: &#123;    rules: [      &#123;        test: /\\.pug$/,        use: // ...      &#125;,      &#123;        test: /\\.s[ac]ss$/i,        use: [          &#x27;style-loader&#x27;, // Creates `style` nodes from JS strings          &#x27;css-loader&#x27;, // Translates CSS into CommonJS          &#x27;sass-loader&#x27; // Compiles Sass to CSS        ]      &#125;    ]  &#125;&#125;;// ...module.exports = config;\n\n\nCSS rule因為這次專案用了 Bootstrap 4 的範例，所以直接把範例提供的 css 檔拿來用，所以會有外部 css 需要被載入與顯示，所以需要在 module 內的 rule 增加這個 loader\nconst path = require(&#x27;path&#x27;);// ...var config = &#123;  // ...  module: &#123;    rules: [      &#123;        test: /\\.pug$/,        // ...      &#125;,      &#123;        test: /\\.s[ac]ss$/i,        // ...      &#125;,      &#123;        test: /\\.css$/i,        use: [          &#x27;style-loader&#x27;, // Creates `style` nodes from JS strings          &#x27;css-loader&#x27; // Translates CSS into CommonJS        ]      &#125;,    ]  &#125;&#125;;// ...\n\n\nJS rule開發時如果在撰寫 js，相信大部分的人應該都會開始寫 ES6 甚至是 ES7 的一些語法了，所以需要多個 babel 來將這些語法轉回 ES5 讓瀏覽器能順利解析，所以會多上這個 rule，不過需要先安裝 @babel/core、babel-loader與@babel/preset-env\nnpm install --save-dev @babel/core @babel/preset-env babel-loader\n\n// ...var config = &#123;  // ...  module: &#123;    rules: [      &#123;        test: /\\.pug$/,        // ...      &#125;,      &#123;        test: /\\.s[ac]ss$/i,        // ...      &#125;,      &#123;        test: /\\.css$/i,        // ...      &#125;,      &#123;        test: /\\.js$/,        use: &#123;          loader: &#x27;babel-loader&#x27;,          options: &#123;            presets: [&#x27;@babel/preset-env&#x27;]          &#125;        &#125;      &#125;,    ]  &#125;&#125;;// ...\n\n\nimages 相關處理圖片的處理，也是參考別人的教學，依樣畫葫蘆的使用，不過因為是做樣板，所以實際上沒用到圖片，不過還是可以列出來讓有需要的人參考。需要安裝url-loader與image-webpack-loader\nnpm install --save-dev url-loader image-webpack-loader\n\n// ...var config = &#123;  // ...  module: &#123;    rules: [      &#123;        test: /\\.pug$/,        // ...      &#125;,      &#123;        test: /\\.s[ac]ss$/i,        // ...      &#125;,      &#123;        test: /\\.css$/i,        // ...      &#125;,      &#123;        test: /\\.js$/,        // ...      &#125;,      &#123;        test: /\\.(jpe?g|png|gif)$/,        use: [          &#123;            loader: &#x27;url-loader&#x27;,            options: &#123;              limit: 8192,              name: &#x27;[path][name].[ext]?[hash:8]&#x27;            &#125;          &#125;,          &#123;            loader: &#x27;image-webpack-loader&#x27;,            options: &#123;              mozjpeg: &#123;                progressive: true,                quality: 65              &#125;,              optipng: &#123;                enabled: false              &#125;,              pngquant: &#123;                quality: &#x27;65-90&#x27;,                speed: 4              &#125;,              gifsicle: &#123;                interlaced: false              &#125;            &#125;          &#125;        ]      &#125;    ]  &#125;&#125;;// ...\n\n\n靜態檔案處理與其他設定寫到這邊已經寫了好幾個小時，所以有點累了，最後一口氣寫完好了，剩下的幾個設定有\n\n靜態檔案搬移，使用 copy-webpack-plugin 插件\n每次 build 前的目錄清空，使用 clean-webpack-plugin\n加載 jQuery\b : 因為用到了 Bootstrap 4，所以還是需要 jQuery，這裡使用 webpack 本身的 ProvidePlugin\n\n需要先安裝copy-webpack-plugin、clean-webpack-plugin、jquery與bootstrap\nnpm install --save-dev copy-webpack-plugin clean-webpack-pluginnpm install --save jquery bootstrap\n\n所以設定檔會變成：\n// ...// 增加 webpack 方便之後取得 webpack.ProvidePlugin 插件const webpack = require(&#x27;webpack&#x27;);// 清除目錄插件const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;);// 資料搬移插件const CopyPlugin = require(&#x27;copy-webpack-plugin&#x27;);var config = &#123;  // ...  plugins: [    // 每次先清除前一次 build 的資料    new CleanWebpackPlugin(),    // 搬移靜態檔案    new CopyPlugin(&#123;      patterns: [        &#123; from: &#x27;css&#x27;, to: &#x27;css&#x27; &#125;,        &#123; from: &#x27;images&#x27;, to: &#x27;images&#x27; &#125;,        &#123; from: &#x27;assets&#x27;, to: &#x27;assets&#x27; &#125;      ]    &#125;),    // 載入 jQuery    new webpack.ProvidePlugin(&#123;      $: &#x27;jquery&#x27;,      jQuery: &#x27;jquery&#x27;    &#125;)  ]&#125;;// ...\n\n大致的設定內容都介紹一輪，完整的 webpack.config.js 可以去我的專案內查看，相差沒太多，但是怕日後忘記每個設定的內容再做什麼，所以趁著記憶猶新的時候，先記錄下來。\n\n參考文章\n如何用 Webpack 來打包 JavaScript、SCSS/CSS、HTML 網頁和任意檔案？\n在webpack中使用Pug產生Html\n如何設定 webpack 筆記\nVue-cli 透過 webpack 來加載使用 pug/scss 及 BootStrap4\n\n","title_tokenize":["使用","Webpack","製","作","前端","樣板","Pug","與","Sass","開發"],"content_tokenize":["前端","樣板","使用","Webpack","產生","專案","位置","用到","技術","開發環境","工具","安","裝","目錄架構","Webpack","設","定","webpack","基本","設","定","檔","進","入","點","上下文","輸","出","檔案","DevServer","Pug","轉","HTML","Sass","rule","CSS","rule","JS","rule","images","相關處理","靜態檔案處理與","設","定","參","考","文章","前端","樣板","使用","Webpack","產生","於","之前","做","過","前端","樣板實","太","過時","node","版本","幾","目前","已","經","差","太多","外","當時","v","4","x","現","v","12","x","前端","流程","處","理工","具","gulp","現","越來越","少","人","知道","時","代","眼淚啊","前端","真","日","新月","異","過","1","陣","子","學過","東西","漸漸","淘汰","當時還用","1","個現","幾","沒人","知道","bower","前端","套件","管理","工具","現","大家","應該","都","只","知道","npm","這東西吧","大概","從","去年","開始","想要","再弄","1","個","新的","前端","樣板","日","後","切版","需求","時候","使用","無奈","懶惰","加上","沒","切版","案子","停","滯沒動","作","最近","看到","女友","去","接","1","個","友谊","外包","案","使用","pug","sass","來","做","切版","不","過","完成","這個","小","工具","之前","實網","路上","應該","很多","類","專案","還","很多","好","前端","開發","工具","CodeKit","Prepros","Fire","app","工具","達","這些","要求","不","過這","次","當","作","練功","順便","熟习","一下","Webpack","設","定","雖然","大部分","也是","處複製貼","上","後","拼","湊","出","來","產物","不","過","也是","花","很多","時間","先","理解","再","抄","襲","效仿","底下","紀錄","一下","這","次","內容","專案","位置","https://github.com/SoarLin/pug-sass-template","用到","技術","Webpack","1","個強","大的","前端","打包","工具","雖然","版本","從","2","gt","4","過程","中","許多設","定","過程","不一定","相容","重","學","我想","應該","趨","近","於穩","定","Sass","CSS","preprocessor","雖然","Sass","不","過實際","上","我是","SCSS","語","法","來寫","看","不","順眼","實","自行","scss","改成","sass","Pug","HTML","樣板語言","前身","Jade","寫","來很精簡","還","很不","熟","只","現","繼續寫","EJS","可能","忘","差不多","開發環境紀錄這","次","專案開發時","環境","避免","後","個","套件","版本","差","異","太多","忘","該","回到","哪個","版本","來執行","node","v","12.18.2","npm","6.14.5","webpack","4.43","工具","安","裝","基本上","一定要","先","安","裝","node.js","與","npm","這","部份","麻煩","大家","先在","電腦","上","安","裝吧","Node.js","官網","然後","版本","盡","可能","不要","與","上述","相差","太多","很有可能","無","法","運","作","XD","npm","i","D","webpack","webpack","cli","先","安","裝","webpack","與","webpack","cli","npm","install","安","裝專案","需要","套件","目錄架構目錄結構","README","md","package","lock","json","package","json","src","assets","css","images","js","pug","sass","webpack","config","js","專案目錄","下","README","md","與","package","json","都","不是","本次","討論","重","點","主要","開發","檔案","都","放","src","目錄","下","webpack","打包","設","定都","寫","webpack","config","js","裡","面","大概","介紹","一下","src","目錄","下","結構","assets","用來","放置","靜態","文件","可用","來","放","字形","檔","fonts","SVG","檔案","非","圖","片","檔案","images","切版時偶爾會","需要","圖","片","檔案","用來","放","這邊","jpg","png","gif","css","額外","css","檔案","這","次","專案","使用","Bootstrap","範例","懶","重","頭寫","css","下","載","下","來","範例","css","放","這邊","並","頁","面","內載","入","js","主要","程式","進","入","點","index","js","放","這裡","需要","自行","客製化","js","檔","放","這邊","記","index","js","內","import","sass","用來","放","切版用","sass","檔","自行","管理","裡","面","目錄結構","pug","HTML","樣板檔案","自行","設置","不同的","layout","來繼承","製","作","共用","區塊來","include","熟习","pug","開發","人員應該","還懂","怎麼","使用","Webpack","設","定","這裡","只","針對這","次","專案調整","部","分","說明","想知道","更多","細節","還","去","翻","webpack","上","說明","webpack","基本","設","定","檔","webpack","安","裝後","需要","產生","1","個設","定","檔","通常","會","專案目錄","下","新建","1","個","webpack","config","js","檔案","基本的","內容會寫","上","以下","module","exports","123","entry","x","27","x","27","output","x","27","x","27","module","123","rules","125","plugins","125","進","入","點","上下文","這裡介紹","一下","entry","與","context","entry","顧","名","思義","webpack","要處理","js","進","入","點","通常","會","這裡開始","需要","套件","再","逐一","import","進來","context","用來","指定","入口","處目錄","絕對路徑","後","給","entry","與","loader","套用","舉例來說","本来","entry","路徑為","lt","專案目錄","gt","src","js","indes","js","為","幾","所有","開發","用到","檔案","都","放到","src","目錄","下","使用","context","來","指定","後再寫道","entry","loader","檔案路徑時","都","從","1","個","共同","絕對路徑再開始","找","也就是","lt","專案目錄","gt","src","再加","入","這兩項後","webpack","設","定","會變","成","以下","這裏","使用","path","resolve","來","指定","專案目錄","下","src","目錄","const","path","require","x","27","path","x","27","module","exports","123","context","path","resolve","dirname","x","27","src","x","27","entry","123","index","x","27","js","index","js","x","27","125","125","輸","出","檔案","指定","這","次","bundle","後","輸","出","檔案該","配置","這邊透過","path","指定","檔案輸","出","絕對路徑","filename","用來","指定","輸","出","檔","名","結構","經過調整後變","成","const","path","require","x","27","path","x","27","module","exports","123","output","123","path","path","resolve","dirname","x","27","dist","x","27","filename","x","27","js","name","js","hash","8","x","27","125","125","DevServer","開發","過程","中","還","需要","1","個","時預覽","server","來顯示","目前","狀況","這裡","使用","webpack","dev","server","這","套件","需要","手","動","安","裝","npm","install","save","dev","webpack","dev","server","接著再","webpack","設","定","內","增加","devServer","設","定","const","path","require","x","27","path","x","27","module","exports","123","devServer","123","compress","true","port","3000","125","125","Pug","轉","HTML","這","次","重","點","不","過","這邊","解法","也是","去","網","路上","找","來","主要","參","考","底下","參","考","文章","篇","需要","安","裝","3","個","套件","html","loader","pug","html","loader","html","webpack","plugin","npm","install","save","dev","html","loader","pug","html","loader","html","webpack","plugin","接著再","webpack","config","js","裡","面","設","定","調整","以下","const","path","require","x","27","path","x","27","引入","html","webpack","plugin","套件","const","HtmlWebpackPlugin","require","x","27","html","webpack","plugin","x","27","module","exports","123","module","123","rules","123","test","pug","use","123","loader","x","27","html","loader","x","27","options","123","minimize","false","125","不","壓縮","HTML","125","123","loader","x","27","pug","html","loader","x","27","options","123","pretty","true","125","美化","HTML","編","排","不","壓縮","HTML","1","種","125","125","125","plugins","new","HtmlWebpackPlugin","123","template","x","27","pug","index","pug","x","27","filename","x","27","index","html","x","27","inject","true","chunks","x","27","index","x","27","根據","entry","名字","定","minify","123","sortAttributes","true","collapseWhitespace","false","折疊","空","白字","元","壓縮","Html","collapseBooleanAttributes","true","折疊布林值","属性","例","readonly","checked","removeComments","true","移","註釋","removeAttributeQuotes","true","移","屬性","引號","125","125","125","以上","1","個","index","pug","檔","需要","轉換時","實際","上","切版時","肯定","不","會這麼簡單","當","遇到","多個","pug","檔","需要","轉換","這裡建議將要轉換為","html","pug","集中","放到","src","pug","下","1","層目錄","並","透過","glob","這","工具","抓取","目錄","下","第一","層","pug","檔案後","再用","forEach","方式","去","撰寫","plugins","裡","面","內容","改成","下方","這樣","const","path","require","x","27","path","x","27","const","glob","require","x","27","glob","x","27","const","HtmlWebpackPlugin","require","x","27","html","webpack","plugin","x","27","將","本来","module","exports","後","內容","改","寫道","config","變數內","var","config","123","context","path","resolve","dirname","x","27","src","x","27","entry","123","index","x","27","js","index","js","x","27","125","output","123","125","devServer","123","125","module","123","rules","123","test","pug","use","125","125","plugins","將","本来","new","HtmlWebpackPlugin","刪","125","透過","glob","找出","所有","pug","檔後用","for","迴","圈","寫","入","plugins","裡","面","glob","sync","x","27","src","pug","pug","x","27","forEach","path","gt","123","const","start","path","indexOf","x","27","pug","x","27","5","const","end","path","length","4","const","name","path","slice","start","end","config","plugins","push","new","HtmlWebpackPlugin","123","template","x","27","pug","x","27","name","x","27","pug","x","27","filename","name","x","27","html","x","27","inject","true","chunks","x","27","index","x","27","minify","123","sortAttributes","true","collapseWhitespace","false","collapseBooleanAttributes","true","removeComments","true","125","125","125","module","exports","config","Sass","rule","為","讓","sass","順利轉換","成","css","並","畫","面上","顯示","需要","安","裝","最少","3","個","loader","插","件","與","node","sass","sass","loader","css","loader","與","style","loader","然後再設","定","檔內","module","增加","1","個","rule","npm","install","save","dev","node","sass","sass","loader","css","loader","style","loader","const","path","require","x","27","path","x","27","var","config","123","module","123","rules","123","test","pug","use","125","123","test","s","ac","ss","i","use","x","27","style","loader","x","27","Creates","style","node","s","from","JS","strings","x","27","css","loader","x","27","Translates","CSS","into","CommonJS","x","27","sass","loader","x","27","Compiles","Sass","to","CSS","125","125","125","module","exports","config","CSS","rule","為這","次","專案用","Bootstrap","4","範例","直接","範例","提供","css","檔","來用","會","外部","css","需要","載","入","與顯示","需要","module","內","rule","增加","這個","loader","const","path","require","x","27","path","x","27","var","config","123","module","123","rules","123","test","pug","125","123","test","s","ac","ss","i","125","123","test","css","i","use","x","27","style","loader","x","27","Creates","style","node","s","from","JS","strings","x","27","css","loader","x","27","Translates","CSS","into","CommonJS","125","125","125","JS","rule","開發時","撰寫","js","相信","大部分","人應該","都","會開始寫","ES","6","ES","7","語","法","需要","多個","babel","來將這些語","法","轉回","ES","5","讓瀏覽器","順利","解析","會多","上","這個","rule","不","過","需要","先","安","裝","babel/core","babel","loader","與","babel/preset-env","npm","install","save","dev","babel/core","babel/preset-env","babel","loader","var","config","123","module","123","rules","123","test","pug","125","123","test","s","ac","ss","i","125","123","test","css","i","125","123","test","js","use","123","loader","x","27","babel","loader","x","27","options","123","presets","x","27","babel/preset-env&#x27","125","125","125","125","125","images","相關處理圖","片","處理","也是","參","考","別人","教學","依樣畫葫蘆","使用","不","過","為","做","樣板","實際","上","沒","用到","圖","片","不","過還","列出","來讓","需要","人參","考","需要","安","裝","url","loader","與","image","webpack","loader","npm","install","save","dev","url","loader","image","webpack","loader","var","config","123","module","123","rules","123","test","pug","125","123","test","s","ac","ss","i","125","123","test","css","i","125","123","test","js","125","123","test","jpe","g","png","gif","use","123","loader","x","27","url","loader","x","27","options","123","limit","8192","name","x","27","path","name","ext","hash","8","x","27","125","125","123","loader","x","27","image","webpack","loader","x","27","options","123","mozjpeg","123","progressive","true","quality","65","125","optipng","123","enabled","false","125","pngquant","123","quality","x","27","65","90","x","27","speed","4","125","gifsicle","123","interlaced","false","125","125","125","125","125","125","靜態檔案處理與","設","定","寫","這邊","已","經寫","好","幾個","小","時","點累","最","後","一口","氣寫","完好了","剩下","幾個設","定","靜態檔案","搬移","使用","copy","webpack","plugin","插件","每次","build","前","目錄","清","空","使用","clean","webpack","plugin","加","載","jQuery","\b","為","用到","Bootstrap","4","還","需要","jQuery","這裡","使用","webpack","本身","ProvidePlugin","需要","先","安","裝","copy","webpack","plugin","clean","webpack","plugin","jquery","與","bootstrap","npm","install","save","dev","copy","webpack","plugin","clean","webpack","pluginnpm","install","save","jquery","bootstrap","設","定","檔會變","成","增加","webpack","方便之","後","取得","webpack","ProvidePlugin","插件","const","webpack","require","x","27","webpack","x","27","清除","目錄","插","件","const","123","CleanWebpackPlugin","125","require","x","27","clean","webpack","plugin","x","27","資料","搬移","插件","const","CopyPlugin","require","x","27","copy","webpack","plugin","x","27","var","config","123","plugins","每次","先","清除","前","一次","build","資料","new","CleanWebpackPlugin","搬移","靜態檔案","new","CopyPlugin","123","patterns","123","from","x","27","css","x","27","to","x","27","css","x","27","125","123","from","x","27","images","x","27","to","x","27","images","x","27","125","123","from","x","27","assets","x","27","to","x","27","assets","x","27","125","125","載","入","jQuery","new","webpack","ProvidePlugin","123","x","27","jquery","x","27","jQuery","x","27","jquery","x","27","125","125","大致","設","定","內容","都","介紹","1","輪","完整的","webpack","config","js","去","專案內","查看","相差","沒","太多","怕","日","後忘記","個設","定","內容","再做","什麼","趁著記憶猶","新的","時候","先","記錄","下","來","參","考","文章","何用","Webpack","來","打包","JavaScript","SCSS","CSS","HTML","網頁","任意","檔案","webpack","中","使用","Pug","產生","Html","何設","定","webpack","筆記","Vue","cli","透過","webpack","來","加","載","使用","pug","scss","BootStrap","4"]},{"title":"使用 ESLint 自動修正 Vue 專案語法","url":"https://soarlin.github.io/2020/07/05/eslint-auto-fix/","content":"昨天在當工具人的時候，幫忙處理一個 vue 的前端專案，但是發現雖然對方有使用 eslint，但是似乎沒人遵守語法檢查的建議，都非常的隨性，實在是很沒一制性的專案。\n後來想到之前在開發 Nuxt.js 專案時，似乎會自動產生 eslint 修正的語法在 package.json 裡面，所以可以透過 npm 執行某個包含 eslint 自動修正的 script 來將一些語法檢查的錯誤做修正，不過我猜應該能修正的部分會有限制，有些可能還是需要人工介入判斷吧！但是至少可以先一些基本的語法修正。\n後來研究了一下 eslint 本身有提供 --fix 的參數可使用，不過不過這似乎主要針對 .js 檔的修正，如果是在開發 vue 專案時的 .vue 專案，就需要額外安裝套件了，基本可額外安裝 eslint-plugin-vuefix 這個套件，並且在 .eslintrc.js 檔裡面的 plugins 加上 vuefix\n操作步驟 :\n\n\n\n原本的 package.json 內，新增一個有自動修正的 script lint-fix\n\n&#123;  &quot;scripts&quot;: &#123;    // ....    &quot;lint&quot;: &quot;eslint --ext .js,.vue src test/unit test/e2e/specs&quot;,    &quot;lint-fix&quot;: &quot;eslint --fix --ext .js,.vue src test/unit test/e2e/specs&quot;,    // ...  &#125;&#125;\n\n\n安裝自動修正套件 eslint-plugin-vuefix\n\nnpm install --save eslint-plugin-vuefix\n\n\n在 .eslintrc.js 檔內新增使用插件名稱，如果 vue 專案本身有安裝 eslint-plugin-html 並且載入 .eslintrc.js，這會影響自動修正的插件執行，所以可以將該插件註解或是試著放到 vuefix 插件後面看看\n\nmodule.exports = &#123;  // ...  plugins: [    &#x27;vuefix&#x27;,    // &#x27;html&#x27;    // comment this plugin  ],  // ...&#125;\n\n\n接著執行新增的 script 來修正， npm run lint-fix 執行後，就大功告成了，不放心的可以在使用原本的 npm run lint 檢查是否還有語法需要修正\n\n我拿了目前電腦裡面，以前開發的專案來測試，一開始先執行 npm run lint，可以看到一堆語法有問題的提示，大多是字串用了雙引號(Strings must use singlequote)或是多了最後的逗號(Extra semicolon)的問題，以及一些其他問題\n接著透過修正的語法 npm run lint-fix 進行修正後，在使用 npm run lint 檢查，果然語法的問題都修正了！\n最後，開發 vue 專案的話，推薦可以使用 eslint-plugin-vue，對於 vue 專案的 Code Style 規範可以根據不同嚴謹程度來規範，當然也包含自動修正的功能，想知道更多細節，可以參考這篇介紹 : [Vue] 整合 Vue style guide, eslint-plugin-vue 和 VSCode\n","title_tokenize":["使用","ESLint","動","修正","Vue","專案語","法"],"content_tokenize":["昨天","當","工具","人","時候","幫忙處理","1","個","vue","前端","專案","發現雖然對","方","使用","eslint","恍如","沒人","語","法","檢","查","建議","都","非常","隨性","實","很沒","1","制性","專案","後來","想到","之前","開發","Nuxt","js","專案時","恍如","會","動產生","eslint","修正","語","法","package","json","裡","面","透過","npm","執行某個","包括","eslint","動","修正","script","來將","語","法","檢","查","錯誤","做","修正","不","過","猜應該","修正","部份","會","限制","可能","還","需要","人工","参与","判","斷吧","最少","先","基本的","語","法","修正","後來","研究","一下","eslint","本身","提供","fix","參數","使用","不","過","不","過這","恍如","主要","針對","js","檔","修正","開發","vue","專案時","vue","專案","需要","額外","安","裝","套件","基本","額外","安","裝","eslint","plugin","vuefix","這個","套件","並","eslintrc","js","檔裡","面","plugins","加上","vuefix","操作","步","驟","本来","package","json","內","新增","1","個","動","修正","script","lint","fix","123","quot","scripts","quot","123","quot","lint","quot","quot","eslint","ext","js","vue","src","test","unit","test","e","2","e","specs","quot","quot","lint","fix","quot","quot","eslint","fix","ext","js","vue","src","test","unit","test","e","2","e","specs","quot","125","125","安","裝","動","修正","套件","eslint","plugin","vuefix","npm","install","save","eslint","plugin","vuefix","eslintrc","js","檔內","新增","使用","插件","名","稱","vue","專案","本身","安","裝","eslint","plugin","html","並","載","入","eslintrc","js","這會影響","動","修正","插件","執行","將該","插件","註解","試著","放到","vuefix","插件","後","面","看看","module","exports","123","plugins","x","27","vuefix","x","27","x","27","html","x","27","comment","this","plugin","125","接著執行","新增","script","來","修正","npm","run","lint","fix","執行後","大功告成","不","放心的","使用","本来","npm","run","lint","檢","查","是否是","還","語","法","需要","修正","目前","電腦裡","面","之前","開發","專案來測試","1","開始","先","執行","npm","run","lint","看到","一堆","語","法","問題","提示","大多","字串","雙引號","Strings","must","use","singlequote","最","後","逗號","Extra","semicolon","問題","問題","接著透過","修正","語","法","npm","run","lint","fix","進行","修正","後","使用","npm","run","lint","檢","查","語","法","問題","都","修正","最","後","開發","vue","專案","話","推","薦","使用","eslint","plugin","vue","對於","vue","專案","Code","Style","規範","根據","不同","嚴謹","程度","來規範","當然","包括","動","修正","功能","想知道","更多","細節","參","考","這篇介紹","Vue","整合","Vue","style","guide","eslint","plugin","vue","VSCode"]},{"title":"MacOS 遇到 dyld: Library not loaded問題處理","url":"https://soarlin.github.io/2019/08/13/mac-library-not-loaded-%E5%95%8F%E9%A1%8C%E8%99%95%E7%90%86/","content":"\n\n\n使用 otool 工具檢查相依性\n使用 install_name_tool 修正 dylib 路徑\n\n\n\n\n最近在處理 PHP 翻譯檔的問題，好不容易將所有翻譯的資料放到 Onesky 上後，發現下載下來的 .po 檔，要轉成 .mo 檔時，遇到了奇怪的動態庫載入問題。後來迫不得已努力的去找相關資料來解決，好不容易找到一篇教學是我可以看得懂的了。\n我遇到的情況是在使用 msgfmt 指令將 gettext 使用到的翻譯檔 PO 轉成 MO 時，碰到下面的情況\n$&gt; msgfmt zoek.po -o zoek.modyld: Library not loaded: /usr/local/lib/libgettextsrc-0.19.8.dylib  Referenced from: /usr/local/bin/msgfmt  Reason: image not found[1]    89445 abort      /usr/local/bin/msgfmt zoek.po -o zoek.mo\n\n\n\n簡單的說就是 msgfmt 在運行時，有些相依的動態庫檔案找不到了，而第一個遇到的是 libgettextsrc 這個檔案，因為先前透過 homebrew 安裝 gettext 時，似乎已經更新到 0.20.1 的版本，而舊的 0.19.8 的動態庫檔案可能就因為這樣失效了，所以最簡單的作法就是把 msgfmt 相依的動態庫黨，路徑替換成 homebrew 安裝的新版本上。\n\n使用 otool 工具檢查相依性針對一個要執行的應用程式，macOS 本身似乎提供了一個工具可以檢查所有相依的檔案位置，那就是 otool 關於這工具的使用方式太多了，這邊只說我會用到的部分！\n檢查應用程式使用到的 libraries 檔案，指令 otool -L &lt;ApplicationName&gt;所以用來檢查 msgfmt 後可發現使用到了不少 dylib 檔案\n$&gt; otool -L /usr/local/bin/msgfmt/usr/local/bin/msgfmt:    /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1454.90.0)    /usr/local/lib/libgettextsrc-0.19.8.dylib (compatibility version 0.0.0, current version 0.0.0)    /usr/local/lib/libgettextlib-0.19.8.dylib (compatibility version 0.0.0, current version 0.0.0)    /usr/lib/libxml2.2.dylib (compatibility version 10.0.0, current version 10.9.0)    /usr/lib/libncurses.5.4.dylib (compatibility version 5.4.0, current version 5.4.0)    /usr/local/opt/libunistring/lib/libunistring.2.dylib (compatibility version 4.0.0, current version 4.0.0)    /usr/local/lib/libintl.9.dylib (compatibility version 11.0.0, current version 11.4.0)    /usr/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0)    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4)\n\n而一開始遇到的 libgettextsrc-0.19.8.dylib 這連結已經失效，所以需要手動替換成 homebrew 安裝 gettext 0.20.1 版本下的檔案，而透過 homebrew 安裝的程式，路徑大多位於 /usr/local/Cellar/ 下面，所以在下面找一下 gettext 後可以再看到裡面有 lib 的資料夾，而資料夾下應該就是這次所需要的相關的 dylib 檔案了\n\n使用 install_name_tool 修正 dylib 路徑install_name_tool &lt;OldPath&gt; &lt;NewPath&gt; &lt;ApplicationPath&gt;\n這時候我們可以使用 install_name_tool 這個指令來手動更換 dylib 檔案路徑，使用的方式大致上如上\n/usr/local/lib/libgettextsrc-0.19.8.dylib/usr/local/lib/libgettextlib-0.19.8.dylib/usr/local/lib/libintl.9.dylib\n而在修正 msgfmt 遇到的問題時，前後總共發現了上面三個 dylib 路徑遺失\ninstall_name_tool -change /usr/local/lib/libgettextsrc-0.19.8.dylib /usr/local/Cellar/gettext/0.20.1/lib/libgettextsrc-0.20.1.dylib /usr/local/bin/msgfmtinstall_name_tool -change /usr/local/lib/libgettextlib-0.19.8.dylib /usr/local/Cellar/gettext/0.20.1/lib/libgettextlib-0.20.1.dylib /usr/local/bin/msgfmtinstall_name_tool -change /usr/local/lib/libintl.9.dylib /usr/local/Cellar/gettext/0.20.1/lib/libintl.8.dylib /usr/local/bin/msgfmt\n所以使用 install_name_tool 修正的指令，大概就像上面這樣\n在替換完這些 dylib 後，就可以正常的使用 msgfmt 來轉換 po 檔成 mo 檔了\nmsgfmt oooo.po -o xxxx.mo\n\n沒想到 blog 隔了快一年才更新這麼一篇文章，好慘！從每月一篇到每季一篇，現在直接升級到每年一篇….XD\n","title_tokenize":["MacOS","遇到","dyld","Library","not","loaded","問題處理"],"content_tokenize":["使用","otool","工具","檢","查","相依","性","使用","install","name","tool","修正","dylib","路徑","最近","處理","PHP","翻","譯檔","問題","好不容易","將","所有","翻","譯","資料","放到","Onesky","上","後","發現","下","載","下","來","po","檔","要轉","成","mo","檔時","遇到","奇怪的","動態庫載","入","問題","後來","迫不得已","努力的","去","找","相關資料來解決","好不","容易","找到","一篇","教學","看","懂","遇到","情況","使用","msgfmt","指令","將","gettext","使用","翻","譯檔","PO","轉","成","MO","時","碰到","下面","情況","gt","msgfmt","zoek","po","o","zoek","modyld","Library","not","loaded","usr","local","lib","libgettextsrc","0.19.8","dylib","Referenced","from","usr","local","bin","msgfmt","Reason","image","not","found","1","89445","abort","usr","local","bin","msgfmt","zoek","po","o","zoek","mo","簡單","說","msgfmt","運行時","相依","動態庫檔案","找不到","第一","個","遇到","libgettextsrc","這個檔案","為","先前","透過","homebrew","安","裝","gettext","時","恍如","已","經","更新","0.20.1","版本","舊","0.19.8","動態庫檔案","可能","為這樣","失效","最","簡單","作法","msgfmt","相依","動態庫黨","路徑替換","成","homebrew","安","裝","新版","上","使用","otool","工具","檢","查","相依","性針對","1","個要執行","應用","程式","macOS","本身","恍如","提供","1","個","工具","檢","查","所有","相依","檔案","位置","那就是","otool","關於這","工具","使用","方式","太多","這邊","只","說","會","用到","部","分","檢","查應用","程式","使用","libraries","檔案","指令","otool","L","lt","ApplicationName","gt","用來檢","查","msgfmt","後","發現","使用","到了","很多","dylib","檔案","gt","otool","L","usr","local","bin","msgfmt","usr","local","bin","msgfmt","System","Library","Frameworks","CoreFoundation","framework","Versions","A","CoreFoundation","compatibility","version","150.0.0","current","version","1454.90.0","usr","local","lib","libgettextsrc","0.19.8","dylib","compatibility","version","0.0.0","current","version","0.0.0","usr","local","lib","libgettextlib","0.19.8","dylib","compatibility","version","0.0.0","current","version","0.0.0","usr","lib","libxml","2.2","dylib","compatibility","version","10.0.0","current","version","10.9.0","usr","lib","libncurses","5.4","dylib","compatibility","version","5.4.0","current","version","5.4.0","usr","local","opt","libunistring","lib","libunistring","2","dylib","compatibility","version","4.0.0","current","version","4.0.0","usr","local","lib","libintl","9","dylib","compatibility","version","11.0.0","current","version","11.4.0","usr","lib","libiconv","2","dylib","compatibility","version","7.0.0","current","version","7.0.0","usr","lib","libSystem","B","dylib","compatibility","version","1.0.0","current","version","1252.50.4","1","開始","遇到","libgettextsrc","0.19.8","dylib","這連結","已","經","失效","需要","手","動替換","成","homebrew","安","裝","gettext","0.20.1","版本","下","檔案","透過","homebrew","安","裝","程式","路徑","大多","位","於","usr","local","Cellar","下面","面","找","一下","gettext","後","再看","裡","面","lib","資料夾","資料夾","下","應該","這","次","需要","相關","dylib","檔案","使用","install","name","tool","修正","dylib","路徑","install","name","tool","lt","OldPath","gt","lt","NewPath","gt","lt","ApplicationPath","gt","這時候","們","使用","install","name","tool","這個","指令","來","手","動","更","換","dylib","檔案路徑","使用","方式","大致上","如上","usr","local","lib","libgettextsrc","0.19.8","dylib","usr","local","lib","libgettextlib","0.19.8","dylib","usr","local","lib","libintl","9","dylib","修正","msgfmt","遇到","問題時","前","後總","共","發現","上面","3","個","dylib","路徑遺失","install","name","tool","change","usr","local","lib","libgettextsrc","0.19.8","dylib","usr","local","Cellar","gettext","0.20.1","lib","libgettextsrc","0.20.1","dylib","usr","local","bin","msgfmtinstall","name","tool","change","usr","local","lib","libgettextlib","0.19.8","dylib","usr","local","Cellar","gettext","0.20.1","lib","libgettextlib","0.20.1","dylib","usr","local","bin","msgfmtinstall","name","tool","change","usr","local","lib","libintl","9","dylib","usr","local","Cellar","gettext","0.20.1","lib","libintl","8","dylib","usr","local","bin","msgfmt","使用","install","name","tool","修正","指令","大概","上面","這樣","替換完這些","dylib","後","正常的","使用","msgfmt","來轉換","po","檔","成","mo","檔","msgfmt","oooo","po","o","xxxx","mo","沒","想到","blog","隔","快","一年","才","更新","這麼","一篇","文章","好","慘","從","每月","一篇","每季","一篇","現","直接","升級","每一年","一篇","XD"]},{"title":"設定AWS Lambda開發環境且在VPC內能連到外部網路","url":"https://soarlin.github.io/2018/09/01/%E5%A6%82%E4%BD%95%E8%AE%93AWS-Lambda%E5%9C%A8VPC%E5%85%A7%E8%83%BD%E9%80%A3%E5%88%B0%E5%A4%96%E9%83%A8%E7%B6%B2%E8%B7%AF/","content":"\n目前需要 Lambda 在 VPC 下運作，才能連接到 VPC 下的 ElasticSearch，但是有需要有外連網路的功能\n\n最近開始在使用 AWS Lambda，為了能跟目前 server 以及 elasticsearch 整合運作，花了約三天的時間才弄得差不多，大概是資質有限吧！沒辦法遇到狀況很快釐清原因，雖然也跟過去沒有太多這方面經驗有關，總之還是把想要的流程串接起來了，謝天謝地！\nLambda Setup以前雖然有用過 lambda 開發過一些簡單的東西，可是通常僅限於直接在 lambda console 介面直接撰寫 node.js，唯一一次可以在本地端開發後上傳到 lambda 的小專案是使用別人包好的 aws-lambda-image 這個自動針對 S3 image resize/reduce 的套件，只能說真的挺好用的，幫忙推薦一下：\nAWS Lambda Image : https://github.com/ysugimoto/aws-lambda-image如果對於上傳到 S3 的圖片想另外做縮圖、壓縮，或是不同尺寸的圖片輸出時，我想這套件應該非常實用。\nMakefile如果電腦有安裝 aws-cli 的話，可以考慮參考 aws-lambda-image 專案裡面的 Makefile 檔案，是個很好的學習範本\n\n\n這裡擷取部分內容，資料來源：https://github.com/ysugimoto/aws-lambda-image/blob/master/Makefile\nlambda:\tnpm install .\t@echo &quot;Factory package files...&quot;      . . . . . . .\t@echo &quot;Create package archive...&quot;\t@cd build &amp;&amp; zip -rq aws-lambda-image.zip .\t@mv build/aws-lambda-image.zip ./uploadlambda: lambda\t@if [ -z &quot;$&#123;LAMBDA_FUNCTION_NAME&#125;&quot; ]; then (echo &quot;Please export LAMBDA_FUNCTION_NAME&quot; &amp;&amp; exit 1); fi\taws lambda update-function-code --function-name $&#123;LAMBDA_FUNCTION_NAME&#125; --zip-file fileb://aws-lambda-image.zipclean:\t@echo &quot;clean up package files&quot;\t@if [ -f aws-lambda-image.zip ]; then rm aws-lambda-image.zip; fi\t@rm -rf build/*\n\n\nmake lambda : 用來打包要準備上傳 lambda 的 zip 檔\nmake uploadlambda : 透過 aws-cli 的指令來上傳 zip 檔\nmake clean : 清除打包的資料\n\n而其中 $&#123;LAMBDA_FUNCTION_NAME&#125; 這個參數可以直接在環境中透過 export 的方式提前宣告，或是在執行 make 指令時，添加在後面\n// xxxxxxxxx 是 AWS Lambda 上的函式名稱export LAMBDA_FUNCTION_NAME=xxxxxxxxx// ==== OR =====make uploadlambda -e LAMBDA_FUNCTION_NAME=xxxxxxxxx\n\nClaudia.jsclaudia 這套的功能就是讓你發佈 node.js 專案到 AWS Lambda 用的，本身也提供了很多教學可以參考，教學範例:\n\nINSTALLING AND CONFIGURING CLAUDIA.JS\nHELLO WORLD AWS LAMBDA FUNCTION\nHELLO WORLD FROM API GATEWAY\nHELLO WORLD CHAT-BOT USING LAMBDA\nDEPLOYING A PROXY API\n\n然而 claudia 的一些操作指令，可以直接看 github 上的說明文件，但是我實在不想花太多時間一個一個慢慢摸索，所以一樣是參考 aws-lambda-image 這專案的 package.json 檔案，然後也只用到兩個指令\n\ncreate : 建立專案使用的指令，不過由於目前的專案有很多設定，所以我選擇手動在 AWS Lambda console 介面建立好函示，並且把相關設定弄好\nupdate : 專案更新後，重新打包上傳用的指令\n\n專案流程因為這次專案的流程，是 Server 發生某些需要更新搜尋引擎資料的事件時，先將事件送到 AWS SQS，然後再透過 SQS 觸發 Lambda 來更新 ElasticSearch 的內容，但是因為 ElasticSearch 是在 VPC 的環境內，所以 lambda 也要跟著放到 VPC 下，而 lambda 在更新資料的時候，需要透過 API 來跟 ECS 的 server 要資料，雖然 ECS 跟 lambda 都同樣在 VPC 下，可是 lambda 無法透過 private ip 來存取 API，所以最後解法是讓 lambda 可以從 VPC 內存取外部網路來發送 API，取回所需資料處理後再寫入 ElasticSearch 內。\n這麼說完好像是個很複雜的流程，不過大致上畫一下流程就如下圖。\n\nLambda在VPC內存取網路前面鋪成了這麼多，現在才要進入這次寫 blog 的重點，當初也是因為要處理這個流程，花了很久的時間才知道問題，然後才開始找這個方法。其實網路上已經有 AWS 專人教學的文章了，不過我還是想自己在寫一次，以我能理解的方式。\n參考教學：\n\nHow can I grant internet access to my VPC Lambda function?\nAWS Lambda: Enable Outgoing Internet Access within VPC\n\n第一篇文章裡面還有精美的影片講解，我想英文跟我一樣不好的人，在看完教學影片，應該也要理解個80%了。根據我實作的結論，大概需要滿足底下這些條件\n\nLambda 執行權限\nLambda 在 VPC 下的網際網路存取權限(Required)\nLambda 執行時寫入 cloudwatch log 的權限(Optional，不過一般專案建立都會有，這樣才能再 CloudWatch 下查看 log)\nLambda 接收 SQS message 的基本操作權限(非必要，只是因為我專案本身需要)\nLambda 在 VPC 內操作 ElasticSearch 的基本權限(非必要，只是因為我專案本身需要)\n\n\nLambda 網路設定\n位於 VPC 內\n兩個私有子網路(Private Subnet)\n安全群組傳出規則(Outbound rules)，連接埠 : 全部, 目的地 : 0.0.0.0/0\n\n\nVPC 設定\n一個 Public Subnet\n兩個 Private Subnet\n兩個 Route table，一個與 Public Subnet 關聯，一個與兩個 Private Subnet 關聯\nRoute table(with Public Subnet) 連接 Internet Gateway\n替 Public Subnet 建立 NAT Gateway，並指定一組 Elastic IP\nRoute table(with Private Subnet) 連接 NAT Gateway\n\n\n\nVPC 設定步驟底下的設定步驟，我只是照著教學影片來說明，如果有誤，麻煩再指正，感謝！\n建立三個 Subnet建立三個 Subnet，一個用來連接外部 Internet，另外兩個為內部私有 Subnet\n建立兩個 Route Table建立兩個 route table，之後一個用來設定連外，一個則是用來設定連內部 subnet 以及橋接用\nRoute table 關聯 Public Subnet將一個要設定外連規則的 route table 與 public subnet 關聯\nRoute table 關聯 Private Subnet將另一個 route table 與兩個內部 subnet 關聯\n建立 Internet Gateway建立 internet gateway 並與 VPC 關聯，這樣 VPC 才有外連的能力\n設定 Route table 外連規則將建立好的 internet gateway 給要設定外連的 route table 來設定外連的規則\n\n新增一個 route : 0.0.0.0/0 -&gt; igw-xxxxx\n\n\n建立 NAT Gateway建立 nat gateway 來橋接內部子網路與連外的子網路\n\n建立時，選擇 public subnet\n新增一個 Elastic IP (注意:每個 region 基本限制為五個 elastic ip)\n\n\n設定 Route table 橋接規則替關聯內部 subnet 的 route table 增加規則\n\n新增一個 route : 0.0.0.0/0 -&gt; nat-xxxxxx\n\n\nIAM 建立 Lambda 執行權限記得幫 Lambda 執行的角色增加 VPC 存取執行的權限\n\nLambda VPC 設定回到 Lambda 內，檢查一下 VPC 的設定，選擇兩個 private subnet\n\n底下是我自己畫的架構圖，不過沒有很確定這樣畫是不是正確，如果有人發現錯誤，麻煩再幫我指正，感謝！\n\n最後這些都做完後，可以利用底下的 code 檢查一下是否成功取得外部IP\nconst http = require(&#x27;http&#x27;);exports.handler = function(event, context, callback) &#123;  const option = &#123;    &quot;hostname&quot;: &quot;api.ipify.org&quot;,    &quot;path&quot;: &quot;/?format=JSON&quot;,    &quot;method&quot;: &quot;GET&quot;  &#125;;  callback(null, Request(option).    then((data) =&gt; &#123;      console.log(&#x27;IP = &#x27;, data);    &#125;).catch((err) =&gt; &#123;      console.error(err);    &#125;)  );&#125;;function Request(options) &#123;  return new Promise((resolve, reject) =&gt; &#123;    const req = http.request(options, (res) =&gt; &#123;      let body = &#x27;&#x27;;      // console.log(&#x27;Status:&#x27;, res.statusCode);      // console.log(&#x27;Headers:&#x27;, JSON.stringify(res.headers));      res.setEncoding(&#x27;utf8&#x27;);      res.on(&#x27;data&#x27;, (chunk) =&gt; body += chunk);      res.on(&#x27;end&#x27;, () =&gt; &#123;        // console.log(&#x27;Successfully processed HTTP response&#x27;);        // If we know it&#x27;s JSON, parse it        if (res.headers[&#x27;content-type&#x27;] === &#x27;application/json&#x27;) &#123;            body = JSON.parse(body);        &#125;        resolve(body);      &#125;);    &#125;);    req.on(&#x27;error&#x27;, (err) =&gt; &#123;        reject(err);    &#125;);    req.write(&#x27;&#x27;);    req.end();  &#125;);&#125;","title_tokenize":["設","定","AWS","Lambda","開發環境","VPC","內","連","外部","網路"],"content_tokenize":["目前","需要","Lambda","VPC","下","運","作","才能","連","接到","VPC","下","ElasticSearch","需要","外連網路","功能","最近","開始","使用","AWS","Lambda","為","目前","server","elasticsearch","整合","運","作","花","約","三天","時間","才","弄得","差不多","大概是","資質","有限","沒辦","法","遇到","狀況","很快","釐","清","缘由","雖然","過","去","沒","太多","這","方面","經驗","關","總","還","想要","流程","串接","來","謝天謝","Lambda","Setup","之前","雖然","有用","過","lambda","開發過","簡單","東西","通常","僅限於","直接","lambda","console","介面","直接","撰寫","node.js","唯一","一次","本地","端開發後","上","傳","lambda","小","專案","使用","別人","包","好的","aws","lambda","image","這個","動針對","S","3","image","resize","reduce","套件","只","說","真","挺好","幫忙","推","薦","一下","AWS","Lambda","Image","https://github.com/ysugimoto/aws-lambda-image","對於","上","傳","S","3","圖","片","想","做","縮圖","壓縮","不同","尺寸","圖","片","輸","出","時","我想","這","套件","應該","非常","實用","Makefile","電腦","安","裝","aws","cli","話","考","慮參","考","aws","lambda","image","專案裡","面","Makefile","檔案","個","很好","學習範","這裡擷","取","部","分","內容","資料來源","https://github.com/ysugimoto/aws-lambda-image/blob/master/Makefile","lambda","npm","install","echo","quot","Factory","package","files","quot","echo","quot","Create","package","archive","quot","cd","build","amp","amp","zip","rq","aws","lambda","image","zip","mv","build","aws","lambda","image","zip","uploadlambda","lambda","if","z","quot","123","LAMBDA","FUNCTION","NAME","125","quot","then","echo","quot","Please","export","LAMBDA","FUNCTION","NAME","quot","amp","amp","exit","1","fi","aws","lambda","update","function","code","function","name","123","LAMBDA","FUNCTION","NAME","125","zip","file","fileb","aws","lambda","image","zipclean","echo","quot","clean","up","package","files","quot","if","f","aws","lambda","image","zip","then","rm","aws","lambda","image","zip","fi","rm","rf","build","make","lambda","用來","打包","要準備","上","傳","lambda","zip","檔","make","uploadlambda","透過","aws","cli","指令","來","上","傳","zip","檔","make","clean","清除","打包","資料","中","123","LAMBDA","FUNCTION","NAME","125","這個參數","直接","環境","中","透過","export","方式","提早","宣布","執行","make","指令","時","添加","後","面","xxxxxxxxx","AWS","Lambda","上","函式","名","稱","export","LAMBDA","FUNCTION","NAME","xxxxxxxxx","OR","make","uploadlambda","e","LAMBDA","FUNCTION","NAME","xxxxxxxxx","Claudia","jsclaudia","這","套","功能","讓","發佈","node.js","專案","AWS","Lambda","本身","提供","很多","教學","參","考","教學範例","INSTALLING","AND","CONFIGURING","CLAUDIA","JS","HELLO","WORLD","AWS","LAMBDA","FUNCTION","HELLO","WORLD","FROM","API","GATEWAY","HELLO","WORLD","CHAT","BOT","USING","LAMBDA","DEPLOYING","A","PROXY","API","claudia","操作","指令","直接","看","github","上","說","明文","件","實","不想","花","太多","時間","1","個","1","個","渐渐","摸索","1","樣","參","考","aws","lambda","image","這專案","package","json","檔案","然後","只","用到","兩個","指令","create","建立","專案","使用","指令","不","過","於","目前","專案","很多","設","定","選擇","手","動","AWS","Lambda","console","介面","建立","好","函示","並","相關設","定","弄好","update","專案","更新","後","重新","打包","上","傳用","指令","專案","流程","為這","次","專案","流程","Server","發生","需要","更新","搜尋","引擎","資料","事件","時","先","將","事件","送到","AWS","SQS","然後再透過","SQS","觸發","Lambda","來","更新","ElasticSearch","內容","為","ElasticSearch","VPC","環境內","lambda","著","放到","VPC","下","lambda","更新","資料","時候","需要","透過","API","來","ECS","server","要資料","雖然","ECS","lambda","都","樣","VPC","下","lambda","無","法","透過","private","ip","來","存取","API","最","後","解法","讓","lambda","從","VPC","內","存取","外部","網路來發送","API","取回","需資料處理後再寫","入","ElasticSearch","內","這麼說","完好","像是","個很複雜","流程","不","過","大致上","畫","一下","流程","以下","圖","Lambda","VPC","內","存取","網路","前面","鋪","成","這麼多","現","才","要進","入","這","次","寫","blog","重","點","當初","也是","為要處理這個","流程","花","很久","時間","才","知道","問題","然後","才","開始","找","這個","方法","實網","路上","已","經","AWS","專人教學","文章","不","過","還","想","寫","一次","理解","方式","參","考","教學","How","can","I","grant","internet","access","to","my","VPC","Lambda","function","AWS","Lambda","Enable","Outgoing","Internet","Access","within","VPC","第一","篇文章","裡","面","還","精美的","影片","講解","我想","英文","1","樣","不好","人","看","完教學","影片","應該","理解","個","80%","根據","實","作","結論","大概","需要","滿","足底","下","這些條","件","Lambda","執行權限","Lambda","VPC","下","網際網路","存取","權限","Required","Lambda","執行時寫","入","cloudwatch","log","權限","Optional","不","過","專案","建立","都","會","這樣","才能","再","CloudWatch","下","查看","log","Lambda","接收","SQS","message","基本","操作","權限","非","必要","為","專案","本身","需要","Lambda","VPC","內","操作","ElasticSearch","基本","權限","非","必要","為","專案","本身","需要","Lambda","網路設","定","位","於","VPC","內","兩個","私有","子","網路","Private","Subnet","安","全","群組傳","出","規則","Outbound","rules","連接埠","全","部","目的地","0.0.0.0","0","VPC","設","定","1","個","Public","Subnet","兩個","Private","Subnet","兩個","Route","table","1","個與","Public","Subnet","關聯","1","個與兩個","Private","Subnet","關聯","Route","table","with","Public","Subnet","連接","Internet","Gateway","Public","Subnet","建立","NAT","Gateway","並","指定","1","組","Elastic","IP","Route","table","with","Private","Subnet","連接","NAT","Gateway","VPC","設","定","步","驟","底下","設","定","步","驟","只","著教學","影片","來說明","誤","麻煩再","指正","感謝","建立","3","個","Subnet","建立","3","個","Subnet","1","個用來連接","外部","Internet","兩個為內","部","私有","Subnet","建立","兩個","Route","Table","建立","兩個","route","table","後","1","個用來設","定","連外","1","個則","用來設","定","連內","部","subnet","橋接用","Route","table","關聯","Public","Subnet","將","1","個要設","定","外連規則","route","table","與","public","subnet","關聯","Route","table","關聯","Private","Subnet","將","另外一","個","route","table","與兩個內","部","subnet","關聯","建立","Internet","Gateway","建立","internet","gateway","並與","VPC","關聯","這樣","VPC","才","外連","能力","設","定","Route","table","外連規則將","建立","好的","internet","gateway","給要設","定","外連","route","table","來設","定","外連","規則","新增","1","個","route","0.0.0.0","0","gt","igw","xxxxx","建立","NAT","Gateway","建立","nat","gateway","來橋接內","部","子","網路與連外","子","網路","建立","時","選擇","public","subnet","新增","1","個","Elastic","IP","注意","個","region","基本","限制","為","5","個","elastic","ip","設","定","Route","table","橋接規則替關聯內","部","subnet","route","table","增加","規則","新增","1","個","route","0.0.0.0","0","gt","nat","xxxxxx","IAM","建立","Lambda","執行權限記","幫","Lambda","執行","角色","增加","VPC","存取","執行","權限","Lambda","VPC","設","定","回到","Lambda","內","檢","查","一下","VPC","設","定","選擇兩個","private","subnet","底下","畫","架構圖","不","過沒","很確","定","這樣畫","是否是","正","確","有人","發現錯誤","麻煩再幫","指正","感謝","最","後這些","都","做完","後","利用","底下","code","檢","查","一下","是否是","成功","取得","外部","IP","const","http","require","x","27","http","x","27","exports","handler","function","event","context","callback","123","const","option","123","quot","hostname","quot","quot","api","ipify","org","quot","quot","path","quot","quot","format","JSON","quot","quot","method","quot","quot","GET","quot","125","callback","null","Request","option","then","data","gt","123","console","log","x","27","IP","x","27","data","125","catch","err","gt","123","console","error","err","125","125","function","Request","options","123","return","new","Promise","resolve","reject","gt","123","const","req","http","request","options","res","gt","123","let","body","x","27","x","27","console","log","x","27","Status","x","27","res","statusCode","console","log","x","27","Headers","x","27","JSON","stringify","res","headers","res","setEncoding","x","27","utf","8","x","27","res","on","x","27","data","x","27","chunk","gt","body","chunk","res","on","x","27","end","x","27","gt","123","console","log","x","27","Successfully","processed","HTTP","response","x","27","If","we","know","it","x","27","s","JSON","parse","it","if","res","headers","x","27","content","type","x","27","x","27","application","json","x","27","123","body","JSON","parse","body","125","resolve","body","125","125","req","on","x","27","error","x","27","err","gt","123","reject","err","125","req","write","x","27","x","27","req","end","125","125"]},{"title":"Vue.Js 專案開發紀錄 Part 3","url":"https://soarlin.github.io/2018/08/12/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-3/","content":"距離上次寫這個開發紀錄，已經過了快一個月，都忘了當初寫的感覺，以及要記錄的東西有哪些了\naxios存取 API 的部分，基本上就是用 axios 來做 ajax，不過這次參考了某篇文章的做法，把 API 在傳送前跟接收後都做了一層共同的處理，因為在處理 CROS 的時候，每次 API 的 header 都有些相同的資訊要傳送，所以就另外抽出來實作，而接收端的話，就一起針對錯誤情況做些簡單的處理。\n所以另外寫了一個 interceptor.js 來處理，另外在發起 POST 的 request 時，如果 Content-Type 不是 application/x-www-form-urlencoded、multipart/form-data或text/plain，會變成 Preflighted 請求，變成在 POST 前會先有個 OPTION 的請求，後端在寫 Allow Methods 裡面，記得把 OPTIONS 加進去\n\nimport i18n from &#x27;@/i18n&#x27;import axios from &#x27;axios&#x27;// 判斷目前環境，來決定 API 網址import &#123; getAPIBaseUrl &#125; from &#x27;./helpers&#x27;　　/** * Config */axios.defaults.baseURL = getAPIBaseUrl()axios.defaults.timeout = 10000axios.defaults.transformRequest = (data) =&gt; &#123; return JSON.stringify(data) &#125;// header 資訊帶 cookie，但是後端不能設置 Access-Control-Allow-Origin: &#x27;*&#x27;,axios.defaults.withCredentials = trueaxios.defaults.headers = &#123;  &#x27;Accept&#x27;: &#x27;application/json&#x27;,  &#x27;Content-Type&#x27;: &#x27;application/json;charset=UTF-8&#x27;,  &#x27;Accept-Language&#x27;: i18n.locale&#125;　　/** * 發送前處理 */axios.interceptors.request.use(config =&gt; &#123;  return config&#125;, error =&gt; &#123;  console.group(&#x27;[Axios][Interceptor] Request Error&#x27;)  console.log(error)  console.groupEnd()  return Promise.reject(error.response)&#125;)　　/** * 發送後處理 */axios.interceptors.response.use(data =&gt; &#123;  return data.data&#125;, error =&gt; &#123;  console.group(&#x27;[Axios][Interceptor] Response Error&#x27;)  console.log(error)  console.groupEnd()  let errorMsg = error.message  if (error.response !== undefined) &#123;    errorMsg = error.response.data.message  &#125;  return Promise.reject(errorMsg)&#125;)export default axios\n\nmain.js整個專案最先被載入的檔案，基本上就是把所有該 package 起來的檔案都先 import 進來\nimport Vue from &#x27;vue&#x27;// 最外層頁面的 vue 檔import App from &#x27;./pages/App&#x27;// routerimport router from &#x27;./router&#x27;// Vueximport Vuex from &#x27;vuex&#x27;// Vue-axiosimport axios from &#x27;axios&#x27;import VueAxios from &#x27;vue-axios&#x27;　　// Semantic UI，這次專案用到的 CSS Frameworkimport &#x27;semantic-ui-css/semantic.min.css&#x27;import &#x27;semantic-ui-css/semantic.min.js&#x27;import &#x27;semantic-ui-calendar/dist/calendar.css&#x27;// custom semantic-ui-calendar js fileimport &#x27;./assets/semantic-ui-calendar/calendar.js&#x27;　　// vuex-storeimport store from &#x27;./store&#x27;// i18nimport i18n from &#x27;./i18n&#x27;// Swiperimport VueAwesomeSwiper from &#x27;vue-awesome-swiper&#x27;// Firebase Cloud Messagingimport firebase from &#x27;firebase/app&#x27;import &#x27;firebase/messaging&#x27;　　Vue.use(Vuex)// Vue-axiosVue.use(VueAxios, axios)// SwiperVue.use(VueAwesomeSwiper)　　Vue.config.productionTip = false　　// init Firebasefirebase.initializeApp(process.env.FIREBASE_CONFIG)// 為了方便使用，把 firebase messaging 寫到 Vue 的 prototype// Retrieve Firebase Messaging object, assign to Vue ObjectVue.prototype.$messaging = firebase.messaging()// Add the public key generated from the Firebase consoleVue.prototype.$messaging.usePublicVapidKey(process.env.VAPID_KEY)// Change server-worker.js register pathnavigator.serviceWorker.register(&#x27;/static/firebase-messaging-sw.js&#x27;)  .then((registration) =&gt; &#123;    Vue.prototype.$swRegistration = registration    Vue.prototype.$messaging.useServiceWorker(registration)  &#125;).catch(err =&gt; &#123;    console.log(err)  &#125;)　　new Vue(&#123;  el: &#x27;#app&#x27;,  i18n,  router,  store,  render: h =&gt; h(App)&#125;)\n\ntest其實有點猶豫該不該寫測試的東西，因為我的測試有點胡亂寫，想到啥寫啥，也沒有詳細的 unit test，似乎就只是針對 component 裡面的畫面跟 method 盡可能地把測試寫一輪，還沒有把所有情況都寫進去，感覺就是有寫有交代…XD，所以還滿想有人可以來指導一下，測試的部分該怎麼規劃跟實作才能算是比較完善的測試。\nunit專案的測試當初在建立的時候，選用 jest，使用的套件應該是 vue-jest，為了把測試的環境改到可以順利執行，當初也是花了好一番功夫，因為有用到 window.localStorage 以及 jquery 用法與 i18n 設定\nunit/setup.js\nimport Vue from &#x27;vue&#x27;import $ from &#x27;jquery&#x27;import &#x27;mock-local-storage&#x27; // 算是實作 localStorage 的行為並且複寫 global 與 window// 載入 jQueryglobal.$ = global.jQuery = $　　// 模擬 window.localStorageglobal.window = &#123;&#125;window.localStorage = global.localStorage// 預設用中文語系測試global.localStorage.setItem(&#x27;LANGUAGE&#x27;, &#x27;zh-TW&#x27;)　　Vue.config.productionTip = false\n\njest.conf.js 這隻只有稍微調整一些東西\nconst path = require(&#x27;path&#x27;)　　module.exports = &#123;  rootDir: path.resolve(__dirname, &#x27;../../&#x27;),  moduleFileExtensions: [    &#x27;js&#x27;,    &#x27;json&#x27;,    &#x27;vue&#x27;  ],  moduleNameMapper: &#123;    &#x27;^@/(.*)$&#x27;: &#x27;&lt;rootDir&gt;/src/$1&#x27;,    &#x27;\\\\.(css)$&#x27;: &#x27;&lt;rootDir&gt;/node_modules/jest-css-modules&#x27;  &#125;,  transform: &#123;    &#x27;^.+\\\\.js$&#x27;: &#x27;&lt;rootDir&gt;/node_modules/babel-jest&#x27;,    &#x27;.*\\\\.(vue)$&#x27;: &#x27;&lt;rootDir&gt;/node_modules/vue-jest&#x27;  &#125;,  testPathIgnorePatterns: [    &#x27;&lt;rootDir&gt;/test/e2e&#x27;  ],  snapshotSerializers: [&#x27;&lt;rootDir&gt;/node_modules/jest-serializer-vue&#x27;],  setupFiles: [&#x27;&lt;rootDir&gt;/test/unit/setup&#x27;],  // --&gt; Option &quot;mapCoverage&quot; has been removed, as it&#x27;s no longer necessary.  // mapCoverage: true,  coverageDirectory: &#x27;&lt;rootDir&gt;/test/unit/coverage&#x27;,  collectCoverageFrom: [    &#x27;src/**/*.&#123;js,vue&#125;&#x27;,    &#x27;!src/assets/**/*.js&#x27;,  // 這裏用來避免自己客製化的檔案被算入    &#x27;!src/main.js&#x27;,    &#x27;!src/router/index.js&#x27;,    &#x27;!**/node_modules/**&#x27;  ]&#125;\n\n然後進入測試 component 的部分，也是慢慢摸索出怎麼寫，先不管是否符合單元測試或整合測試，我還是先以能夠個別測試過 xxx.vue 的檔案為主，而測試的撰寫，可以參考Vue Test Unit\nXXXXX.sepc.js\nimport &#123; shallow, createLocalVue &#125; from &#x27;@vue/test-utils&#x27;import Vuex from &#x27;vuex&#x27;import VueI18n from &#x27;vue-i18n&#x27;import i18n from &#x27;@/i18n&#x27;import router from &#x27;@/router&#x27;import moment from &#x27;moment&#x27;　　import &#x27;semantic-ui-css/semantic.min.js&#x27;import &#x27;@/assets/semantic-ui-calendar/calendar&#x27;　　// Componentimport Component from &#x27;@/pages/&lt;path-to-component&gt;.vue&#x27;　　// Mixinimport tools from &#x27;@/mixin/tools&#x27;// Stubsimport TimePicker from &#x27;@/components/time-picker&#x27;const localVue = createLocalVue()localVue.use(Vuex)localVue.use(VueI18n)localVue.use(router)localVue.mixin(tools)　　describe(&#x27;Login.vue&#x27;, () =&gt; &#123;  let getters  let actions  let store  let wrapper　　  beforeEach(() =&gt; &#123;    // 元件內使用到 store 內的 getter    getters = &#123;      getXXXXXXX: () =&gt; &#x27;ooxxxx&#x27;    &#125;    // 元件內使用到 store 內的 actions    actions = &#123;      setOOXXXX: jest.fn()    &#125;    store = new Vuex.Store(&#123;      state: &#123;        loading: false,        lang: &#x27;zh-TW&#x27;      &#125;,      getters,      actions    &#125;)    stubs = &#123;      &#x27;time-picker&#x27;: TimePicker    &#125;    wrapper = shallow(Component, &#123; i18n, router, store, stubs, localVue &#125;)  &#125;)　　  it(&#x27;mounted &amp; computed test&#x27;, () =&gt; &#123;    ......  &#125;)&#125;)\n\n寫到最後，已經不曉得該怎麼寫了，總而言之就先把目前專案開發的一些事項筆記下來，雖然可能過兩年就不能再使用了，畢竟前端的技術推陳出新，一直有新工具跑出來，讓學習的人覺得困擾，很難再學一次吃好幾年了。\n","title_tokenize":["Vue","Js","專案開發紀錄","Part","3"],"content_tokenize":["距離","上次","寫這個開發紀錄","已","經過","快","1","個","月","都","忘","當初寫","感覺","要記錄","東西","axios","存取","API","部","分","基本上","axios","來","做","ajax","不","過這","次","參","考","篇文章","做法","API","傳送","前","接收","後","都","做","1","層","共同","處理","為","處理","CROS","時候","每次","API","header","都","相同","資訊要傳送","抽出","來實","作","接收","端","話","一起","針對錯誤情況","做","些簡單","處理","寫","1","個","interceptor","js","來處理","發","POST","request","時","Content","Type","不是","application","x","www","form","urlencoded","multipart","form","data","text","plain","會變","成","Preflighted","請","求","變","成","POST","前","會","先","個","OPTION","請","求","後端","寫","Allow","Methods","裡","面","記","OPTIONS","加","進","去","import","i","18","n","from","x","27","i","18","n","x","27","import","axios","from","x","27","axios","x","27","判","斷","目前","環境","來決","定","API","網址","import","123","getAPIBaseUrl","125","from","x","27","helpers","x","27","Config","axios","defaults","baseURL","getAPIBaseUrl","axios","defaults","timeout","10000","axios","defaults","transformRequest","data","gt","123","return","JSON","stringify","data","125","header","資訊帶","cookie","後端","不能","設置","Access","Control","Allow","Origin","x","27","x","27","axios","defaults","withCredentials","trueaxios","defaults","headers","123","x","27","Accept","x","27","x","27","application","json","x","27","x","27","Content","Type","x","27","x","27","application","json","charset","UTF","8","x","27","x","27","Accept","Language","x","27","i","18","n","locale","125","發送","前","處理","axios","interceptors","request","use","config","gt","123","return","config","125","error","gt","123","console","group","x","27","Axios","Interceptor","Request","Error","x","27","console","log","error","console","groupEnd","return","Promise","reject","error","response","125","發送後處理","axios","interceptors","response","use","data","gt","123","return","data","data","125","error","gt","123","console","group","x","27","Axios","Interceptor","Response","Error","x","27","console","log","error","console","groupEnd","let","errorMsg","error","message","if","error","response","undefined","123","errorMsg","error","response","data","message","125","return","Promise","reject","errorMsg","125","export","default","axios","main","js","整個專案","最早","載","入","檔案","基本上","所有","該","package","來","檔案","都","先","import","進來","import","Vue","from","x","27","vue","x","27","最","外層頁","面","vue","檔","import","App","from","x","27","pages","App","x","27","routerimport","router","from","x","27","router","x","27","Vueximport","Vuex","from","x","27","vuex","x","27","Vue","axiosimport","axios","from","x","27","axios","x","27","import","VueAxios","from","x","27","vue","axios","x","27","Semantic","UI","這","次","專案","用到","CSS","Frameworkimport","x","27","semantic","ui","css","semantic","min","css","x","27","import","x","27","semantic","ui","css","semantic","min","js","x","27","import","x","27","semantic","ui","calendar","dist","calendar","css","x","27","custom","semantic","ui","calendar","js","fileimport","x","27","assets","semantic","ui","calendar","calendar","js","x","27","vuex","storeimport","store","from","x","27","store","x","27","i","18","nimport","i","18","n","from","x","27","i","18","n","x","27","Swiperimport","VueAwesomeSwiper","from","x","27","vue","awesome","swiper","x","27","Firebase","Cloud","Messagingimport","firebase","from","x","27","firebase","app","x","27","import","x","27","firebase","messaging","x","27","Vue","use","Vuex","Vue","axiosVue","use","VueAxios","axios","SwiperVue","use","VueAwesomeSwiper","Vue","config","productionTip","false","init","Firebasefirebase","initializeApp","process","env","FIREBASE","CONFIG","為","方便","使用","firebase","messaging","寫","Vue","prototype","Retrieve","Firebase","Messaging","object","assign","to","Vue","ObjectVue","prototype","messaging","firebase","messaging","Add","the","public","key","generated","from","the","Firebase","consoleVue","prototype","messaging","usePublicVapidKey","process","env","VAPID","KEY","Change","server","worker","js","register","pathnavigator","serviceWorker","register","x","27","static","firebase","messaging","sw","js","x","27","then","registration","gt","123","Vue","prototype","swRegistration","registration","Vue","prototype","messaging","useServiceWorker","registration","125","catch","err","gt","123","console","log","err","125","new","Vue","123","el","x","27","app","x","27","i","18","n","router","store","render","h","gt","h","App","125","test","實","點猶豫該","不","該寫測試","東西","為","測試","點胡亂寫","想到","啥寫啥","沒","詳細","unit","test","恍如","只","針對","component","裡","面","畫","面","method","盡","可能","測試寫","1","輪","還沒","有情","況","都","寫進","去","感覺","寫","交代","XD","還滿想","有人","來指導","一下","測試","部份","該怎麼規劃","實","作","才能","算是","較","完善","測試","unit","專案","測試當初","建立","時候","選用","jest","使用","套件","應該","vue","jest","為","測試","環境","改","順利執行","當初","也是","花","好","工夫","為","有用","window","localStorage","jquery","用法","與","i","18","n","設","定","unit","setup","js","import","Vue","from","x","27","vue","x","27","import","from","x","27","jquery","x","27","import","x","27","mock","local","storage","x","27","算是","實","作","localStorage","行為並","複寫","global","與","window","載","入","jQueryglobal","global","jQuery","模擬","window","localStorageglobal","window","123","125","window","localStorage","global","localStorage","預設用","中文","語系測試","global","localStorage","setItem","x","27","LANGUAGE","x","27","x","27","zh","TW","x","27","Vue","config","productionTip","false","jest","conf","js","這隻","只","稍微","調整","東西","const","path","require","x","27","path","x","27","module","exports","123","rootDir","path","resolve","dirname","x","27","x","27","moduleFileExtensions","x","27","js","x","27","x","27","json","x","27","x","27","vue","x","27","moduleNameMapper","123","x","27","x","27","x","27","lt","rootDir","gt","src","1","x","27","x","27","css","x","27","x","27","lt","rootDir","gt","node","modules","jest","css","modules","x","27","125","transform","123","x","27","js","x","27","x","27","lt","rootDir","gt","node","modules","babel","jest","x","27","x","27","vue","x","27","x","27","lt","rootDir","gt","node","modules","vue","jest","x","27","125","testPathIgnorePatterns","x","27","lt","rootDir","gt","test","e","2","e","x","27","snapshotSerializers","x","27","lt","rootDir","gt","node","modules","jest","serializer","vue","x","27","setupFiles","x","27","lt","rootDir","gt","test","unit","setup","x","27","gt","Option","quot","mapCoverage","quot","has","been","removed","as","it","x","27","s","no","longer","necessary","mapCoverage","true","coverageDirectory","x","27","lt","rootDir","gt","test","unit","coverage","x","27","collectCoverageFrom","x","27","src","123","js","vue","125","x","27","x","27","src","assets","js","x","27","這裏用來","避免","客製化","檔案","算入","x","27","src","main","js","x","27","x","27","src","router","index","js","x","27","x","27","node","modules","x","27","125","然後進","入","測試","component","部","分","也是","渐渐","摸索","出","怎麼寫","先","是否是","符合","單","元","測試","整合","測試","還","先","夠個別測試過","xxx","vue","檔案為主","測試","撰寫","參","考","Vue","Test","Unit","XXXXX","sepc","js","import","123","shallow","createLocalVue","125","from","x","27","vue/test-utils&#x27","import","Vuex","from","x","27","vuex","x","27","import","VueI","18","n","from","x","27","vue","i","18","n","x","27","import","i","18","n","from","x","27","i","18","n","x","27","import","router","from","x","27","router","x","27","import","moment","from","x","27","moment","x","27","import","x","27","semantic","ui","css","semantic","min","js","x","27","import","x","27","assets","semantic","ui","calendar","calendar","x","27","Componentimport","Component","from","x","27","pages","lt","path","to","component","gt","vue","x","27","Mixinimport","tools","from","x","27","mixin","tools","x","27","Stubsimport","TimePicker","from","x","27","components","time","picker","x","27","const","localVue","createLocalVue","localVue","use","Vuex","localVue","use","VueI","18","n","localVue","use","router","localVue","mixin","tools","describe","x","27","Login","vue","x","27","gt","123","let","getters","let","actions","let","store","let","wrapper","beforeEach","gt","123","元件","內","使用","store","內","getter","getters","123","getXXXXXXX","gt","x","27","ooxxxx","x","27","125","元件","內","使用","store","內","actions","actions","123","setOOXXXX","jest","fn","125","store","new","Vuex","Store","123","state","123","loading","false","lang","x","27","zh","TW","x","27","125","getters","actions","125","stubs","123","x","27","time","picker","x","27","TimePicker","125","wrapper","shallow","Component","123","i","18","n","router","store","stubs","localVue","125","125","it","x","27","mounted","amp","computed","test","x","27","gt","123","125","125","寫","最","後","已","經","不","曉","該怎麼寫","總","先","目前","專案開發","事項筆記","下","來","雖然","可能","過兩","年","不能","再","使用","畢","竟","前端","技術","推","陳","出新","1","直","新","工具","跑出","來","讓學習","人覺","困","擾","很難再學","一次","吃","好","幾","年"]},{"title":"Vue.Js 專案開發紀錄 Part 2","url":"https://soarlin.github.io/2018/07/22/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-2/","content":"mixin 內容這裡是以前的習慣養成的，其實不一定是個好作法，我會將某些 .vue 裡面，可以共用的 method 或是某些比較獨立的 method 抽出來另外做成 mixin 然後在 import 來用，雖然立意良好，但實際執行上，有時會變成把一個很大的 .vue 檔抽出部分 method 放去 mixin 來使用。\npages 內容這裡才是放我主要網站頁面架構的 vue 元件，目前分成四個目錄以及一個 Home.vue 與 App.vue 檔\nApp.vue這是原本專案建立時產生的 vue 檔，基本上所有內容都在從這裡面產生，底下的範例雖然會透過判斷 getLoading 來切換 loading 與顯示畫面，不過我後來實際開發時，把每個頁面或是每個區塊 loading 又另外做處理，所以最外層這個 loading 就沒再用了\n\n&lt;template&gt;  &lt;div v-if=&quot;getLoading&quot; class=&quot;ui active inverted dimmer&quot;&gt;    &lt;div class=&quot;ui text loader&quot;&gt;Loading&lt;/div&gt;  &lt;/div&gt;  &lt;router-view class=&quot;body&quot; /&gt;&lt;/template&gt;&lt;script&gt;import &#123; mapGetters &#125; from &#x27;vuex&#x27;export default &#123;  name: &#x27;App&#x27;,  data () &#123;    return &#123;    &#125;  &#125;,  computed: &#123;    ...mapGetters([      &#x27;getLoading&#x27;    ])  &#125;,  created () &#123;    console.log(&#x27;App created&#x27;)  &#125;,  mounted () &#123;  &#125;&#125;&lt;/script&gt;&lt;style lang=&quot;sass&quot;&gt;.body  margin: 0  padding: 0  width: 100%  height: 100%&lt;/style&gt;\n\n整個 App.vue 裡面主要就放一個 &lt;router-view /&gt;，讓 vue-router 來處理要渲染的內容，一開始的頁面是根目錄 /，所以會依據 routes 裡設定 path 為 / 來載入頁面，而這頁就是 Home.vue，所以簡單來說 App.vue 就是包住整個 route 要渲染的內容，而一開始渲染 / 這個路徑的檔案\nrouter 內容這部分才是重點之一，畢竟過去開發 vue.js 的經驗都是某個頁面內需要複雜操作的時候，才將該區塊改寫成 vue.js，然後載入頁面的時候一起把 build 好的 js 載入使用，而這次真的要靠 vue.js 來架構整個網站的路徑，所以也是第一次學習怎麼寫前端 route\n使用 vue-router Vue.js 官方的路由管理器，底下例子會用到\n\nHTML5 History Mode\nNested Routes 嵌套路由\nRoute Meta Fields(路由元信息) 用來判斷是否需要驗證用戶登入狀態\nNavigation Guards 的 Global Guards，用來作用戶登入檢查\n\nimport Vue from &#x27;vue&#x27;import Router from &#x27;vue-router&#x27;import store from &#x27;../store/index&#x27;import Home from &#x27;@/pages/Home&#x27;　　　// Auth: Login, ResetPasswordimport Login from &#x27;@/pages/auth/login&#x27;　　　// Product Pageimport Products from &#x27;@/pages/products/products-root&#x27;import ProductsWeekly from &#x27;@/pages/products/products-weekly&#x27;import ProductsMonthly from &#x27;@/pages/products/products-monthly&#x27;　　　Vue.use(Router)　　　const router = new Router(&#123;  mode: &#x27;history&#x27;,  routes: [    &#123;      path: &#x27;/&#x27;,      name: &#x27;Home&#x27;,      component: Home,      meta: &#123; requiresAuth: true &#125;,      children: [        &#123;          path: &#x27;products&#x27;,          name: &#x27;Products&#x27;,          component: Products,          meta: &#123; requiresAuth: true &#125;,          children: [            &#123;              path: &#x27;weekly&#x27;,              name: &#x27;ProductsWeekly&#x27;,              component: ProductsWeekly,              meta: &#123; requiresAuth: true &#125;            &#125;,            &#123;              path: &#x27;monthly&#x27;,              name: &#x27;ProductsMonthly&#x27;,              component: ProductsMonthly,              meta: &#123; requiresAuth: true &#125;            &#125;          ]        &#125;      ]    &#125;,    &#123;      path: &#x27;/login&#x27;,      name: &#x27;Login&#x27;,      component: Login,      meta: &#123; requiresAuth: false &#125;    &#125;,    // 當 url path 不符合 router 表的時候，預設轉址到    // 順序一定要最後面    &#123; path: &#x27;/*&#x27;, redirect: &#x27;/login&#x27; &#125;  ]&#125;)const isLogged = function () &#123;  let storeLoggedIn = store.getters.getLoggedIn  let sessionLoggedIn = sessionStorage.getItem(&#x27;LoggedIn&#x27;)  return storeLoggedIn || sessionLoggedIn&#125;router.beforeEach((to, from, next) =&gt; &#123;  console.log(&#x27;to=&#x27;, to.fullPath, &#x27;| from=&#x27;, from.fullPath)  if (to.matched.some(record =&gt; record.meta.requiresAuth) &amp;&amp; !isLogged()) &#123;    // 如果 router 轉跳的頁面需要驗證 requiresAuth: true    // 尚未登入時，導向 login 頁面, 網址帶入 redirect，以便登入後重新導向    next(&#123;      path: &#x27;/login&#x27;,      query: &#123; redirect: to.fullPath &#125;    &#125;)  &#125; else &#123;    next() // 往下繼續執行  &#125;&#125;)export default router\n\nstore 內容這也是主要重點之一，Vue.js 的狀態管理模式 vuex 相關的檔案都放在這邊了，開發過程中需要搭配 devtools extension 的 Chrome 插件來使用，包保事半功倍\n目錄結構目前的目錄結構如下，為了功能細分，所以有拆出 modules，以及 root.js 來放切換語系等功能\nsrc/store├── index.js├── modules│   ├── auth.js│   ├── notify.js│   ├── orders.js│   ├── products.js│   ├── resources.js│   └── token.js└── root.js\n\nindex.jsindex.js 的內容大致如下：\nimport Vue from &#x27;vue&#x27;import Vuex from &#x27;vuex&#x27;　　　// rootimport &#123; state, actions, mutations, getters &#125; from &#x27;./root.js&#x27;　　　// modulesimport auth from &#x27;./modules/auth&#x27;import products from &#x27;./modules/products&#x27;　　　Vue.use(Vuex)　　　const debug = process.env.NODE_ENV !== &#x27;production&#x27;　　　export default new Vuex.Store(&#123;  // root  state,  actions,  mutations,  getters,  // 整理過的 modules  modules: &#123;    auth,    products,  &#125;,  strict: debug&#125;)\n\nroot.js而 root.js 放了些 global 使用的 state 與比較重要的語系切換設定，這裡只列出切換語言的相關程式碼\n// 為了設定語系引入 Vueimport i18n from &#x27;@/i18n&#x27;　　　export const types = &#123;  SET_LANGUAGE: &#x27;SET_LANGUAGE&#x27;,&#125;　　　export const state = &#123;  lang: localStorage.getItem(&#x27;LANGUAGE&#x27;) || &#x27;zh-TW&#x27;&#125;　　　export const getters = &#123;  getLanguage: state =&gt; state.lang,&#125;　　　export const actions = &#123;  setLanguage (&#123; commit &#125;, lang) &#123;    commit(types.SET_LANGUAGE, lang)  &#125;,&#125;　　　export const mutations = &#123;  [types.SET_LANGUAGE] (state, setlang) &#123;    state.lang = setlang    localStorage.setItem(&#x27;LANGUAGE&#x27;, setlang)    // 改變全域語系設定    i18n.locale = state.lang  &#125;&#125;\n\n所以在 vue component 切換語系時，只要呼叫 setLanguage 就好\nchangeLanguage (value) &#123;  this.$store.dispatch(&#x27;setLanguage&#x27;, value)&#125;\n\nmodules而其他 store 模組，大致上如下:\nconst state = &#123;  payload: null&#125;　　　const getters = &#123;  getPayload: state =&gt; state.payload&#125;　　　const actions = &#123;  acitonName (&#123; commit &#125;, payload) &#123;    commit(mutationFunc, payload)  &#125;&#125;　　　const mutations = &#123;  mutationFunc (state, payload) &#123;    state.payload = payload  &#125;,&#125;　　　export default &#123;  state,  getters,  actions,  mutations&#125;\n\n雖然看起來都只是把寫過的 code 貼上來，畢竟也是當初花了不少時間寫的，雖然有資料可以參考，參考的資料都是比較精簡的，真的要應用到專案裡，還是有很多需要自己調整的部分，做這個紀錄也只是為了之後有跡可循可以自己參考用\n未完…待續….\n","title_tokenize":["Vue","Js","專案開發紀錄","Part","2"],"content_tokenize":["mixin","內容這裡","之前","習慣養","成","實","不一定","個","好","作法","會將","vue","裡","面","共用","method","較獨立","method","抽出","來","做成","mixin","然後","import","來用","雖然","立意","良好","實際執行","上","時會變","成","1","個","很大的","vue","檔","抽出","部","分","method","放","去","mixin","來","使用","pages","內容這裡","才是","放","主要","網站頁","面","架構","vue","元件","目前","分成","4","個目錄","1","個","Home","vue","與","App","vue","檔","App","vue","這","本来","專案","建立","時產生","vue","檔","基本上","所有","內容","都","從這裡","面","產生","底下","範例雖然會透過","判","斷","getLoading","來切換","loading","與顯示畫","面","不","過","後來實際開發時","個頁","面","個區塊","loading","做","處理","最","外層這個","loading","沒","再用","lt","template","gt","lt","div","v","if","quot","getLoading","quot","class","quot","ui","active","inverted","dimmer","quot","gt","lt","div","class","quot","ui","text","loader","quot","gt","Loading","lt","div","gt","lt","div","gt","lt","router","view","class","quot","body","quot","gt","lt","template","gt","lt","script","gt","import","123","mapGetters","125","from","x","27","vuex","x","27","export","default","123","name","x","27","App","x","27","data","123","return","123","125","125","computed","123","mapGetters","x","27","getLoading","x","27","125","created","123","console","log","x","27","App","created","x","27","125","mounted","123","125","125","lt","script","gt","lt","style","lang","quot","sass","quot","gt","body","margin","0","padding","0","width","100%","height","100%","lt","style","gt","整個","App","vue","裡","面","主要","放","1","個","lt","router","view","gt","讓","vue","router","來處理要","渲染","內容","1","開始","頁","面","根目錄","會依據","routes","裡設","定","path","為","來載","入","頁","面","這頁","Home","vue","簡單來說","App","vue","包住","整個","route","渲染","內容","1","開始","渲染","這個路徑","檔案","router","內容這","部份","才是","重","點","畢","竟","過","去","開發","vue","js","經驗","都是","某個頁","面","內","需要","複雜","操作","時候","才","將該區塊","改","寫","成","vue","js","然後載","入","頁","面","時候","一起","build","好的","js","載","入","使用","這","次","真","vue","js","來架構整個網站","路徑","也是","第一次","學習怎麼寫","前端","route","使用","vue","router","Vue","js","官方","路由","管理器","底下","例子","會","用到","HTML","5","History","Mode","Nested","Routes","嵌套","路由","Route","Meta","Fields","路由","元","信息","用來","判","斷","是否是","需要","驗證用戶","登","入","狀態","Navigation","Guards","Global","Guards","用來","作用","戶","登","入","檢","查","import","Vue","from","x","27","vue","x","27","import","Router","from","x","27","vue","router","x","27","import","store","from","x","27","store","index","x","27","import","Home","from","x","27","pages","Home","x","27","Auth","Login","ResetPasswordimport","Login","from","x","27","pages","auth","login","x","27","Product","Pageimport","Products","from","x","27","pages","products","products","root","x","27","import","ProductsWeekly","from","x","27","pages","products","products","weekly","x","27","import","ProductsMonthly","from","x","27","pages","products","products","monthly","x","27","Vue","use","Router","const","router","new","Router","123","mode","x","27","history","x","27","routes","123","path","x","27","x","27","name","x","27","Home","x","27","component","Home","meta","123","requiresAuth","true","125","children","123","path","x","27","products","x","27","name","x","27","Products","x","27","component","Products","meta","123","requiresAuth","true","125","children","123","path","x","27","weekly","x","27","name","x","27","ProductsWeekly","x","27","component","ProductsWeekly","meta","123","requiresAuth","true","125","125","123","path","x","27","monthly","x","27","name","x","27","ProductsMonthly","x","27","component","ProductsMonthly","meta","123","requiresAuth","true","125","125","125","125","123","path","x","27","login","x","27","name","x","27","Login","x","27","component","Login","meta","123","requiresAuth","false","125","125","當","url","path","不符合","router","表","時候","預設轉址","順序","一定要","最","後","面","123","path","x","27","x","27","redirect","x","27","login","x","27","125","125","const","isLogged","function","123","let","storeLoggedIn","store","getters","getLoggedIn","let","sessionLoggedIn","sessionStorage","getItem","x","27","LoggedIn","x","27","return","storeLoggedIn","sessionLoggedIn","125","router","beforeEach","to","from","next","gt","123","console","log","x","27","to","x","27","to","fullPath","x","27","from","x","27","from","fullPath","if","to","matched","some","record","gt","record","meta","requiresAuth","amp","amp","isLogged","123","router","轉跳","頁","面","需要","驗證","requiresAuth","true","还没有","登","入","時","導","login","頁","面","網址帶","入","redirect","登","入","後","重新","導","next","123","path","x","27","login","x","27","query","123","redirect","to","fullPath","125","125","125","else","123","next","往下","繼續執行","125","125","export","default","router","store","內容這","也是","主要","重","點","Vue","js","狀態","管理","模式","vuex","相關","檔案","都","放","這邊","開發過程","中","需要","搭配","devtools","extension","Chrome","插","件","來","使用","包","保","事半功倍","目錄結構","目前","目錄結構","以下","為","功能","細","分","拆","出","modules","root","js","來","放","切換語系","功能","src","store","index","js","modules","auth","js","notify","js","orders","js","products","js","resources","js","token","js","root","js","index","jsindex","js","內容","大致","以下","import","Vue","from","x","27","vue","x","27","import","Vuex","from","x","27","vuex","x","27","rootimport","123","state","actions","mutations","getters","125","from","x","27","root","js","x","27","modulesimport","auth","from","x","27","modules","auth","x","27","import","products","from","x","27","modules","products","x","27","Vue","use","Vuex","const","debug","process","env","NODE","ENV","x","27","production","x","27","export","default","new","Vuex","Store","123","root","state","actions","mutations","getters","整理","過","modules","modules","123","auth","products","125","strict","debug","125","root","js","root","js","放","些","global","使用","state","與","較","重要的","語系切換設","定","這裡","只","列出","切換語言","相關","程式","碼","為","設","定","語系","引入","Vueimport","i","18","n","from","x","27","i","18","n","x","27","export","const","types","123","SET","LANGUAGE","x","27","SET","LANGUAGE","x","27","125","export","const","state","123","lang","localStorage","getItem","x","27","LANGUAGE","x","27","x","27","zh","TW","x","27","125","export","const","getters","123","getLanguage","state","gt","state","lang","125","export","const","actions","123","setLanguage","123","commit","125","lang","123","commit","types","SET","LANGUAGE","lang","125","125","export","const","mutations","123","types","SET","LANGUAGE","state","setlang","123","state","lang","setlang","localStorage","setItem","x","27","LANGUAGE","x","27","setlang","改","變","全域","語系設","定","i","18","n","locale","state","lang","125","125","vue","component","切換語系時","呼唤","setLanguage","好","changeLanguage","value","123","this","store","dispatch","x","27","setLanguage","x","27","value","125","modules","store","模組","大致上","以下","const","state","123","payload","null","125","const","getters","123","getPayload","state","gt","state","payload","125","const","actions","123","acitonName","123","commit","125","payload","123","commit","mutationFunc","payload","125","125","const","mutations","123","mutationFunc","state","payload","123","state","payload","payload","125","125","export","default","123","state","getters","actions","mutations","125","雖然","看","來","都","只","寫過","code","貼","上","來","畢","竟","也是","當初花","很多","時間寫","雖然","資料","參","考","參","考","資料","都是","較精簡","真","要應","用到","專案裡","還","很多","需要","調整","部份","做","這個紀錄","為","後","跡","循","參","考","未完","續"]},{"title":"Vue.js 專案開發紀錄 Part 1","url":"https://soarlin.github.io/2018/07/22/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-1/","content":"頭一次用 Vue.js 來開發整個網站的專案，雖然還沒全部做完，還是先來做一下至目前為止的一些記錄，提供日後有需要的時候可以參考。專案是使用 vue-cli 3.0 版本產生的，環境所需 Node &gt;=8.，目前本機環境 node.js v6.9.5，因為有舊專案的需求，所以不敢直接更新上去，所以使用 nvm 來安裝不同版本的 node.js\n初始化專案指令\nvue init webpack &lt;project-name&gt;\n\n// 這裏 project-name 以 vue-hello 為例? Project name vue-hello? Project description A Vue.js project? Author Soar &lt;soar.lin@gmail.com&gt;? Vue build standalone? Install vue-router? Yes? Use ESLint to lint your code? Yes? Pick an ESLint preset Standard? Set up unit tests Yes? Pick a test runner jest? Setup e2e tests with Nightwatch? Yes? Should we run `npm install` for you after the project has been created? (recommended) (Use arrow keys) yarn   vue-cli · Generated &quot;vue-hello&quot;.# Installing project dependencies ...# ========================yarn install v1.3.2info No lockfile found.[1/5] 🔍  Validating package.json...[2/5] 🔍  Resolving packages........[3/5] 🚚  Fetching packages...[##############################################################################################------------------------] 975/1223   vue-cli · Generated &quot;vue-hello&quot;.# Installing project dependencies ...[4/5] 🔗  Linking dependencies...[5/5] 📃  Building fresh packages...success Saved lockfile.✨  Done in 68.73s.Running eslint --fix to comply with chosen preset rules...# ========================yarn run v1.3.2$ eslint --ext .js,.vue src test/unit test/e2e/specs --fix✨  Done in 2.24s.# Project initialization finished!# ========================To get started:  cd vue-hello  npm run devDocumentation can be found at https://vuejs-templates.github.io/webpack\n\n專案目錄演進\n綠色框框的部分，隨著專案持續開發下去，內容越來越多，也持續在做些目錄的調整，雖然覺得還可以改得更好，不過目前專案就一人開發，所以我覺得還行就這麼繼續下去了。\nassets 內容assets 的內容主要都用來放些程式在編譯時，會共用到的檔案，由於不想把圖檔一起做編譯，所以後來都移到 /static/images/ 下了，而 semantic-ui-calendar 則是因為手動調整了一些這個套件的內容，雖然發了 pull request，不過該專案的作者似乎不太想理我…Orz，所以只好每次編譯都得另外載入自己修改的 js 檔\n而 /assets/sass/ 下目前放著兩個檔案，每次 vue component 編譯時，皆會預先載入 resources.sass，然後再透過 resources.sass 來 import common.sass，至於修改方式在上一篇文章有寫道\n\nresources.sass : 用來定義CSS顏色變數，mixin function，media query 語法等等\ncommon.sass : 用來撰寫一些客製化的共通元件 style，如：sidebar, modal, button …等\n\n// resources.sass　　　/* Colors */$greeny-blue: #34aeab$grapefruit: #fc5857$flat-blue: #398eab$denim: #366474....@mixin ellipsis($line:1)  text-overflow: ellipsis  overflow: hidden  @if $line == 1    white-space: nowrap  @else    display: -webkit-box    -webkit-line-clamp: $line    -webkit-box-orient: vertical@mixin size($w, $h:$w, $bdrs:0)  width: $w  height: $h  border-radius: $bdrs@mixin flex($jc:center, $ai:center)  display: flex  justify-content: $jc  align-items: $ai/* large desktop */$desktop-lg-min: 1200px;/* normal desktop range */$desktop-max:    1199px;$desktop-min:     992px;/* tablet range */$tablet-max:      991px;$tablet-min:      768px;$mobile-max:      767px;$mobile-min:      480px;@mixin lg-desktop  @media screen and (min-width: $desktop-lg-min)    @content@mixin desktop  @media screen and (max-width: $desktop-max)    @content@mixin tablet  @media screen and (max-width: $tablet-max)    @content@mixin phone  @media screen and (max-width: $mobile-max)    @content@mixin phoneV  @media screen and (max-width: $mobile-min)    @content/* margin-top 10~100 */@for $i from 1 through 10  .mt#&#123;$i&#125;0    margin-top: $i * 10px/* margin-bottom 10~100 */@for $i from 1 through 10  .mb#&#123;$i&#125;0    margin-bottom: $i * 10px@import &#x27;./common.sass&#x27;\n\ncomponents 內容原本會將每個頁面的 .vue 檔放在這裡，做了一陣子後覺得，頁面歸頁面，這目錄下還是放些單純一點的元件，事實證明好像沒什麼差別，單純就是自己爽就好，目前這裡放了些某些畫面上會使用到的元件，有個小型客製化的時間選擇器，用來選擇每間隔 15 分鐘的時間，另外的是畫面的 sidebar 內容，sidebar 內容其實做了很多東西，不過由於不算是完整頁面，還是被我歸類到這目錄下了\nhelpers 內容之前不曉得在哪裡看到有個教學用了這樣的目錄，然後裡面主要是定義一些變數讓整個專案來使用，很想學習這樣的做法，不過目前有點東施效顰吧！裡面也沒放幾個變數，一個是 CDN 路徑，一個是 Object hasOwnProperty 的檢查，不過另外寫了一個取得目前執行環境所用到的 API 路徑，以及一堆時間計算、字串處理的 function\nimport moment from &#x27;moment&#x27;　　　const helpers = &#123;  getParameterByName (name, url) &#123;    if (!url) url = window.location.href    name = name.replace(/[[\\]]/g, &#x27;\\\\$&amp;&#x27;)    let regex = new RegExp(&#x27;[?&amp;|#]&#x27; + name + &#x27;(=([^&amp;#]*)|&amp;|#|$)&#x27;)    let results = regex.exec(url)    if (!results) return null    if (!results[2]) return &#x27;&#x27;    return decodeURIComponent(results[2].replace(/\\+/g, &#x27; &#x27;))  &#125;,  isEmpty (obj) &#123;    // null and undefined are &quot;empty&quot;    if (obj == null) return true    // Assume if it has a length property with a non-zero value    // that that property is correct.    if (obj.length &gt; 0) return false    if (obj.length === 0) return true    // If it isn&#x27;t an object at this point    // it is empty, but it can&#x27;t be anything *but* empty    // Is it empty?  Depends on your application.    if (typeof obj !== &#x27;object&#x27;) return true    // Otherwise, does it have any properties of its own?    // Note that this doesn&#x27;t handle    // toString and valueOf enumeration bugs in IE &lt; 9    for (var key in obj) &#123;      if (hasOwnProperty.call(obj, key)) return false    &#125;    return true  &#125;,  getCurrentTime (format) &#123;    return moment().format(format)  &#125;,  getNextDate (format) &#123;    return moment().add(1, &#x27;days&#x27;).format(format)  &#125;,  getPrevDate (format) &#123;    return moment().subtract(1, &#x27;days&#x27;).format(format)  &#125;,  nl2br (str, isXhtml) &#123;    var breakTag = (isXhtml || typeof isXhtml === &#x27;undefined&#x27;) ? &#x27;&lt;br /&gt;&#x27; : &#x27;&lt;br&gt;&#x27;    return (str + &#x27;&#x27;).replace(/([^&gt;\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, &#x27;$1&#x27; + breakTag + &#x27;$2&#x27;)  &#125;,  thousandComma (number) &#123;    let num = number.toString()    let pattern = /(-?\\d+)(\\d&#123;3&#125;)/    while (pattern.test(num)) &#123;      num = num.replace(pattern, &#x27;$1,$2&#x27;)    &#125;    return num  &#125;&#125;export default helpers\n\ni18n 內容顧名思義就是用來放多語系的檔案，當初為了把多語系的部分搞定也是四處找資料，花了不少時間改好自己用的樣子\n目前使用的 vue-i18n的v.7.6版，參考文件\ni18n 目錄如下：\nsrc/i18n├── index.js└── languages    ├── en-US.json    ├── ja-JP.json    ├── zh-CN.json    └── zh-TW.json\n\nindex.js 內容\nimport Vue from &#x27;vue&#x27;// Vuex-i18nimport VueI18n from &#x27;vue-i18n&#x27;// i18nimport zhTW from &#x27;./languages/zh-TW.json&#x27;import zhCN from &#x27;./languages/zh-CN.json&#x27;import jaJP from &#x27;./languages/ja-JP.json&#x27;import enUS from &#x27;./languages/en-US.json&#x27;// Vuex-i18nVue.use(VueI18n)const messages = &#123;  &#x27;zh-TW&#x27;: zhTW,  &#x27;zh-CN&#x27;: zhCN,  &#x27;ja-JP&#x27;: jaJP,  &#x27;en-US&#x27;: enUS&#125;// 1.檢查 localStorage 語系// 2.檢查瀏覽器語系// 3.預設英文語系let locale = localStorage.getItem(&#x27;LANGUAGE&#x27;) || navigator.language || &#x27;en-US&#x27;const i18n = new VueI18n(&#123;  locale,  fallbackLocale: &#x27;zh-TW&#x27;,  messages&#125;)export default i18n\n\n而 languages 下的檔案內容，以 zh-TW.json 為例\n&#123;  &quot;shortMonths&quot;: [&quot;1月&quot;, &quot;2月&quot;, &quot;3月&quot;, &quot;4月&quot;, &quot;5月&quot;, &quot;6月&quot;, &quot;7月&quot;, &quot;8月&quot;, &quot;9月&quot;, &quot;10月&quot;, &quot;11月&quot;, &quot;12月&quot;],  &quot;longMonths&quot;: [&quot;一月&quot;, &quot;二月&quot;, &quot;三月&quot;, &quot;四月&quot;, &quot;五月&quot;, &quot;六月&quot;, &quot;七月&quot;, &quot;八月&quot;, &quot;九月&quot;, &quot;十月&quot;, &quot;十一月&quot;, &quot;十二月&quot;],  &quot;shortDays&quot;: [&quot;日&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;],  &quot;longDays&quot;: [&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;],  &quot;天&quot;: &quot;天&quot;,  &quot;時&quot;: &quot;時&quot;,  &quot;分&quot;: &quot;分&quot;,  &quot;小時&quot;: &quot;小時&quot;,  &quot;分鐘&quot;: &quot;分鐘&quot;,  &quot;確定&quot;: &quot;確定&quot;,  &quot;取消&quot;: &quot;取消&quot;,  &quot;關閉&quot;: &quot;關閉&quot;,  &quot;儲存&quot;: &quot;儲存&quot;,  &quot;上一步&quot;: &quot;上一步&quot;,  &quot;下一步&quot;: &quot;下一步&quot;,  &quot;消費稅 X%&quot;: &quot;消費稅 &#123;0&#125;%&quot;&#125;\n\n而在 .vue 檔內使用時，範例如下：\n&lt;template&gt;  &lt;p&gt;日期：&#123;&#123; displayToday &#125;&#125;&lt;/p&gt;  &lt;!-- ... --&gt;  &lt;button&gt;&#123;&#123; $t(&#x27;確定&#x27;) &#125;&#125;&lt;/button&gt;  &lt;!-- ... --&gt;  &lt;p&gt;&#123;&#123; $t(&#x27;消費稅 X%&#x27;, [tax]) &#125;&#125;&lt;/p&gt;  &lt;!-- ... --&gt;&lt;/template&gt;&lt;script&gt;import moment from &#x27;moment&#x27;export default &#123;  data () &#123;    return &#123;      tax: 8    &#125;  &#125;,  computed: &#123;    displayToday () &#123;      let yyyy = moment().year()      let mm = moment().month()      let dd = moment().date()      let weekday = moment().day()      // 2018年7月22(日)      return yyyy + &#x27;年&#x27; + this.$i18n.t(&#x27;shortMonths&#x27;)[mm] + dd + &#x27;日&#x27; + &#x27;(&#x27; + this.$i18n.t(&#x27;shortDays&#x27;)[weekday] + &#x27;)&#x27;    &#125;  &#125;&#125;&lt;/script&gt;\n\n因為要寫的東西太多，所以決定偷懶分成不同 Part 來寫\n","title_tokenize":["Vue","js","專案開發紀錄","Part","1"],"content_tokenize":["頭","一次","Vue","js","來開發整個網站","專案","雖然還沒","全","部","做完","還","先","來","做","1","下至","目前","為止","記錄","提供","日","後","需要","時候","參","考","專案","使用","vue","cli","3.0","版本","產生","環境","需","Node","gt","8","目前","機環境","node.js","v","6.9.5","為","舊專案","需求","不敢","直接","更新","上去","使用","nvm","來","安","裝","不同","版本","node.js","初始化","專案","指令","vue","init","webpack","lt","project","name","gt","這裏","project","name","vue","hello","為例","Project","name","vue","hello","Project","description","A","Vue","js","project","Author","Soar","lt","soar.lin@gmail.com&gt","Vue","build","standalone","Install","vue","router","Yes","Use","ESLint","to","lint","your","code","Yes","Pick","an","ESLint","preset","Standard","Set","up","unit","tests","Yes","Pick","a","test","runner","jest","Setup","e","2","e","tests","with","Nightwatch","Yes","Should","we","run","npm","install","for","you","after","the","project","has","been","created","recommended","Use","arrow","keys","yarn","vue","cli","Generated","quot","vue","hello","quot","Installing","project","dependencies","yarn","install","v","1.3.2","info","No","lockfile","found","1","5","🔍","Validating","package","json","2","5","🔍","Resolving","packages","3","5","🚚","Fetching","packages","975","1223","vue","cli","Generated","quot","vue","hello","quot","Installing","project","dependencies","4","5","🔗","Linking","dependencies","5","5","📃","Building","fresh","packages","success","Saved","lockfile","✨","Done","in","68.73","s","Running","eslint","fix","to","comply","with","chosen","preset","rules","yarn","run","v","1.3.2","eslint","ext","js","vue","src","test","unit","test","e","2","e","specs","fix","✨","Done","in","2.24","s","Project","initialization","finished","To","get","started","cd","vue","hello","npm","run","devDocumentation","can","be","found","at","https://vuejs-templates.github.io/webpack","專案目錄演進","綠色","框框","部份","隨著專案","持","續開發","下去","內","容越","來越多","持","續","做","些目錄","調整","雖然覺","還","改","更好","不","過","目前","專案","1","人開發","覺","還行","這麼繼續","下去","assets","內容","assets","內容","主要","都","用來","放","些","程式","編譯時","會","共","用到","檔案","於","不想","圖檔","一起","做","編譯","後來","都","移到","static","images","下","semantic","ui","calendar","則","為","手","動調整","這個","套件","內容","雖然發","pull","request","不","過該專案","作者","恍如","不","太","想理","Orz","只好","每次","編譯","都","載","入","修改","js","檔","assets","sass","下","目前","放","著兩個檔案","每次","vue","component","編譯時","皆會預","先","載","入","resources","sass","然後再透過","resources","sass","來","import","common","sass","至於","修改","方式","上","一篇","文章","寫道","resources","sass","用來","定","義","CSS","顏色變數","mixin","function","media","query","語","法","common","sass","用來撰寫","客製化","共通","元件","style","sidebar","modal","button","resources","sass","Colors","greeny","blue","34","aeab","grapefruit","fc","5857","flat","blue","398","eab","denim","366474....@mixin","ellipsis","line","1","text","overflow","ellipsis","overflow","hidden","if","line","1","white","space","nowrap","else","display","webkit","box","webkit","line","clamp","line","webkit","box","orient","vertical","mixin","size","w","h","w","bdrs","0","width","w","height","h","border","radius","bdrs@mixin","flex","jc","center","ai","center","display","flex","justify","content","jc","align","items","ai","large","desktop","desktop","lg","min","1200","px","normal","desktop","range","desktop","max","1199","px","desktop","min","992","px","tablet","range","tablet","max","991","px","tablet","min","768","px","mobile","max","767","px","mobile","min","480","px","mixin","lg","desktop","media","screen","and","min","width","desktop","lg","min","content@mixin","desktop","media","screen","and","max","width","desktop","max","content@mixin","tablet","media","screen","and","max","width","tablet","max","content@mixin","phone","media","screen","and","max","width","mobile","max","content@mixin","phoneV","media","screen","and","max","width","mobile","min","content","margin","top","10","100","for","i","from","1","through","10","mt","123","i","125","0","margin","top","i","10","px","margin","bottom","10","100","for","i","from","1","through","10","mb","123","i","125","0","margin","bottom","i","10","px","import","x","27","common","sass","x","27","components","內容","原","會將","個頁","面","vue","檔","放","這裡","做","1","陣","子","後覺","頁","面","歸頁","面","這目錄","下","還","放","些單純","1","點","元件","事實證明","好","沒什麼","差","別","單純","爽","好","目前","這裡","放","些","畫","面上","會","使用","元件","個","小型","客製化","時間選擇器","用來選擇","間隔","15","分","鐘","時間","畫","面","sidebar","內容","sidebar","內容","實","做","很多","東西","不","過","於","不","算是","完全","頁","面","還","歸類","這目錄","下","helpers","內容","之前","不","曉","哪裡","看到","個教學用","這樣","目錄","然後裡","面","主要","定","義","變數讓整個專案來","使用","很想","學習這樣","做法","不","過","目前","點東施效顰吧","裡","面","沒","放","幾個變數","1","個","CDN","路徑","1","個","Object",null,"檢","查","不","過","寫","1","個","取","目前","執行環境","用到","API","路徑","一堆","時間計算","字串","處理","function","import","moment","from","x","27","moment","x","27","const","helpers","123","getParameterByName","name","url","123","if","url","url","window","location","href","name","name","replace","g","x","27","amp","x","27","let","regex","new","RegExp","x","27","amp","x","27","name","x","27","amp","amp","x","27","let","results","regex","exec","url","if","results","return","null","if","results","2","return","x","27","x","27","return","decodeURIComponent","results","2","replace","g","x","27","x","27","125","isEmpty","obj","123","null","and","undefined","are","quot","empty","quot","if","obj","null","return","true","Assume","if","it","has","a","length","property","with","a","non","zero","value","that","that","property","is","correct","if","obj","length","gt","0","return","false","if","obj","length","0","return","true","If","it","isn","x","27","t","an","object","at","this","point","it","is","empty","but","it","can","x","27","t","be","anything","but","empty","Is","it","empty","Depends","on","your","application","if","typeof","obj","x","27","object","x","27","return","true","Otherwise","does","it","have","any","properties","of","its","own","Note","that","this","doesn","x","27","t","handle",null,"and",null,"enumeration","bugs","in","IE","lt","9","for","var","key","in","obj","123","if",null,"call","obj","key","return","false","125","return","true","125","getCurrentTime","format","123","return","moment","format","format","125","getNextDate","format","123","return","moment","add","1","x","27","days","x","27","format","format","125","getPrevDate","format","123","return","moment","subtract","1","x","27","days","x","27","format","format","125","nl","2","br","str","isXhtml","123","var","breakTag","isXhtml","typeof","isXhtml","x","27","undefined","x","27","x","27","lt","br","gt","x","27","x","27","lt","br","gt","x","27","return","str","x","27","x","27","replace","gt","r","n","r","n","n","r","r","n","g","x","27","1","x","27","breakTag","x","27","2","x","27","125","thousandComma","number","123","let","num","number",null,"let","pattern","d","d","123","3","125","while","pattern","test","num","123","num","num","replace","pattern","x","27","1","2","x","27","125","return","num","125","125","export","default","helpers","i","18","n","內容顧","名","思義","用來","放","多語系","檔案","當初為","多語系","部份","搞定","也是","4","處","找","資料","花","很多","時間","改","好","樣","子","目前","使用","vue","i","18","n","v","7.6","版","參","考","文件","i","18","n","目錄","以下","src","i","18","n","index","js","languages","en","US","json","ja","JP","json","zh","CN","json","zh","TW","json","index","js","內容","import","Vue","from","x","27","vue","x","27","Vuex","i","18","nimport","VueI","18","n","from","x","27","vue","i","18","n","x","27","i","18","nimport","zhTW","from","x","27","languages","zh","TW","json","x","27","import","zhCN","from","x","27","languages","zh","CN","json","x","27","import","jaJP","from","x","27","languages","ja","JP","json","x","27","import","enUS","from","x","27","languages","en","US","json","x","27","Vuex","i","18","nVue","use","VueI","18","n","const","messages","123","x","27","zh","TW","x","27","zhTW","x","27","zh","CN","x","27","zhCN","x","27","ja","JP","x","27","jaJP","x","27","en","US","x","27","enUS","125","1","檢","查","localStorage","語系","2","檢","查瀏覽器語系","3","預設","英文","語系","let","locale","localStorage","getItem","x","27","LANGUAGE","x","27","navigator","language","x","27","en","US","x","27","const","i","18","n","new","VueI","18","n","123","locale","fallbackLocale","x","27","zh","TW","x","27","messages","125","export","default","i","18","n","languages","下","檔案內容","zh","TW","json","為例","123","quot","shortMonths","quot","quot","1月","quot","quot","2月","quot","quot","3月","quot","quot","4月","quot","quot","5月","quot","quot","6月","quot","quot","7月","quot","quot","8月","quot","quot","9月","quot","quot","10月","quot","quot","11月","quot","quot","12月","quot","quot","longMonths","quot","quot","一月","quot","quot","二月","quot","quot","三月","quot","quot","四月","quot","quot","五月","quot","quot","六月","quot","quot","七月","quot","quot","八月","quot","quot","九月","quot","quot","十月","quot","quot","十一月","quot","quot","十二月","quot","quot","shortDays","quot","quot","日","quot","quot","1","quot","quot","2","quot","quot","3","quot","quot","4","quot","quot","5","quot","quot","6","quot","quot","longDays","quot","quot","星期日","quot","quot","星期一","quot","quot","星期二","quot","quot","星期三","quot","quot","星期四","quot","quot","星期五","quot","quot","星期六","quot","quot","天","quot","quot","天","quot","quot","時","quot","quot","時","quot","quot","分","quot","quot","分","quot","quot","小","時","quot","quot","小","時","quot","quot","分","鐘","quot","quot","分","鐘","quot","quot","確","定","quot","quot","確","定","quot","quot","取消","quot","quot","取消","quot","quot","關閉","quot","quot","關閉","quot","quot","儲","存","quot","quot","儲","存","quot","quot","上","一步","quot","quot","上","一步","quot","quot","下一步","quot","quot","下一步","quot","quot","消費稅","X","quot","quot","消費稅","123","0","125","quot","125","vue","檔內","使用","時","範","下","lt","template","gt","lt","p","gt","日期","123","123","displayToday","125","125","lt","p","gt","lt","gt","lt","button","gt","123","123","t","x","27","確","定","x","27","125","125","lt","button","gt","lt","gt","lt","p","gt","123","123","t","x","27","消費稅","X","x","27","tax","125","125","lt","p","gt","lt","gt","lt","template","gt","lt","script","gt","import","moment","from","x","27","moment","x","27","export","default","123","data","123","return","123","tax","8","125","125","computed","123","displayToday","123","let","yyyy","moment","year","let","mm","moment","month","let","dd","moment","date","let","weekday","moment","day","2018年7月","22","日","return","yyyy","x","27","年","x","27","this","i","18","n","t","x","27","shortMonths","x","27","mm","dd","x","27","日","x","27","x","27","x","27","this","i","18","n","t","x","27","shortDays","x","27","weekday","x","27","x","27","125","125","125","lt","script","gt","為要寫","東西","太多","決","定","偷","懶","分成","不同","Part","來寫"]},{"title":"Vue 使用 Firebase Cloud Messaging","url":"https://soarlin.github.io/2018/06/02/Vue-%E4%BD%BF%E7%94%A8Firebase-Cloud-Messaging/","content":"\n\n\nVue 專案內使用共同 SASS 資源\nVue 專案目錄結構\nmanifest.json\nfirebase-messaging-sw.js\nsrc/main.js\n\n\nGet Push Token\nGet Push Notification\n網站開啟時，收到推播\n網頁關閉下，收到推播\n\n\n發送推播\n\n\n\n這幾個月來一直懶得更新文章，其實一直想找時間把最近工作的一些事項做些紀錄，結果都一直在看新入坑女團(GFriend)的影片，由於昨天一整天一直在鬼打牆，早上打破一片牆，下午又再遇到一片牆，好在下班前有所突破，趁著記憶猶新的時候，趕緊紀錄一下。\n其實到目前為止，本身對於 PWA (Progressive Web Apps) 沒啥研究，所以對 Service Worker 也不太了解，在這種情況下就去串接 Firebase Cloud Messaging，真的有點越級挑戰了，所以一直碰到問題也很正常，甚至一度不曉得該先解決什麼問題，雖然下班前有完成一個簡單的 Web Push Notification，但還是覺得有些運氣成份在。\n前情提要一下，目前的前端專案是使用 vue-cli 3.0 版搭配 webpack 樣板建置的，其實對於 webpack 的一堆設定也都還沒完全了解，所以三不五時會遇到一些問題，加上 vue-cli 版本比較新，有時上網找答案常常會找到 2.x 版的一些例子，只能先了解後會意，然後再 try &amp; error 的解決。\n有個自己每次重開機就會遇到的問題：\n\nnode 版本需要 8.x 以上才能執行，所以透過 nvm 來裝不同版本切換\n\nVue 專案內使用共同 SASS 資源另外為了全域共同 sass 檔案來做一些定義，如：變數, Mixins, class 等，也是花了一番功夫\n由於不是本篇重點，所以只記錄重點\n\nnpm install --save-dev sass-resources-loader\n修改 /build/utils.js 檔案內的 exports.cssLoaders function\n\n大致修改如下：把原本 sass loader 的 function 替換成新加入的 function\n\nexports.cssLoaders = function (options) &#123;  options = options || &#123;&#125;  const cssLoader = &#123;...&#125;  const postcssLoader = &#123;...&#125;  function generateLoaders (loader, loaderOptions) &#123;...&#125;  // =========  // SASS 配置  // =========  function resolveResouce(name) &#123;    return path.resolve(__dirname, &#x27;../src/assets/sass/&#x27; + name);  &#125;  function generateSassResourceLoader() &#123;    let loaders = [      cssLoader,      // &#x27;postcss-loader&#x27;,      &#123;        loader: &#x27;sass-loader&#x27;,        options: &#123;          indentedSyntax: true        &#125;      &#125;,      &#123;        loader: &#x27;sass-resources-loader&#x27;,        options: &#123;          // it need a absolute path          // global usage sass file          resources: resolveResouce(&#x27;resources.sass&#x27;)        &#125;      &#125;    ];    if (options.extract) &#123;      return ExtractTextPlugin.extract(&#123;        use: loaders,        fallback: &#x27;vue-style-loader&#x27;      &#125;)    &#125; else &#123;      return [&#x27;vue-style-loader&#x27;].concat(loaders)    &#125;  &#125;　  return &#123;    css: generateLoaders(),    postcss: generateLoaders(),    less: generateLoaders(&#x27;less&#x27;),    // sass: generateLoaders(&#x27;sass&#x27;, &#123; indentedSyntax: true &#125;),    // scss: generateLoaders(&#x27;sass&#x27;),    sass: generateSassResourceLoader(),    scss: generateSassResourceLoader(),    stylus: generateLoaders(&#x27;stylus&#x27;),    styl: generateLoaders(&#x27;stylus&#x27;)  &#125;&#125;\n\n接下來進入正題，其實 vue + firebase cloud messaging 網路上找也有一些相關文章或範例，而且 firebase 本身也有介紹如何在 client 的 Javascript 設置 FCM ( Set Up a JavaScript Firebase Cloud Messaging Client App )，而我一開始也是按照 firebase 上的文章做，但沒多久就碰到問題，無法取得 token….XD\nVue 專案目錄結構一開始以為是透過 vue-cli 在 local 開發，所產生的網址是沒有 https 的 http://localhost:8081 (因為 8080 port 用來啟動後端 API server)，所以一度去找了 ngrok 這軟體來用，不過還是一直有問題，後來發現似乎是要跟 FCM 取得 token 時，需要一支 service worker 的 js 檔，而預設會使用位置是 SERVER_ROOT/firbase-messaging-sw.js，然後就去找了些文章看，似乎我還少了這麼一隻 service worker 註冊的檔案，所以除了要加上這隻檔案，又遇到如何讓 vue-cli build 出來的目錄也能有這個檔案以及讀取路徑的問題….唉～\n最終還是逃不過要像 PWA 一樣有個 manifest.json 描述檔，以及一個 service-worker.js 檔，所以這檔案都放到到 static 目錄下，讓專案編譯後能夠在複製一份到 dist 目錄內，目前專案目錄的架構大致如下：\n\nmanifest.json裡面最重要的一行，就是記得加上 gcm_sender_id，這在 firebase 教學文件裡的步驟有提到\n&#123;  &quot;short_name&quot;: &quot;YOUR_PROJECT_SHORT_NAME&quot;,  &quot;name&quot;: &quot;YOUR_PROJECT_NAME&quot;,  &quot;icons&quot;: [    &#123;      &quot;src&quot;: &quot;/static/images/logo.png&quot;,      &quot;type&quot;: &quot;image/png&quot;,      &quot;sizes&quot;: &quot;192x192&quot;    &#125;  ],  &quot;start_url&quot;: &quot;/&quot;,  &quot;background_color&quot;: &quot;#ecf0f2&quot;,  &quot;display&quot;: &quot;fullscreen&quot;,  &quot;theme_color&quot;: &quot;#34aeab&quot;,  &quot;gcm_sender_id&quot;: &quot;YOUR_SENDER_ID&quot;&#125;\n\n而主要頁面 index.html 需要能夠讀取到 manifiest.json 檔案，所以 index.html 內的 &lt;head&gt; 需要加入底下這行\n&lt;link rel=&quot;manifest&quot; href=&quot;&lt;%= htmlWebpackPlugin.files.publicPath %&gt;static/manifest.json&quot;&gt;\n\nfirebase-messaging-sw.js這是給 service worker register 用的檔案，內容分兩部分，先介紹第一部分，重點是 firebase 專案內的 sender_id 要記得加進去\n\n// [START initialize_firebase_in_sw]// Import and configure the Firebase SDK// These scripts are made available when the app is served or// deployed on Firebase Hosting// If you do not serve/host your project using Firebase Hosting// see https://firebase.google.com/docs/web/setupimportScripts(&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-app.js&#x27;);importScripts(&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-messaging.js&#x27;);firebase.initializeApp(&#123;  messagingSenderId: &#x27;YOUR_SENDER_ID&#x27;&#125;);const messaging = firebase.messaging();// [END initialize_firebase_in_sw]\n\nsrc/main.js另外要讓 service worker 可以正確使用這檔案，需要透過 navigator.serviceWorker.register 這來指定路徑\n底下是目前使用的方式，在 /src/main.js 裡面將 FCM 設定好，這裡需要先取的 web push 所需要的 public VAPID key，可以參考這裡\nconst FCMconfig = &#123;  apiKey: &#x27;YOUR_API_KEY&#x27;,  authDomain: &#x27;YOUR_DOMAIN&#x27;,  databaseURL: &#x27;https://&lt;YOUR_PROJECT_ID&gt;.firebaseio.com&#x27;,  projectId: &#x27;YOUR_PROJECT_ID&#x27;,  storageBucket: &#x27;&lt;YOUR_PROJECT_ID&gt;.appspot.com&#x27;,  messagingSenderId: &#x27;YOUR_SENDER_ID&#x27;&#125;firebase.initializeApp(FCMconfig)Vue.prototype.$messaging = nullif (firebase.messaging.isSupported()) &#123;  firebase.initializeApp(FCMconfig)  // Retrieve Firebase Messaging object, assign to Vue Object  Vue.prototype.$messaging = firebase.messaging()  // Add the public key generated from the Firebase console  Vue.prototype.$messaging.usePublicVapidKey(process.env.VAPID_KEY)&#125;// Change server-worker.js register pathnavigator.serviceWorker.register(&#x27;/static/firebase-messaging-sw.js&#x27;)  .then((registration) =&gt; &#123;    Vue.prototype.$swRegistration = registration    Vue.prototype.$messaging.useServiceWorker(registration)  &#125;).catch(err =&gt; &#123;    console.log(err)  &#125;)\n\n上述使用 Vue.prototype.$messaging 來引入全域變數 $messaging 方便後面在不同 .vue 檔內都可以使用，所以接下來就可以真的來取得 push token 了\nGet Push Token接著就可以在 vue 內，可以參考下面範例\n&lt;template&gt;  &lt;div&gt;    ...    &lt;button @click=&quot;registeFCM&quot;&gt;Register&lt;/button&gt;    ...  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#x27;firebase/messaging&#x27;export default &#123;  data () &#123;    return &#123;      // ...    &#125;  &#125;,  mounted () &#123;    this.initFCM()  &#125;,  methods: &#123;    initFCM () &#123;      this.$messaging.onTokenRefresh(() =&gt; &#123;        this.$messaging.getToken().then((refreshedToken) =&gt; &#123;          console.log(&#x27;Token refreshed.&#x27;)          this.setTokenSentToServer(false)          this.sendTokenToServer(refreshedToken)        &#125;)      &#125;)    &#125;,    registeFCM () &#123;      this.$messaging.requestPermission().then(() =&gt; &#123;        console.log(&#x27;Notification permission granted.&#x27;)        this.getToken()      &#125;).catch((err) =&gt; &#123;        console.log(&#x27;Unable to get permission to notify.&#x27;, err)      &#125;)    &#125;,    getToken () &#123;      this.$messaging.getToken().then((currentToken) =&gt; &#123;        if (currentToken) &#123;          this.sendTokenToServer(currentToken)        &#125; else &#123;          console.log(&#x27;No Instance ID token available. Request permission to generate one.&#x27;)          // Show permission UI.          this.setTokenSentToServer(false)        &#125;      &#125;).catch((err) =&gt; &#123;        console.log(&#x27;An error occurred while retrieving token. &#x27;, err)        this.setTokenSentToServer(false)      &#125;)    &#125;,    sendTokenToServer (token) &#123;      // TODO: Send Token To Your Server    &#125;,    setTokenSentToServer (type) &#123;      if (type) return      // TODO: Delete Register Token From Your Server    &#125;  &#125;&#125;&lt;/script&gt;&lt;style lang=&quot;sass&quot; scoped&gt;// ...&lt;/style&gt;\n\nGet Push Notification當推播發送成功後，接收 push notification 有兩種情況，網站開啟時，與網頁關閉時，底下再針對兩種情況繼續說明\n網站開啟時，收到推播透過 firebase messaging 的 onMessage 來接收通知\nthis.$messaging.onMessage(payload =&gt; &#123;  console.log(&#x27;Message receiver &#x27;, payload);  let notification = payload.notification;  console.log(&#x27;Notification: &#x27;, notification);&#125;);\n\n網頁關閉下，收到推播透過在 service worker 內寫的背景接收通知的處理，所以原本的 sw.js 又要繼續第二部分的 code\nmessaging.setBackgroundMessageHandler(function(payload) &#123;  console.log(    &#x27;[firebase-messaging-sw.js] Received background message &#x27;,    payload  );  // Customize notification here  var notification = payload.notification;  var notificationTitle = notification.title;  var notificationOptions = &#123;    body: notification.body,    icon: &#x27;/static/images/logo.png&#x27;  &#125;;  return self.registration.showNotification(    notificationTitle,    notificationOptions  );&#125;);\n\n所以完整的 firebase-messaging-sw.js 檔案如下：\nimportScripts(&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-app.js&#x27;);importScripts(&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-messaging.js&#x27;);firebase.initializeApp(&#123;  messagingSenderId: &#x27;YOUR_SENDER_ID&#x27;&#125;);const messaging = firebase.messaging();// Background Message Handlermessaging.setBackgroundMessageHandler(function(payload) &#123;  console.log(    &#x27;[firebase-messaging-sw.js] Received background message &#x27;,    payload  );  // Customize notification here  var notification = payload.notification;  var notificationTitle = notification.title;  var notificationOptions = &#123;    body: notification.body,    icon: &#x27;/static/images/logo.png&#x27;  &#125;;  const promiseChain = clients    .matchAll(&#123;      type: &#x27;window&#x27;,      includeUncontrolled: true    &#125;)    .then(windowClients =&gt; &#123;      for (let i = 0; i &lt; windowClients.length; i++) &#123;        const windowClient = windowClients[i];        windowClient.postMessage(notify);      &#125;    &#125;)    .then(() =&gt; &#123;      return self.registration.showNotification(        notificationTitle,        notificationOptions      );    &#125;);  return promiseChain;&#125;);\n\n發送推播為了發送推播也是莫名其妙地遇到問題，鬼打牆了好一陣子才解決，照著 firebase 說明做，遇到了些問題\n\nPOST 的網址，project id 帶進去似乎還是錯誤…why?\nAuthorization 的值到底從何而來，找了很久一直找不到 firebase 專案設定內有類似的值\n\n所以一直無法順利測試，後來又翻到了另一篇文章，首先這個發送的網址固定，看起來沒問題，而 Authorization 就是 Firebase 專案設定裡面的 Server Key，就用這個試試看吧！\nhttps://fcm.googleapis.com/fcm/sendContent-Type: application/jsonAuthorization: key=AIzaSyC...akjgSX0e4&#123; &quot;notification&quot;: &#123;    &quot;title&quot;: &quot;Background Message Title&quot;,    &quot;body&quot;: &quot;Background message body&quot;,    &quot;click_action&quot; : &quot;https://dummypage.com&quot;  &#125;,  &quot;to&quot; : &quot;eEz-Q2sG8nQ:APA91bHJQRT0JJ...&quot;&#125;\n\n一開始測試時，一直遇到 UnAuthorization 的錯誤，找了解決辦法還是沒找到可用的，就想說把 Server Key 從舊版的換成新版的(加密後資料長度長很多)，結果就發送成功了…其實我真的不懂為什麼，今天再換回舊版 server key 還是可以發送，那昨天下午到底是什麼詭異狀況？\n總之最後是成功做完一個基本 web push notification 的流程了，真是可喜可賀！打完收工！\n","title_tokenize":["Vue","使用","Firebase","Cloud","Messaging"],"content_tokenize":["Vue","專案內","使用","共同","SASS","資源","Vue","專案目錄結構","manifest","json","firebase","messaging","sw","js","src","main","js","Get","Push","Token","Get","Push","Notification","網站開啟時","收到","推","播","網頁關閉","下","收到","推","播","發送","推","播","這幾個","月","來","懶","更新","文章","實","想","找","時間","最近","工作","事項","做","些紀錄","結果","都","1","直","看","新","入","坑","女","團","GFriend","影片","於","昨天","一整天一直","鬼","牆","早上","打破","一片","牆","下午","再","遇到","一片","牆","好在","下班","前","有所","突破","趁著記憶猶","新的","時候","趕緊紀錄","一下","實","目前","為止","本身","對於","PWA","Progressive","Web","Apps","沒啥","研究","對","Service","Worker","也不","太","了解","這種情況","下","去","串接","Firebase","Cloud","Messaging","真","點越級挑戰","碰到","問題","很","正常","一度","不","曉","該","先","解決什麼問題","雖然","下班","前","完成","1","個簡單","Web","Push","Notification","還","覺","運氣","成份","前情","提要","一下","目前","前端","專案","使用","vue","cli","3.0","版","搭配","webpack","樣板","建置","實對於","webpack","一堆","設","定","都","還沒","完全","了解","3","不","5","時會","遇到","問題","加上","vue","cli","版本","較","新","時","上","網","找","答案","常常","會","找到","2","x","版","例子","只能","先","了解","後會意","然後再","try","amp","error","解決","個","每次","重","開機","會","遇到","問題","node","版本","需要","8","x","以上","才能","執行","透過","nvm","來裝","不同","版本","切換","Vue","專案內","使用","共同","SASS","資源","為","全域","共同","sass","檔案來","做","定","義","變數","Mixins","class","也是","花","工夫","於","不是","本篇","重","點","只","記錄","重","點","npm","install","save","dev","sass","resources","loader","修改","build","utils","js","檔案內","exports","cssLoaders","function","大致","修改","以下","本来","sass","loader","function","替換","成","新","加入","function","exports","cssLoaders","function","options","123","options","options","123","125","const","cssLoader","123","125","const","postcssLoader","123","125","function","generateLoaders","loader","loaderOptions","123","125","SASS","配置","function","resolveResouce","name","123","return","path","resolve","dirname","x","27","src","assets","sass","x","27","name","125","function","generateSassResourceLoader","123","let","loaders","cssLoader","x","27","postcss","loader","x","27","123","loader","x","27","sass","loader","x","27","options","123","indentedSyntax","true","125","125","123","loader","x","27","sass","resources","loader","x","27","options","123","it","need","a","absolute","path","global","usage","sass","file","resources","resolveResouce","x","27","resources","sass","x","27","125","125","if","options","extract","123","return","ExtractTextPlugin","extract","123","use","loaders","fallback","x","27","vue","style","loader","x","27","125","125","else","123","return","x","27","vue","style","loader","x","27","concat","loaders","125","125","return","123","css","generateLoaders","postcss","generateLoaders","less","generateLoaders","x","27","less","x","27","sass","generateLoaders","x","27","sass","x","27","123","indentedSyntax","true","125","scss","generateLoaders","x","27","sass","x","27","sass","generateSassResourceLoader","scss","generateSassResourceLoader","stylus","generateLoaders","x","27","stylus","x","27","styl","generateLoaders","x","27","stylus","x","27","125","125","接下","來進","入","正","題","實","vue","firebase","cloud","messaging","網","路上","找","有一些","相關","文章","範例","firebase","本身","介紹","何在","client","Javascript","設置","FCM","Set","Up","a","JavaScript","Firebase","Cloud","Messaging","Client","App","1","開始","也是","firebase","上","文章","做","沒","多久","碰到","問題","無","法","取","token","XD","Vue","專案目錄結構","1","開始","為","透過","vue","cli","local","開發","產生","網址","沒","https","http://localhost:8081","為","8080","port","用來啟動後端","API","server","一度","去找","ngrok","這軟體來用","不","過還","1","直","問題","後來發現","似乎是","FCM","取得","token","時","需要","一支","service","worker","js","檔","預設會","使用","位置","SERVER","ROOT","firbase","messaging","sw","js","然後","去找","些","文章","看","恍如","還","少了","這麼","1","隻","service","worker","註冊","檔案","加上","這隻檔案","遇到","何讓","vue","cli","build","出","來","目錄","這個檔案","讀","取","路徑","問題","最","終還","逃","不","過要","PWA","1","樣","個","manifest","json","描写","檔","1","個","service","worker","js","檔","這檔案","都","放到","static","目錄","下","讓專案編譯後","夠","複製","一份","dist","目錄內","目前","專案目錄","架構","大致","以下","manifest","json","裡","面","最重要","一行","記","加上","gcm","sender","id","這","firebase","教學","文件","裡","步","驟","提到","123","quot","short","name","quot","quot","YOUR","PROJECT","SHORT","NAME","quot","quot","name","quot","quot","YOUR","PROJECT","NAME","quot","quot","icons","quot","123","quot","src","quot","quot","static","images","logo","png","quot","quot","type","quot","quot","image","png","quot","quot","sizes","quot","quot","192","x","192","quot","125","quot","start","url","quot","quot","quot","quot","background","color","quot","quot","ecf","0","f","2","quot","quot","display","quot","quot","fullscreen","quot","quot","theme","color","quot","quot","34","aeab","quot","quot","gcm","sender","id","quot","quot","YOUR","SENDER","ID","quot","125","主要","頁","面","index","html","需要","夠讀","取","manifiest","json","檔案","index","html","內","lt","head","gt","需要","加入","底下","這行","lt","link","rel","quot","manifest","quot","href","quot","lt","htmlWebpackPlugin","files","publicPath","gt","static","manifest","json","quot","gt","firebase","messaging","sw","js","這","給","service","worker","register","檔案","內容","分","兩","部","分","先","介紹","一部分","重","點","firebase","專案內","sender","id","要記","加","進","去","START","initialize","firebase","in","sw","Import","and","configure","the","Firebase","SDK","These","scripts","are","made","available","when","the","app","is","served","or","deployed","on","Firebase","Hosting","If","you","do","not","serve","host","your","project","using","Firebase","Hosting","see","https://firebase.google.com/docs/web/setupimportScripts(&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-app.js&#x27;);importScripts(&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-messaging.js&#x27;);firebase.initializeApp(&#123;","messagingSenderId","x","27","YOUR","SENDER","ID","x","27","125","const","messaging","firebase","messaging","END","initialize","firebase","in","sw","src","main","js","要讓","service","worker","正","確","使用","這檔案","需要","透過","navigator","serviceWorker","register","這來","指定","路徑","底下","目前","使用","方式","src","main","js","裡","面","將","FCM","設","定","好","這裡","需要","先","取","web","push","需要","public","VAPID","key","參","考","這裡","const","FCMconfig","123","apiKey","x","27","YOUR","API","KEY","x","27","authDomain","x","27","YOUR","DOMAIN","x","27","databaseURL","x","27","https://&lt;YOUR_PROJECT_ID&gt;.firebaseio.com&#x27;,","projectId","x","27","YOUR","PROJECT","ID","x","27","storageBucket","x","27","lt","YOUR","PROJECT","ID","gt","appspot","com","x","27","messagingSenderId","x","27","YOUR","SENDER","ID","x","27","125","firebase","initializeApp","FCMconfig","Vue","prototype","messaging","nullif","firebase","messaging","isSupported","123","firebase","initializeApp","FCMconfig","Retrieve","Firebase","Messaging","object","assign","to","Vue","Object","Vue","prototype","messaging","firebase","messaging","Add","the","public","key","generated","from","the","Firebase","console","Vue","prototype","messaging","usePublicVapidKey","process","env","VAPID","KEY","125","Change","server","worker","js","register","pathnavigator","serviceWorker","register","x","27","static","firebase","messaging","sw","js","x","27","then","registration","gt","123","Vue","prototype","swRegistration","registration","Vue","prototype","messaging","useServiceWorker","registration","125","catch","err","gt","123","console","log","err","125","上述","使用","Vue","prototype","messaging","來","引入","全域","變數","messaging","方便","後","面","不同","vue","檔內","都","使用","接下","來","真","來","取得","push","token","Get","Push","Token","接著","vue","內","參","考","下面","範例","lt","template","gt","lt","div","gt","lt","button","click=&quot","registeFCM","quot","gt","Register","lt","button","gt","lt","div","gt","lt","template","gt","lt","script","gt","import","x","27","firebase","messaging","x","27","export","default","123","data","123","return","123","125","125","mounted","123","this","initFCM","125","methods","123","initFCM","123","this","messaging","onTokenRefresh","gt","123","this","messaging","getToken","then","refreshedToken","gt","123","console","log","x","27","Token","refreshed","x","27","this","setTokenSentToServer","false","this","sendTokenToServer","refreshedToken","125","125","125","registeFCM","123","this","messaging","requestPermission","then","gt","123","console","log","x","27","Notification","permission","granted","x","27","this","getToken","125","catch","err","gt","123","console","log","x","27","Unable","to","get","permission","to","notify","x","27","err","125","125","getToken","123","this","messaging","getToken","then","currentToken","gt","123","if","currentToken","123","this","sendTokenToServer","currentToken","125","else","123","console","log","x","27","No","Instance","ID","token","available","Request","permission","to","generate","one","x","27","Show","permission","UI","this","setTokenSentToServer","false","125","125","catch","err","gt","123","console","log","x","27","An","error","occurred","while","retrieving","token","x","27","err","this","setTokenSentToServer","false","125","125","sendTokenToServer","token","123","TODO","Send","Token","To","Your","Server","125","setTokenSentToServer","type","123","if","type","return","TODO","Delete","Register","Token","From","Your","Server","125","125","125","lt","script","gt","lt","style","lang","quot","sass","quot","scoped","gt","lt","style","gt","Get","Push","Notification","當","推","播","發送","成功","後","接收","push","notification","兩種情況","網站開啟時","與網頁關閉時","底下","再針對兩種情況繼續說明","網站開啟時","收到","推","播","透過","firebase","messaging","onMessage","來","接收","通知","this","messaging","onMessage","payload","gt","123","console","log","x","27","Message","receiver","x","27","payload","let","notification","payload","notification","console","log","x","27","Notification","x","27","notification","125","網頁關閉","下","收到","推","播","透過","service","worker","內寫","背景","接收","通知","處理","本来","sw","js","要繼續","第二部","分","code","messaging","setBackgroundMessageHandler","function","payload","123","console","log","x","27","firebase","messaging","sw","js","Received","background","message","x","27","payload","Customize","notification","here","var","notification","payload","notification","var","notificationTitle","notification","title","var","notificationOptions","123","body","notification","body","icon","x","27","static","images","logo","png","x","27","125","return","self","registration","showNotification","notificationTitle","notificationOptions","125","完整的","firebase","messaging","sw","js","檔案","以下","importScripts","x","27","https://www.gstatic.com/firebasejs/5.0.0/firebase-app.js&#x27;);importScripts(&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-messaging.js&#x27;);firebase.initializeApp(&#123;","messagingSenderId","x","27","YOUR","SENDER","ID","x","27","125","const","messaging","firebase","messaging","Background","Message","Handlermessaging","setBackgroundMessageHandler","function","payload","123","console","log","x","27","firebase","messaging","sw","js","Received","background","message","x","27","payload","Customize","notification","here","var","notification","payload","notification","var","notificationTitle","notification","title","var","notificationOptions","123","body","notification","body","icon","x","27","static","images","logo","png","x","27","125","const","promiseChain","clients","matchAll","123","type","x","27","window","x","27","includeUncontrolled","true","125","then","windowClients","gt","123","for","let","i","0","i","lt","windowClients","length","i","123","const","windowClient","windowClients","i","windowClient","postMessage","notify","125","125","then","gt","123","return","self","registration","showNotification","notificationTitle","notificationOptions","125","return","promiseChain","125","發送","推","播","為","發送","推","播","也是","莫名其妙","遇到","問題","鬼","牆","好","1","陣","子","才","解決","著","firebase","說明","做","遇到","些問題","POST","網址","project","id","帶進","去","恍如","還","錯誤","why","Authorization","值","到底","從","來","找","很久","找不到","firebase","專案設","定","內","類","值","無","法","順利測試","後來","翻","到了","另外一","篇文章","首","先","這個發送","網址","固定","看","來沒問題","Authorization","Firebase","專案設","定","裡","面","Server","Key","用這個試試","看","https://fcm.googleapis.com/fcm/sendContent-Type:","application","jsonAuthorization","key","AIzaSyC","akjgSX","0","e","4","123","quot","notification","quot","123","quot","title","quot","quot","Background","Message","Title","quot","quot","body","quot","quot","Background","message","body","quot","quot","click","action","quot","quot","https://dummypage.com&quot;","125","quot","to","quot","quot","eEz","Q","2","sG","8","nQ","APA","91","bHJQRT","0","JJ","quot","125","1","開始測試時","遇到","UnAuthorization","錯誤","找","了解","決辦","法","還","沒","找到","可用","想說","Server","Key","從舊版","換","成","新版","加密","後資料長度長","很多","結果","發送","成功","實","真","不懂","為什麼","今天","再換回舊版","server","key","還","發送","昨天","下午","到底","什麼詭異狀況","總","最","後","成功","做完","1","個","基本","web","push","notification","流程","真是","可喜","賀","完","收工"]},{"title":"Apple Pay on the Web 開發筆記","url":"https://soarlin.github.io/2018/03/10/apple-pay-on-the-web-%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98/","content":"已經不想去算到底多久沒有更新 Blog 了，因為最近幾個月實在沒什麼梗，不過這也算是好事吧！感覺起來似乎比較輕鬆些？其實也沒有比較輕鬆，前陣子還得趕鴨子上架，把剛摸沒多久的 Go lang 直接投入在新版後台開發上，想想都覺得很抖～～\n從去年進公司以來，一開始就先著手開發的商品預訂流程，想當初花了一個半月，直接用 vue 2.x + vuex + vue-router 真的很敢，結果就是後來陸續要針對預訂流程做調整，就得再回顧之前一開始寫的 code，也不能說看得很痛苦，但是…看著好幾個月前寫的東西，總是在陌生與痛苦間徘徊。\n最近一次的調整除了把註冊登入的流程提早了一個步驟，還要在原本的信用卡付款金流外，陸續增加 Apple Pay 與 Line Pay，真是令人感到刺激，雖然自己在做之前覺得這功能做好後的實用性遠小於噱頭性質，不過既然決定要做，那就認真做吧！順便多學一些東西。\n不過這次串接的好處是，我們原先就透過 TayPay 這第三方金流服務，所以 TayPay 已經把 Apple Pay 與 Line Pay 都串接了，我們直接沿用原本的套件就可以繼續開發，當然後端 API 間處理還是得自己來，但由於是另一個同事負責的，就不在這次的討論範圍了。\n廢話了那麼多，要進入正題了，接下來開始記錄這次耗時約一週才搞定的 Apple Pay，應該不是我能力太廢，是真的一路走來踩了好多雷，所以才要發文紀錄一下，讓自己日後可以回味。\n\n環境設定有在 iPhone 上用過 Apple Pay 的人都應該知道，手機會彈出一個驗證指紋的付款畫面，可是用網頁要怎麼驗證指紋，所以要使用 Apple Pay on the Web 有一些先天限制條件。\n\n持有 iPhone 且作業系統版本需要 iOS 10 以上的版本\n使用 Mac 電腦且作業系統版本需要 macOS 10.12 以上，當然也得用 Safari 瀏覽器\n\n另外就是 Server 本身除了要支援 HTTPS 外，還要有合法的 SSL 憑證，關於 Server 設定可以看 Apple 官方文件\n踩雷1所以想在本機開發，馬上就遇到了問題，雖然 TayPay 建議使用 ngrok (TayPay寫的教學)，就可以透過 ngrok 服務產生的臨時網址來讓支援 SSL 來使用 Apple Pay，可是在實際摸索後，Apple 似乎不認為這服務產生的憑證是可信任的，一直噴出連線的憑證是 untrusted\n由於無法在本機端開發，更不可能讓我在 production 的機器上開發，只好到測試(stage)的機器上開發了，不過公司使用的 stage server，遠在 AWS 美西的機房內，而且主機等級還是 micro，除了連線過去的延遲時間很嚴重，主機本身運作起來也不快，但也沒辦法了，硬著頭皮上嘍！\nServer domain 驗證踩雷2由於是測試機的環境，所以有連線上的限制，某天早上一早到公司，就先連到 AWS 上把 EC2 的 security 限制開啟 443 port 可以讓 Apple Pay 的主機連進來，然而得先在 Apple Developer 將 domain 加入且驗證通過，但是照著 Apple 文件內把所有可能的主機 IP 都加入白名單了，可是試了很久怎麼都驗證不過，一直顯示 domain 驗證失敗，WTF!\n後來等另一位同事來了，跟他說了這樣的情況，他就建議暫時把 stage server 的 443 都對外開放試試看，果然這次出現了另一個錯誤訊息，這次的錯誤是說驗證的檔案已經過期，噗～原來 Apple 真的很嚴格，連給驗證用的檔案都有時效性，雖然只是重新下載新的驗證檔上傳，還是得先經過 Jenkins 在發布實在有點麻煩。\n這次總算可以驗證過了，經過這次的教訓我學到了一點，Apple 官方文件提供的 Apple Pay Server IP，跟他要來驗證 domain 的主機肯定是他媽不同 IP，這真的太陰險了，文件裡面寫那麼多廢話，卻沒說明驗證的主機 IP 是啥。\n接下來又花了不少時間，把 stage 環境安裝 vim, git, composer, npm … 等工具，然後再把目前開發的 code pull 下來，重新把開發中的版本環境搞定，apache 的 web 目錄設定也指向這暫時的開發目錄，因為開發時期會透過 watch 工具，每次存檔後讓 js 重新編譯，當真的要在上面開發修改程式的時候發現，vim 裡面光是讓游標移動就要等待一段時間，更不用提真的 coding 的時候有多不順暢就好，每次存檔後重新編譯 js 檔要等待的時間也很難預測，順利的話可以在三秒內重新編譯，運氣不好的話可能上個廁所回來還沒重新編譯，我真的被搞到快崩潰了。\n後來沒辦法只好儘可能地把相關文件閱讀過，將可能執行的流程都先在本機寫好，可能會出現的狀況都盡量印出 log，接著再重新 push commit，再去 stage 上 pull 下來測試。\n瀏覽器檢測一開始就說了想在網頁上執行 Apple Pay 有一些限制的條件，所以 Apple 文件也有提供一些檢測的方式，最基本檢查瀏覽器是否支援，如：\nif (window.ApplePaySession) &#123;   // The Apple Pay JS API is available...&#125;\n\n接著再檢查是否真的可用 Apple Pay，這會去檢查是否有可用卡片，有的話顯示 Apple Pay 按鈕\nif (window.ApplePaySession) &#123;   var merchantIdentifier = &#x27;example.com.store&#x27;;   var promise = ApplePaySession.canMakePaymentsWithActiveCard(merchantIdentifier);   promise.then(function (canMakePayments) &#123;      if (canMakePayments)         // Display Apple Pay Buttons here…&#125;); &#125;\n\n踩雷3但是在我前面花了這麼久的努力，把一切環境都弄好要測試時，發現怎麼都無法執行 TayPay 串接 Apple Pay 的 function，最後檢查了我跟同事的瀏覽器後，發現原來是我的瀏覽器沒有支援，明明一切條件都符合 Apple 自己要求的條件，電腦跟手機也都登入相同的 Apple ID，手機上的 Apple Pay 也有綁定信用卡，但是我的 Safari 瀏覽器就是不能用…Orz…\n而同事的電腦也是一台可以，一台不行，雖然現在寫這篇文章的時候，我的 safari 好像也支援 Apple Pay 了，但是三天前到底發生甚麼狀況，我真的完全摸不著頭緒，唯一做的改變是，我昨天借用同事開發用的 Apple ID 登入自己電腦來測試 Apple Pay，然後在登出並登入回自己 Apple ID，神奇的事情就這麼發生了，贛！\n所以前兩三天在開發的時候，除了大部分的 code 需要先在本機盲寫，再上到 stage 上進行測試跟小改動，還必須使用手機接著一條線到電腦，開啟 Safari 的網頁檢閱器，就是類似 Chrome 上的開發者工具一樣，但是卻難用 10 倍以上，真的開發的很艱辛！\nApple Pay Payment Request總算可以開始接近 Apple Pay 的核心了，目前總算可以進入到呼叫 Apple Pay 的階段了，可是在看過 TayPay 提供的文件，以及 Apple 官方文件，大概理解需要提供一份資料後，來建立 Apple Pay Session，才會呼叫出 Apple Pay 的介面。\nvar request = &#123;  countryCode: &#x27;US&#x27;,  currencyCode: &#x27;USD&#x27;,  supportedNetworks: [&#x27;visa&#x27;, &#x27;masterCard&#x27;, &#x27;amex&#x27;, &#x27;discover&#x27;],  merchantCapabilities: [&#x27;supports3DS&#x27;],  total: &#123; label: &#x27;Your Merchant Name&#x27;, amount: &#x27;10.00&#x27; &#125;,&#125;var session = new ApplePaySession(3, request);\n\n好像很簡單麻～～～可是！要是這麼簡單，我就不用特地寫這篇文章來宣洩這一週的不快了，我左看右看，上看下看，完全沒寫錯，可是呼叫 TayPay 的 API 會沒反應，只好改用 Apple Pay 提供的 sample code 來測試，怎麼試也都沒反應，到底發生什麼事啊！！！\n踩雷4雖然中途有看到噴出一個錯誤訊息，「Must create a new ApplePaySession from a user gesture handler」，但是一直沒有很在意他，後來真的沒招了才回頭來研究這問題，這個意思是呼叫 Apple Pay 必須是使用者操作的行為來產生，我就心想難不成你還能監視使用者事不是按了你們家規定的按鈕不成，後來跟同事討論了一下後想到，雖然我也是在使用者按下 Apple Pay(自家做)按鈕後才呼叫，不過礙於改版後的訂購流程，必須先建立訂單，然後才能呼叫 Apple Pay，該不會真的是因為這原因吧！\n在跳過建立訂單的步驟後，我的手機畫面終於彈出 Apple Pay 的介面了，咁～我真的內牛滿面了，為了看到這個畫面我都已經跟你耗了三天多了，這麼一來訂購的流程肯定要再調整了，一想到這裡，不禁又要滴下男兒淚來。因為每次流程調整就要改很久，常常會再多出很多 garbage code，眼看著這天也快下班，把程式碼整理整理，在跟設計師約一下隔天討論流程的調整。唉～\n隔天跟設計師討論目前這樣的結帳流程，無法在建立訂單的同時，馬上在呼叫 Apple Pay，必須在建立訂單後，重新計算台幣計價的金額，過渡一頁資料確認，再讓使用者按那顆黑黑的  Pay，才能順利叫出 Apple Pay 來付款。再討論好要調整的流程後，盡可能以修改最少的方式進行，也總算可以在一週的最後一天把整個流程都搞定。\n這週扣掉週一下午處理別的問題，週二上午看醫生，串接 Line Pay 約一天，剩下的時間全都拿來跟 Apple Pay 耗了，接下來就是再多測試整個訂購流程了，希望可以在下週順利上線。\nPS. 其實中途遇到的問題不只這些，光是一開始 Apple Developer 帳號就搞好久，原本有最高權限的主管好兒剛好離職，為了把 Merchant Identity Certificate 上傳也花了不少時間\n","title_tokenize":["Apple","Pay","on","the","Web","開發筆記"],"content_tokenize":["已","經","不想","去","算","到底","多久","沒","更新","Blog","為","最近","幾個","月","實","沒什麼梗","不","過這","算是","好事","感覺","來","恍如","較輕鬆些","實","沒","較輕鬆","前","陣","子","還","趕鴨","子","上架","剛摸沒","多久","Go","lang","直接","投入","新版","後","台","開發","上","想想","都","覺","得很","抖","從","去年","進","公司","來","1","開始","先","著","手","開發","商品","預訂","流程","想當初花","1","個","半月","直接","vue","2","x","vuex","vue","router","真","很","敢","結果","後來陸續要針對預訂","流程","做","調整","再回顧","之前","1","開始寫","code","不能","說","看","得很","痛苦","看","著","好","幾個","月","前","寫","東西","總","陌生","與","痛苦","間","徘徊","最近","一次","調","整除","註冊","登","入","流程","提早","1","個","步","驟","還要","本来","信用卡","付款","金流外","陸續","增加","Apple","Pay","與","Line","Pay","真是","使人","感到","刺激","雖然","做","之前","覺","這","功能","做好","後","實用性遠","小","於噱頭性質","不","過","決","定","做","認","真","做","順便多學","東西","不","過這","次","串接","好","處","們","本来","透過","TayPay","這","第三","方金流服務","TayPay","已","經","Apple","Pay","與","Line","Pay","都","串接","們","直接","沿用","本来","套件","繼續開發","當然後端","API","間處理還","來","於","另外一","個","同事","負責","不在","這","次","討論範圍","廢話","麼多","要進","入","正","題","接下","來開始記錄這","次","耗","時約","1","週","才","搞定","Apple","Pay","應該","不是","能力","太","廢","真","一路","走","來踩","好多","雷，","才","要發文紀錄","一下","讓","日","後","回味","環境設","定","iPhone","上","用過","Apple","Pay","人","都","應該","知道","手","機會彈","出","1","個驗證指紋","付款","畫","面","用網頁要怎麼驗證指紋","使用","Apple","Pay","on","the","Web","有一些","先天","限制","條","件","持有","iPhone","作","業系統","版本","需要","iOS","10","以上","版本","使用","Mac","電腦","作","業系統","版本","需要","macOS","10.12","以上","當然","得用","Safari","瀏覽器","Server","本身","支援","HTTPS","外","還","要有","合","法","SSL","憑證","關於","Server","設","定","看","Apple","官方","文件","踩雷","1","想","機開發","馬","上","遇到","問題","雖然","TayPay","建議","使用","ngrok","TayPay","寫","教學","透過","ngrok","服務產生","臨時網址來讓","支援","SSL","來","使用","Apple","Pay","實際","摸索","後","Apple","恍如","不","認為這服務產生","憑證","可信任","1","直","噴","出","連線","憑證","untrusted","於無","法","機端開發","更","不可能","讓","production","機器","上","開發","只","好","測試","stage","機器","上","開發","不","過","公司","使用","stage","server","遠","AWS","美","西","機房內","主機","級還","micro","連線過","去","延遲時間很嚴","重","主機","本身","運","作","來","不快","沒辦","法","硬","著頭皮","上","嘍","Server","domain","驗證踩雷","2","於","測試機","環境","連線","上","限制","某天","早上","一早","公司","先","連","AWS","上","EC","2","security","限制","開啟","443","port","讓","Apple","Pay","主機連進來","先在","Apple","Developer","將","domain","加入","驗證通過","著","Apple","文件","內","所有","可能","主機","IP","都","加入","白名","單","試","很久","怎麼","都","驗證","不","過","1","直","顯示","domain","驗證失敗","WTF","後來","另一位","同事","來","說","這樣","情況","建議暫時","stage","server","443","都","對外開","放","試試","看","這","次","出","現","另外一","個錯誤訊息","這","次","錯誤","說驗證","檔案","已","經過","期","噗","原","來","Apple","真","很嚴格","連給驗證用","檔案","都","時效性","雖然","只","重新","下","載","新的","驗證檔","上","傳","還","先","經過","Jenkins","發布實","點麻煩","這","次","總算","驗證過","經過這","次","教訓","學","到了","1","點","Apple","官方","文件","提供","Apple","Pay","Server","IP","要來驗證","domain","主機","肯定","媽","不同","IP","這","真","太","陰險","文件","裡","面","寫","麼多廢話","卻沒說明驗證","主機","IP","接下","來","花","不","少","時間","stage","環境","安","裝","vim","git","composer","npm","工具","然後再","目前","開發","code","pull","下","來","重新","開發","中的","版本","環境","搞定","apache","web","目錄設","定","指向","這暫時","開發目錄","為開發時","期","會透過","watch","工具","每次","存","檔後讓","js","重新","編譯","當","真","上面","開發","修改","程式","時候發現","vim","裡","面","光是","讓游標移動","就要","等待","一段","時間","更","不用","提","真","coding","時候","不","順暢","好","每次","存","檔後","重新","編譯","js","檔要","時間","很難預測","順利","話","三秒","內","重新","編譯","運氣","不好","話","可能","上","個廁","回來還沒","重新","編譯","真","搞到","快","崩潰","後來沒辦","法","只好","儘","可能","相關","文件","閱讀過","將","可能","執行","流程","都","先在","機寫","好","可能","會","出","現","狀況","都","盡","量","印","出","log","接著再","重新","push","commit","再","去","stage","上","pull","下","來測試","瀏覽器檢測","1","開始","說","想","網頁","上","執行","Apple","Pay","有一些","限制","條","件","Apple","文件","提供","檢測","方式","最","基本","檢","查瀏覽器","是否是","支援","if","window","ApplePaySession","123","The","Apple","Pay","JS","API","is","available","125","接著再檢","查","是否是","真","可用","Apple","Pay","這會","去","檢","查","是否是","可用","卡片","話顯示","Apple","Pay","按鈕","if","window","ApplePaySession","123","var","merchantIdentifier","x","27","example","com","store","x","27","var","promise","ApplePaySession","canMakePaymentsWithActiveCard","merchantIdentifier","promise","then","function","canMakePayments","123","if","canMakePayments","Display","Apple","Pay","Buttons","here","125","125","踩雷","3","前面","花","這麼","久的","努力","環境","都","弄好","要測試時","發現怎麼","都","無","法","執行","TayPay","串接","Apple","Pay","function","最","後檢","查","同事","瀏覽器後","發現","原","來","瀏覽器沒","支援","明明","條","件","都","符合","Apple","要求","條","件","電腦","跟手","機","都","登","入","相同","Apple","ID","手","機","上","Apple","Pay","綁","定","信用卡","Safari","瀏覽器","不","能用","Orz","同事","電腦","也是","一台","一台","不行","雖然現","寫這","篇文章","時候","safari","好像","支援","Apple","Pay","三天","前","到底","發生甚麼狀況","真","完全","摸","不","著頭緒","唯一","做","改","變","昨天","借用","同事","開發用","Apple","ID","登","入","電腦來測試","Apple","Pay","然後","登出","並","登","入","回","Apple","ID","神奇的","事情","這麼發生","贛","之前","兩","三天","開發","時候","大","部份","code","需要","先在","機盲寫","再上","stage","上","進行測試","小","改","動","還","必","須","使用","手","機接著","1","條線","電腦","開啟","Safari","網頁檢閱器","類似","Chrome","上","開發者","工具","1","樣","卻難用","10","倍","以上","真","開發","很艱辛","Apple","Pay","Payment","Request","總算","開始","接近","Apple","Pay","核心","目前","總算","進","入","呼唤","Apple","Pay","階","段","看","過","TayPay","提供","文件","Apple","官方","文件","大概","理解","需要","提供","一份","資料後","來","建立","Apple","Pay","Session","才","會","呼唤","出","Apple","Pay","介面","var","request","123","countryCode","x","27","US","x","27","currencyCode","x","27","USD","x","27","supportedNetworks","x","27","visa","x","27","x","27","masterCard","x","27","x","27","amex","x","27","x","27","discover","x","27","merchantCapabilities","x","27","supports","3","DS","x","27","total","123","label","x","27","Your","Merchant","Name","x","27","amount","x","27","10.00","x","27","125","125","var","session","new","ApplePaySession","3","request","好","很簡單麻","這麼簡單","不用","特地","寫這","篇文章","來宣洩這","1","週","不快了","左","看","右","看","上","看","下","看","完全","沒寫錯","呼唤","TayPay","API","會沒","反","應","只好","改用","Apple","Pay","提供","sample","code","來測試","怎麼試","都","沒","反","應","到底","發生什麼事啊","踩雷","4","雖然","中途","看到","噴","出","1","個錯誤訊息","Must","create","a","new","ApplePaySession","from","a","user","gesture","handler","沒","很","在乎","後來","真","沒","招","才","回頭來","研究","這問題","這個","意思","呼唤","Apple","Pay","必","須","使用者","操作","行為來產生","心想","難","還","監視","使用者","事","不是","們家規","定","按鈕","後來","同事","討論","一下","後","想到","雖然","也是","使用者","下","Apple","Pay","做","按鈕後","才","呼唤","不","過礙於","改版","後","訂購","流程","必","須","先","建立","訂單","然後","才能","呼唤","Apple","Pay","該","不","會","真","為這","原","跳過","建立","訂單","步","驟後","手","機畫","面","終於彈","出","Apple","Pay","介面","咁","真","內牛滿","面","為","看到","這個畫","面","都","已","經","耗","三天","這麼","1","來訂購","流程","肯定","要再調整","一想","這裡","不由","滴下","男","兒淚來","為","每次","流程","調整","就要","改","很久","常","常會再多","出","很多","garbage","code","眼看","著這天","快","下班","程式","碼","整理","整理","設計師約","一下","隔天討論","流程","調整","隔天","設計師討論","目前","這樣","結帳","流程","無","法","建立","訂單","時","馬","上","呼唤","Apple","Pay","必","須","建立","訂單後","重新","計算","台","幣計價","金額","過渡","1","頁資料確認","再讓","使用者","顆","黑黑","","Pay","才能","順利","出","Apple","Pay","來","付款","再討論","好","要調整","流程","後","盡","可能","修改","最少","方式","進行","總算","1","週","最","後","一天","整個","流程","都","搞定","這週","扣掉","週","1","下午","處理別","問題","週","2","上午","看","醫生","串接","Line","Pay","約","一天","剩下","時間","全都","來","Apple","Pay","耗","接下","來","再多測試整個訂購","流程","希望","週順利","上","線","PS","實","中途","遇到","問題","這些","光是","1","開始","Apple","Developer","帳號","弄","好久","本来","最高","權限","主管","好","兒剛","好","離職","為","Merchant","Identity","Certificate","上","傳","花","很多","時間"]},{"title":"2018建立安全PHP軟體指南","url":"https://soarlin.github.io/2017/12/18/The-2018-Guide-to-Building-Secure-PHP-Software/","content":"\n\n\nPHP Versions\nDependency Management\nRecommended Packages\n\n\nHTTPS and Browser Security\nSecurity Headers\nSubresource Integrity\nDocument Relationships\n\n\nDeveloping Secure PHP Software\nDatabase Interaction\nFile Uploads\nCross-Site Scripting (XSS)\nCross-Site Request Forgery (CSRF)\nXML Attacks (XXE, XPath Injection)\nDeserialization and PHP Object Injection\nPassword Hashing\nGeneral-Purpose Cryptography\n\n\nSpecialized Use-Cases\nSearchable Encryption\nToken-based Authentication without Side-Channels\nDeveloping Secure APIs\nSecurity Event Logging with Chronicle\n\n\n作者後記\nResources\n\n\n\n原文網址：https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software\n隨著將到來的 2018 年，一般技術人員（尤其是網路開發者）必須拋棄原有開發安全 PHP 應用軟體的舊習與信念。尤其是對於許多不相信這樣壯舉的人來說。本指南作為「PHP: The Right Way」電子書（繁中版）的補充，強調的是安全性，而不是一般PHP程式開發者主題（如：代碼風格）\n\nPHP Versions\n簡而言之：建議在 2018 年運行 PHP 7.2, 並計劃在 2019年初轉換到 PHP 7.3\n\nPHP 7.2 已經在 2017-11-30 釋出。\n在撰寫本文時，僅有 PHP 7.1 與 7.2 會得到 PHP 開發人員的積極支援，而 PHP 5.6 和 7.0 大約會在一年內得到安全性修正。\n一些提供舊版本PHP的長期支援(LTS)作業系統，這樣的做法通常被認為是有害的。尤其是，在它們增加安全補丁時，不一併增加PHP版號的壞習慣，使得很難推論這些PHP版本的安全性。\n因此，無論供應商做出了什麼承諾，只要你能夠幫忙，就應該努力在任何時候運行被主動支持的PHP版本。這樣的話，即使最終只購買一個安全版本，持續升級的工作也會讓你的生活免受不愉快的驚喜。\n\n\nDependency Management\n簡而言之：使用 Composer\n\n用於PHP生態系統最先進的依賴管理解決方案是 Composer。我們強烈推薦可以去看「PHP: The Right Way」裡面有專門介紹 Composer 入門的部分\n如果您不使用 Composer 來管理專案的依賴關係，最終會導致您依賴的某個軟件庫嚴重過時，然後將會讓利用舊版本漏洞的電腦犯罪份子有機可趁。\n重要：在開發軟體的時候，請記得更新依賴軟件庫的版本，可使用這行指令：\ncomposer update\n\n如果您正在做一些特殊的事情，需要使用PHP擴展（用C語言編寫），那麼就不能用 Composer 來安裝，需要使用 PECL。\n\nRecommended Packages不論你在開發什麼，幾乎可以肯定你會受益於這些依賴套件。這也是大多數 PHP 開發人員推薦的（PHPUnit, PHP-CS-Fixer 等等）\nroave/security-advisories\nRoave’s security-advisories 套件使用 Friends of PHP repository 來確保你的專案不依賴任何已知容易受攻擊的軟件庫。\ncomposer require roave/security-advisories:dev-master\n\n或者您可以將您的 composer.lock 文件上傳到 Sensio Labs，作為自動化漏洞評估工作流程的一部分，用來提醒任何過舊的軟件套。\nvimeo/psalm\nPsalm 是一個靜態分析工具，可以幫助找出代碼中可能存在的錯誤。雖然還有其他不錯的靜態分析工具（比如Phan和PHPStan都很好），如果發現需要支援 PHP 5的話，Psalm 是 PHP 5.4+ 靜態分析工具的首選。\n使用 Psalm 相當容易：\n# Version 1 doesn&#x27;t exist yet, but it will one day:composer require --dev vimeo/psalm:^0# Only do this once:vendor/bin/psalm --init# Do this as often as you need:vendor/bin/psalm\n\n如果是第一次在現有的代碼上運行，可能會看到很多紅色。除非你正在建構像WordPress一樣大的應用程式，不然將很要很費力的才能通過所有的測試。\n無論您使用那種靜態分析工具，我們都建議你將它放入現有的持續整合流程中，並在每次程式碼有變動後執行檢查。\n\nHTTPS and Browser Security\n簡而言之：HTTPS, 要被測試過，安全的檔頭\n\n在2018年，瀏覽網站將不在被接受只用不安全的HTTP，幸運的是，由於ACME協議和Let’s Encrypt證書頒發機構，將可以免費獲得以及自動更新TLS證書。\n整合 ACME 到網站是小事一件\n\nCaddy: 自動地綁定了\nApache: 很快地就可以在 mod_md 上用。在那之前，網路上有很多不錯的教學可以參考。\nNginx: 相對直接了當(?)\n\n你可能會想“好吧！我有一個TLS證書了，現在我必須在網站安全且快速之前花費幾個小時來搞這些設定配置”。不！Mozilla 會幫助你。你可以使用配置生成器來根據目標受眾建構推薦的密碼套件\n如果您希望您的網站安全，HTTPS(基於TLS的HTTP)是絕對 non-negotiable(不可協商？)的。使用HTTPS可以立即消除對用戶的多種攻擊(中間人內容注入、竊聽、replay攻擊以及若干形式的 session 操作，否則會允許用戶模擬)\n\nSecurity Headers然而在您的服務上使用HTTPS確實為您的用戶提供了許多安全性與性能方面的好處，您還可以更近一步通過利用瀏覽器的其他安全功能。當中大部分涉及到與您內容一起發送的HTTP響應檔頭。\n\nContent-Security-Policy\n\n您需要這個檔頭，因為它可以對瀏覽器允許載入內部和外部資源進行詳細控制，進而替跨網域攻擊提供有效的防禦。\n請參閱CSP-Builder，以便快速簡便地部署/管理 Content-Security-Policy。\n為了更深入的分析，Scott Helme 對 Content-Security-Policy 檔頭的介紹是個很好的入門\n\n\nExpect-CT\n\n您需要這個，因為它通過強迫不良行為者將他們錯誤發放證書的證據發佈到可公開驗證的附加數據結構中，增加這一層針對流氓/受損證書頒發機構的保護。瞭解更多Expect-CT\n最初將它設為 enforce,max-age=30，並增加 max-age 直到你確定這樣不會造成服務中斷\n\n\nReferrer-Policy\n\n您需要這個，因為它允許你控制你是否洩漏有關用戶行為信息給第三方\nScott Helme 再一次的深入的介紹 Referrer-Policy 檔頭\n設定為 same-origin 或 no-referrer 除非你有其他理由來設置的更寬鬆\n\n\nStrict-Transport-Security\n\n您需要這個，因為他告訴瀏覽器強制所有功能請求(requests)透過同源的HTTPS而不是不安全的HTTP。\n第一次部署時設定 max-age=30，然後當確定沒有任何內容會中斷的時候，將此值增大 (e.g. 31536000)\n\n\nX-Content-Type-Options\n\n您需要這個，因為 MIME 類型的混淆可能會導致不可預期的結果，包括在奇怪邊際情況下允許 XSS 漏洞，最好伴著一個標準的 Content-Type 檔頭\n設為 nosniff 除非你需要其他默認的狀況 (e.g. 用於檔案下載)\n\n\nX-Frame-Options\n\n您需要這個，因為它可以讓你防止點擊劫持(clickjacking)\n設為 DENY (或 SAMEORIGIN 當你使用  這元素時)\n\n\nX-XSS-Protection\n\n您需要這個，因為它啟用了一些瀏覽器在默認情況下未啟用的 anti-XSS 功能\n設定 1; mode=block\n\n\n\n同樣的，如果您使用 PHP 內建的 session 管理功能(建議使用)，您可能需要調用 seeion_start() ，如下所示：\nsession_start([    &#x27;cookie_httponly&#x27; =&gt; true,    &#x27;cookie_secure&#x27; =&gt; true]);\n\n這會強制您的應用程式在 HTTP-Only 或安全標誌下發送 session id 時，防止被 XSS 攻擊竊取用戶資料，且強制他們分別通過 HTTPS 發送，這在之前 2015 年部落格文章中有介紹 secure PHP sessions\n\nSubresource Integrity在日後您可能會使用 CDN 的方式來載入 JavaScript / CSS 框架。\n資安工程師已經注意到一個明顯的缺失；如果很多網站使用 CDN 來提供他們的內容，那麼 CDN 遭到盜用並且更換內容後，將可會影響到上千的網站。\n使用 subresource integrity\nSubresource integrity (SRI) 允許你將 CDN 服務的文件內容進行 hash 處理。SRI 目前只允許使用安全的加密 hash 方法，這表示攻擊者不可能生成跟原始文件內容 hash 後相同的文件。\n舉個例子: Bootstrap v4-alpha uses SRI in their CDN example snippet\n&lt;link    rel=&quot;stylesheet&quot;    href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css&quot;    integrity=&quot;sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ&quot;    crossorigin=&quot;anonymous&quot;/&gt;&lt;script    src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js&quot;    integrity=&quot;sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn&quot;    crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n\n\nDocument Relationships網頁開發人員經常在超連結上設置目標屬性(e.g. target=&quot;_blank&quot;)在新視窗開啟連結，但是，如果沒有使用 rel=&quot;noopener&quot; 屬性，則可能允許開啟的頁面來控制原始頁面\n別這麼做，這會讓 example.com 有可能來控制你目前的頁面\n&lt;a href=&quot;http://example.com&quot; target=&quot;_blank&quot;&gt;Click here&lt;/a&gt;\n請替換成，這樣開啟新視窗到 example.com 時，就不用擔心會有惡意的第三方想來操控原本的頁面。\n&lt;a href=&quot;https://example.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Click here&lt;/a&gt;\n進一步閱讀\n\nDeveloping Secure PHP Software如果應用程式安全性對你是個新的議題，可先從 A Gentle Introduction to Application Security(應用程式安全簡介) 開始。大多數資安專家指出，開發人員可以使用 OWASP Top 10 等資源。\n但是，大多數常見的漏洞可以看作是相同的高級別安全問題實例（代碼與資料沒有完全分離，邏輯不健全，不安全的操作環境，或殘破的密碼協議）。長遠來看，我們會假設教育這些安全新手，對這些安全問題有更簡單、更基本的理解以及如何解決這些問題，將會朔造更好的安全工程。\n\nDatabase Interaction\n深入來說: 防止 PHP 應用程序中的 SQL Injection\n\n如果在撰寫 SQL 查詢語句，請確定是使用 prepared statements 的方式來將透過網路傳遞進來的參數傳遞進去，而不是用字串相接的方式來組出 SQL 語句。此外，確定不是使用 emulated prepared statements\n這裡用 EasyDB 舉例\n/* Insecure code: */$query = $pdo-&gt;query(&quot;SELECT * FROM users WHERE username = &#x27;&quot; . $_GET[&#x27;username&#x27;] . &quot;&#x27;&quot;);\n請替換成這樣的語法\n/* Secure against SQL injection: */$results = $easydb-&gt;row(&quot;SELECT * FROM users WHERE username = ?&quot;, $_GET[&#x27;username&#x27;]);\n還有其他資料庫抽象層提供了相同的安全性（EasyDB實際背後使用了PDO，避免使用到 emulation prepared statement 來防止安全問題），只要使用者輸入不會影響到查詢的結構，就很安全。(這包括了 stored procedures)\n\nFile Uploads\n深入來說：如何安全地允許使用者上傳檔案\n\n接受檔案上傳是有風險的，但是可以安全地做到這點，只要採取一些基本的預防措施。也就是說：防止上傳的檔案可直接存取，這種方式可能意外的讓他們能夠被執行。上傳的檔案應該只能是唯讀或可讀可寫，永遠不能被執行。\n如果你的網站根目錄為 /var/www/example.com，你將不會希望檔案存放到 /var/www/example.com/uploaded_files。反之，你希望將檔案放在不能直接存取的獨立目錄中(e.g. `/var/www/example.com-uploaded/)，避免以外的執行了 server 端的 script 並開啟遠端代碼執行。\n更簡潔的解決辦法是將根目錄後移一層(如: /var/www/example.com/public)\n檔案上傳的另一個問題是，安全的下載他們\n\nSVG 檔案，當直接訪問時，將可能會執行用戶端瀏覽器的 JavaScript 代碼，即使 MIME 類型是 image/ 開頭\n如上所述，MIME sniffing 可能會導致被攻擊，可以參照 X-Content-Type-Options\n如果你放棄先前關於如何安全地儲存上傳文件的建議，攻擊者可透過瀏覽器直接上傳 .php 或 .phtml 來執行任意代碼，進而讓他們獲得伺服器的完整控制權。\n\n\nCross-Site Scripting (XSS)\n深入來說：你需要知道一切關於 PHP 中的跨站腳本攻擊\n\n實際上，XSS 和 SQL injection 一樣容易。我們可用個簡單易用的 API 來將檔案結構與資料分離。不幸的是，在實際經驗上，大多數 Web 開發人員將生成一長串的 HTML 並將它發送到 HTTP 的響應中，這不只在 PHP 開發中見到，這只是一般常見的 Web 開發方式。\n減輕 XSS 漏洞不是一個失敗的原因。 但是，瀏覽器安全部分中的所有內容突然變得非常相關。 簡而言之:\n\n輸出永遠記得跳脫(escape)，輸入則不用。如果乾淨的資料放在資料庫中，發現其他地方有 SQL 注入式攻擊(SQL injection)，攻擊者可以惡意軟體完全繞過 XSS 的保護來污染這些資料。\n如果您使用的框架樣板引擎有提供自動上下文過濾，請使用它來讓框架變得安全。\necho htmlentities($string, ENT_QUOTES | ENT_HTML5, &#39;UTF-8&#39;);是個有安全有效的方法來阻止 UTF-8 編碼頁面上所有的 XSS 攻擊，但不允許字串內有 HTML 編碼。\n如果允許你使用 Markdown 語法來替代 HTML，就盡可能別用 HTML\n如果你需要使用 HTML 而非樣版引擎的話，請使用 HTML Purifier，HTML Purifier 不適合用在 HTML 轉譯的上下文。\n\n\nCross-Site Request Forgery (CSRF)跨網站偽造請求是種混淆副攻擊，通常藉著欺騙用戶瀏覽器或提高用戶權限來，代替攻擊者執行惡意的 HTTP 請求。\n一般情況下可以透過簡單的兩步驟來解決：\n\n使用 HTTPS，這是先決條件，在沒有 HTTPS 的情況下連線就相對不安全，不過 HTTPS 並不能制止 CSRF。\n添加基本的挑戰響應機制的驗證(challenge-response)\n\n\n為每個表單加入一個隱藏的表單屬性\n填入安全的隨機碼(稱為 token)\n驗證表單是否提供這隱藏屬性，是否符合預期\n\n我們寫了個 Anti-CSRF 的函式庫來更進階處理：\n\n你可以使每個 token 只能使用一次來，來防止重複攻擊\n多個 token 存放在後端\ntoken 到期後記得替換成新的\n每個 token 綁定到特定的 URL\n如果一個 token 洩漏，就無法在不同的內容中使用\nToken 可以綁定到特定IP\nv2.1版之後，token 就可以被重複使用(為了 AJAX 調用)\n\n如果你用的框架沒有做到 CSRF 漏洞的處理，記得使用 Anti-CSRF。在不久的將來，可以使用 SameSite cookies 來防止 CSRF 攻擊。\n\nXML Attacks (XXE, XPath Injection)在執行大量 XML 處理的應用程序中存在兩個主要的漏洞：\n\nXML External Entities（XXE）\nXPath Injection\n\nXXE 攻擊可以啟動本地/遠端包含攻擊執行的文件。早期著名的有 Google Docs 遭到 XXE 攻擊，但是在他們大量操作 XML 的商業應用程序之外大部分是聞所未聞的。\n針對 XXE 襲擊的主要緩解措施如下：\nlibxml_disable_entity_loader(true);\nXPath Injection 與 SQL injection 很像，不過是使用 XML 檔案。幸運的是，PHP 生態中要將用戶輸入的值傳入 XPath 是很罕見的。反之不幸的是，也意味著 PHP 生態中不存在可用的最佳解法，最好的方法是在任何有關 XPath 查詢的資料上使用允許的字符當作白名單。白名單比黑名單來得安全。\n&lt;?phpdeclare(strict_types=1);class SafeXPathEscaper&#123;    /**     * @param string $input     * @return string     */    public static function allowAlphaNumeric(string $input): string    &#123;        return \\preg_replace(&#x27;#[^A-Za-z0-9]#&#x27;, &#x27;&#x27;, $input);    &#125;    /**     * @param string $input     * @return string     */    public static function allowNumeric(string $input): string    &#123;        return \\preg_replace(&#x27;#[^0-9]#&#x27;, &#x27;&#x27;, $input);    &#125;&#125;// Usage:$selected = $xml-&gt;xpath(    &quot;/user/username/&quot; . SafeXPathEscaper::allowAlphaNumeric(        $_GET[&#x27;username&#x27;]    ));\n\n\nDeserialization and PHP Object Injection\n深入來說：在 PHP 中安全地實現(反)序列化\n\n如果將不可靠的數據傳入 unserialize()，通常會是下面兩個結果之一：\n\nPHP Object Injection，它可以被用來啟動一連串反應並觸發其他被誤用的物件漏洞。\nPHP 直譯器本身的記憶體損壞\n\n大多數開發者喜歡用 JSON 來做序列化，這對改善軟體安全是有幫助的，但是記住 json_decode() 容易受到透過 hash 碰撞造成的阻斷式攻擊(hash-collision denial-of-service (Hash-DoS))，不幸的是 PHP 的 Hash-DoS 問題還沒能完全解決。\n從 djb33 遷移到 SipHash，對於字串的輸入，hash 輸出最高為設為 1，對於整數輸入設置為 0，在每個請求時使用 CSPRNG(密碼學偽隨機數生成器，英文：Cryptographically secure pseudorandom number generator，通稱CSPRNG)，將能完全解決這問題。\n不幸的是，PHP 團隊還沒有準備好放棄他們在 PHP 7 中取得的性能提升，所以說服他們放棄 djb33（這個速度非常快，但是不安全），轉而支持SipHash（雖然速度不如 djb33 快，但更安全），這是一個很難解決的問題。如果效能受到重大影響，可能會阻礙在未來版本被採用，進而影響到安全性。\n所以，最好的做法是：\n\n使用 JSON，因為比 unserialize() 安全\n如果可以，在反序列化輸入內容前先驗證過\n對於提供給最終用戶的數據，透過只有網路伺服器才知道的密鑰使用 sodium_crypto_auth() 和 sodium_crypto_auth_verify()\n對於提供給第三方的數據，請他們透過 sodium_crypto_sign() 來對 JSON 做簽署，並搭配第三公鑰使用 sodium_crypto_sign_open() 來做驗證\n如果需要對 hex 或 base64 編碼傳輸進行簽署，也可以使用分離的簽署 API\n\n\n如果無法驗證 JSON 字串，請嚴格限速並阻止 IP 地址來減少重複的違規者\n\n\n\n\nPassword Hashing\n深入來說：在2016年如何安全地儲存您的密碼\n\n安全的密碼儲存曾經是個激烈的議題，但現在實作起來相當微不足道，特別是在 PHP 中：\n$hash = \\password_hash($password, PASSWORD_DEFAULT);if (\\password_verify($password, $hash)) &#123;    // Authenticated.    if (\\password_needs_rehash($hash, PASSWORD_DEFAULT)) &#123;        // Rehash, update database.    &#125;&#125;\n你甚至不用知道背後使用什麼演算法，如果使用了最新版本的 PHP，也就會使用當前最新的演算法，並且只要有新的演算法可用，用戶的密碼也會被自動升級。不論妳做什麼，都不要做 WordPress 做過的事。\n如果你很好奇，從 PHP 5.5 到 PHP 7.2 默認的演算法是 bcrypt，未來可能改用密碼 hash 大賽冠軍的 Argon2。如果您以前沒有使用 password_* API，並且有傳統的 hash 需要遷移，請確保以這種方式進行。很多公司弄錯，最有名的是 Yahoo，最近不正確的升級了傳統的 hash 似乎導致了 Apple 最近的 iamroot 錯誤。\n\nGeneral-Purpose Cryptography這是我們寫的另一個主題：\n\n正確使用加密和認證(2015)\n如何在PHP中安全地產生隨機字符串和整數(2015)\n推薦：為您的PHP項目選擇正確的加密庫：指南（2015）\n建議：You Wouldn’t Base64 a Password - Cryptography Decoded（2015）\nCryptographically Secure PHP Development(2017)\n推薦：Libsodium快速參考：類似命名的函數及其使用案例（2017）\n\n一般來說，您總是希望使用 Sodium 密碼函式庫（libsodium）進行應用層的加密，如果你需要支援 PHP 7.2 之前的版本，可以使用 sodium_compat來假裝用戶也在 7.2 的版本。\n在特殊情況下，因為嚴格的演算法選擇與相互操作上，您可以需要不同的函式庫。如果有疑問，可以諮詢密碼專家，來了解密碼選擇和密碼工程師實作上是否安全。\n\nSpecialized Use-Cases現在您已經掌握了2018年以後構建安全PHP應用程序的基礎知識，接下來我們來看一些更專業的用例\n\nSearchable Encryption\n深入來說：使用PHP和SQL構建可搜索的加密資料庫\n\n可搜索的加密資料庫是理想的，但普遍被認為是不太可能實現的。上面的文章試圖讓讀者通過我們的解決方案來發展得更深入，但實際上：\n\n設計您的架構，database compromise 不會讓攻擊者訪問您的加密金鑰\n在一個密鑰下加密數據\n基於 HMAC 或具有靜態 salt 的安全KDF(如: Argon2)創建多個索引（具有它們自己獨特的密鑰）。\n可選：放棄第三步驟，使用布隆過濾器(Bloom filter)\n在 SELECT 查詢結果使用步驟3或4來輸出\n解密結果\n\n這過程的任何一步都可以根據使用情況來斟酌。\n\nToken-based Authentication without Side-Channels\n深入來說：Split Tokens: Token-Based Authentication Protocols without Side-Channels\n\n說到資料庫，你知道 SELECT 查詢在理論上可能是定時訊息洩漏的來源。簡單的遷移：\n\n把驗證的 token 減少一半\n使用一半的 SELECT 查詢在理論上可能是定時訊息洩漏的來源。\n在常數時間內驗證後半部\n\n\n您可以選擇將後半部分的 hash 存在資料庫中，而不是半個 token。這對於只能使用一次的 token 是有意義的;像是密碼重置或“記住我”\n\n這樣即時使用了定時洩漏所竊取來的一半 token，剩下的另一半需要強烈的攻擊才能成功。\n\nDeveloping Secure APIs\n深入來說：使用 Sapient 來強化 PHP 支援的 API\n\n我們開發了 Secure API ENgineering Toolkit SAPIENT來確保兩台伺服器間的身份驗證不用費太多力氣。除了 HTTPS 提供的安全性外，Sapinet 允許您使用共享密鑰或公鑰加密來加密/驗證訊息。\n這使您可以使用 Ed25519 對 API 請求和響應進行身份驗證，或者將消息加密到只能由接收方服務器的密鑰解密，即使存在中間人攻擊者並設有流氓/入侵 證書頒發機構。\n由於每個 HTTP 訓息都通過安全密碼進行身份驗證，因此可以安全地使用它來代替有狀態 token 雜耍協議（例如OAuth）。但是，在密碼學方面，在不做任何規範的事情之前，總要確保他們的實現是由專家研究的。\n所有 Sapient 使用的密碼都由 Sodium 密碼術函式庫提供。\n進一步閱讀:\n\nSapient Documentation\nSapient Tutorial\nSapient Specification\n\nParagon Initiative Enterprises 已經在其許多產品（包括許多開源軟體專案）中使用了 Sapient，並將繼續為 Sapient 用戶組合添加軟件項目。\n\nSecurity Event Logging with Chronicle\n深入來說：Chronicle 會讓你質疑區塊鏈技術的需求\n\nChronicle 是個基於 hash-chain 資料結構的 只進行追加(append-only)加密帳本，引起了許多公司對”區塊鏈”技術的興趣。除了只進行追加(append-only)加密帳本具創造性之外，Chronicle 集成到 SIEM 中時也有優點，因為您可以發送安全關鍵事件到私有的 Chronicle 中，並且它們保持不可變。如果您的 Chronicle 設置為將其摘要散列交叉簽名到其他 Chronicle 中，或是還有其他重製您 Chronicle 內容的實例，攻擊者將很難篡改您的安全事件日誌。通過 Chronicle，您可以獲得區塊鏈的所有彈性，而沒有任何隱私，性能或彈性問題。要將資料發佈到本地的 Chronicle，您可以使用任何與 Sapient 兼容的 API，但最簡單的解決方案稱為 Quill。\n\n作者後記一個聰明的讀者可能注意到我們引用了很多我們自己的工作（部落格文章和開源軟件），但我們不僅僅是引用了我們自己的工作。\n這不是偶然的。\n自從我們於2015年初成立以來，我們一直在編寫安全性相關的函式庫，並致力於提高 PHP 生態系統的安全性。\n我們已經介紹了很多，我們的資安工程師（他們最近在 PHP 核心中推行更安全的加密技術，只是要到 PHP 7.2），並不擅長宣揚他的工作或興趣完成的作品。對於我們多年來開發的工具或函式庫，你可能有一半沒聽過，關於這點我很抱歉。\n但是，我們也不可能成為各方面的先行者，所以我們在可能的情況下，選擇了認為與公眾利益更一致的專業工作，而不藏私。這就是為什麼瀏覽器安全專用的許多部分都參考了 Scott Helme 和公司的工作，他們在為開發人員提供這些容易理解的新安全功能。\n本指南當然不是詳盡的。寫出不安全代碼的方法幾乎和撰寫代碼一樣多。安全是一種心態，而不是目的性。隨著上面所寫的一切與提供的資源，我們希望這將有助於全世界的開發人員從今天開始用 PHP 開發安全的軟體。\n\nResources如果您已經按照本篇上的所有內容進行了操作，並且需要更多內容，那麼您可能會對我們策劃的閱讀列表感興趣，以便學習應用程序安全性。\n如果你已經寫出了足夠安全的代碼，並且希望我們從資安工程師的角度來提供指教。這正是我們提供的服務。\n[打廣告部分先省略]\n接下來是 PHP 和資訊安全社區提供的資源列表，這些資源幫助互聯網更加安全：\n\nPHP: The Right Way，線上免費的現代PHP開發指南\nMozilla’s SSL Config Generator\nLet’s Encrypt，通過證書頒發機構提供免費 TLS 證書來創造更安全的網路。\nQualys SSL Labs 提供一個快速又簡單的工具來測試 TLS 配置，幾乎每個人都用這個來解決他們安全憑證相關問題。\nSSL Checker 提供SSL檢查的工具，介面友善好操作，網站上還有其他有用的工具可以參考使用。\nSecurity Headers 讓您可以使用瀏覽器安全功能來保護您的用戶，且驗證網站安全。\nReport-URI 一個不錯的免費網路資源，用來開始檢查檔頭安全。如果有發現 XSS 的媒介，會被通報到 Report-URI，讓 Report-URI 彙整這些問題來提供你更好的服務。\nThe PHP Security Advent Calendar by the team behind RIPSTech。\nSnuffleupagus, 一個安全導向的 PHP 模組 (有很大程度是被遺棄的 Suhosin 精神繼承者).\nPHP Delusions，一個致力於更好地使用PHP的網站。大部分的口氣都有點自負，但作者對技術的準確性和清晰度的奉獻使得它值得一讀，特別是對於那些不太喜歡PDO功能的人來說。\nHave I Been Pwned? 幫助用戶找出他們過去的資料是否洩漏。\n\n","title_tokenize":["2018","建立","安全","PHP","軟體","指南"],"content_tokenize":["PHP","Versions","Dependency","Management","Recommended","Packages","HTTPS","and","Browser","Security","Security","Headers","Subresource","Integrity","Document","Relationships","Developing","Secure","PHP","Software","Database","Interaction","File","Uploads","Cross","Site","Scripting","XSS","Cross","Site","Request","Forgery","CSRF","XML","Attacks","XXE","XPath","Injection","Deserialization","and","PHP","Object","Injection","Password","Hashing","General","Purpose","Cryptography","Specialized","Use","Cases","Searchable","Encryption","Token","based","Authentication","without","Side","Channels","Developing","Secure","APIs","Security","Event","Logging","with","Chronicle","作者","後記","Resources","原文","網址","https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software","隨著將","來","2018","年","技術人員","尤其是","網路開發者","必","須拋棄","原有","開發","安","全","PHP","應用軟體","舊習與","信心","尤其是","對於許多","不相信","這樣壯舉","人來說","指南","作","為","PHP","The","Right","Way","電","子","書","繁","中","版","補充","強調","安全性","而不是","PHP","程式","開發者主題","代","碼風格","PHP","Versions","簡","建議","2018","年","運行","PHP","7.2","並計劃","2019","年初","轉換","PHP","7.3","PHP","7.2","已","經","2017","11","30","釋","出","撰寫","本文","時","僅","PHP","7.1","與","7.2","會","PHP","開發人員","積極","支援","PHP","5.6","7.0","大","約會","一年","內","得到","安全性","修正","提供","舊","版本","PHP","長","期","支援","LTS","作","業系統","這樣","做法","通常","認為","有害的","尤其是","們","增加","安","全","補丁時","不一","併","增加","PHP","版號","壞習慣","很難","推","論這些","PHP","版本","安全性","無論","供","應商","做出","什麼承諾","夠幫忙","應該","努力","在任","何時候運行","主動","支","持","PHP","版本","這樣","話","最","終","只","購買","1","個","安全","版本","持","續升級","工作","會讓","生活","免受","不愉快","驚喜","Dependency","Management","簡","使用","Composer","用於","PHP","生態系統","最早","進","依賴","理解","決","方案","Composer","們強烈","推","薦","去","看","PHP","The","Right","Way","裡","面","專門介紹","Composer","入","門","部","分","不","使用","Composer","來","管理","專案","依賴關係","最","終會導致您依賴","某個軟","件","庫嚴","重","過時","然後將會讓","利用","舊","版本","漏洞","電腦","犯法","份子","機","重要","開發軟體","時候","請記","更新","依賴軟","件","庫","版本","使用","這行","指令","composer","update","正在","做","特殊的","事情","需要","使用","PHP","擴展","C","語言編寫","麼","不","能用","Composer","來","安","裝","需要","使用","PECL","Recommended","Packages","不","論","開發什麼","幾","肯定","會","受益","於這些依賴","套件","這","也是","大多","數","PHP","開發人員","推","薦","PHPUnit","PHP","CS","Fixer","roave","security","advisories","Roave","s","security","advisories","套件","使用","Friends","of","PHP","repository","來確","保","專案","不依","賴","已知","容易","受","攻","擊","軟","件","庫","composer","require","roave","security","advisories","dev","master","將您","composer","lock","文件","上","傳","Sensio","Labs","作","為","動化","漏洞","評","估","工作","流程","一部分","用來","提示","過舊","軟","件","套","vimeo","psalm","Psalm","1","個靜態","分析","工具","幫助","找出","代","碼","中","可能","存在","錯誤","雖然還","不","錯","靜態","分析","工具","Phan","PHPStan","都","很好","發現","需要","支援","PHP","5","話","Psalm","PHP","5.4","靜態","分析","工具","首","選","使用","Psalm","相當","容易","Version","1","doesn","x","27","t","exist","yet","but","it","will","one","day","composer","require","dev","vimeo","psalm","0","Only","do","this","once","vendor","bin","psalm","init","Do","this","as","often","as","you","need","vendor","bin","psalm","第一次","現","代","碼","上","運行","可能","會","看到","很多","紅色","正","在建","構","WordPress","1","樣","大的","應用","程式","將很要很費力","才能","通過","測試","無論您","使用","種靜態","分析","工具","們","都","建議","將","放入","現","持","續","整合","流程","中","並","每次","程式","碼","變動後執行檢","查","HTTPS","and","Browser","Security","簡","HTTPS","測試過","安","全的","檔頭","2018年","瀏覽網站將","不在","接受","只用","不安全","HTTP","幸運","於","ACME","協議","Let","s","Encrypt","證書頒發機構","將","費獲","動","更新","TLS","證書","整合","ACME","網站","小事","一件","Caddy","動","綁","定","Apache","很快","mod","md","上","之前","網","路上","很多","不","錯","教學","參","考","Nginx","相對","直接了","當","可能","會想","好吧","1","個","TLS","證書","現","必","須","網站","安全","快速","之前","花費幾個","小","時來","弄","這些設","定","配置","不","Mozilla","會幫助","使用","配置","生成器","來根據目標受眾建構","推","薦","密碼","套件","希望","網站","安全","HTTPS","基於","TLS","HTTP","絕對","non","negotiable","不可","協商","使用","HTTPS","立即","消除","對用戶","多種","攻","擊","中","間人內容","注入","竊聽","replay","攻","擊","若干","情势","session","操作","否","則會允許用戶模擬","Security","Headers","服務","上","使用","HTTPS","確實為您","用戶","提供","許多","安全性","與","性能","方面","好","處","您還","更","近","一步","通過","利用","瀏覽器","安全","功能","當","中","大部分","涉及到","與您內容","一起","發送","HTTP","響應檔頭","Content","Security","Policy","需要","這個檔頭","為","對瀏覽器允許載","入","內","部","外部","資源進行詳細","控制","進","替跨網域","攻","擊","提供","有效的","防","禦","請參閱","CSP","Builder","快速","簡便","部署","管理","Content","Security","Policy","為","更深","入","分析","Scott","Helme","對","Content","Security","Policy","檔頭","介紹","個","很好","入","門","Expect","CT","需要","這個","為","通過強迫","不良","行為者將","們錯誤發","放","證書","證據發佈","公開驗證","附加","數據結構","中","增加","這","1","層針對","流氓","受損證書頒發機構","保","護","瞭解","更多","Expect","CT","最初","將","設為","enforce","max","age","30","並","增加","max","age","直到","確","定","這樣","不","會","造成","服務","中","斷","Referrer","Policy","需要","這個","為","允許","控制","是否是","洩漏","關用戶行為","信息","給","第三方","Scott","Helme","再一次","深入的","介紹","Referrer","Policy","檔頭","設","定","為","same","origin","no","referrer","理由","來設置","更","寬鬆","Strict","Transport","Security","需要","這個","為","告","訴瀏覽器強制","有功","請","求","requests","透過","同源","HTTPS","而不是","不安全","HTTP","第一次","部署","時設","定","max","age","30","然後當確","定","沒","內容會","中","斷","時候","將","值","增大","e","g","31536000","X","Content","Type","Options","需要","這個","為","MIME","類型","混淆","可能","會導致","不可","預","期","結果","包括","奇怪","邊際情況","下","允許","XSS","漏洞","最好","伴著","1","個標準","Content","Type","檔頭","設為","nosniff","需要","默認","狀況","e","g","用於檔案","下","載","X","Frame","Options","需要","這個","為","讓","避免","點擊","劫持","clickjacking","設為","DENY","SAMEORIGIN","當","使用","這","元素","時","X","XSS","Protection","需要","這個","為","啟用","瀏覽器","默認情況","下","未","啟用","anti","XSS","功能","設","定","1","mode","block","樣","使用","PHP","內建","session","管理","功能","建議","使用","可能","需要","調用","seeion","start","以下","示","session","start","x","27","cookie","httponly","x","27","gt","true","x","27","cookie","secure","x","27","gt","true","這會強制您","應用","程式","HTTP","Only","安","全","標誌","下","發送","session","id","時","避免","XSS","攻","擊竊","取用","戶資料","強制","們","分","別通過","HTTPS","發送","這","之前","2015","年","部落","格","文章","中","介紹","secure","PHP","sessions","Subresource","Integrity","日","後您","可能","會","使用","CDN","方式","來載","入","JavaScript","CSS","框架","資","安","工程","師","已","經","注意到","1","個明顯","缺失","很多","網站","使用","CDN","來","提供","們","內容","麼","CDN","遭到","盜用並","更","換內容後","將","會影響","上千","網站","使用","subresource","integrity","Subresource","integrity","SRI","允許","將","CDN","服務","文件","內容進行","hash","處理","SRI","目前","只","允許","使用","安全的","加密","hash","方法","這","表示","攻","擊者","不可能","生成","原始","文件","內容","hash","後","相同","文件","舉個","例子","Bootstrap","v","4","alpha","uses","SRI","in","their","CDN","example","snippet","lt","link","rel","quot","stylesheet","quot","href","quot","https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css&quot;","integrity","quot","sha","384","rwoIResjU","2","yc","3","z","8","GV","NPeZWAv","56","rSmLldC","3","R","AZzGRnGxQQKnKkoFVhFQhNUwEyJ","quot","crossorigin","quot","anonymous","quot","gt","lt","script","src","quot","https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js&quot;","integrity","quot","sha","384","vBWWzlZJ","8","ea","9","aCX","4","pEW","3","rVHjgjt","7","zpkNpZk","02","D","9","phzyeVkE","jo","0","ieGizqPLForn","quot","crossorigin","quot","anonymous","quot","gt","lt","script","gt","Document","Relationships","網頁開發人員經","常","超","連結","上","設置目標屬性","e","g","target","quot","blank","quot","新","視窗開啟連結","沒","使用","rel","quot","noopener","quot","屬性","則","可能","允許開啟","頁","面","來","控制","原始","頁","面","別這麼","做","這會讓","example","com","有可能","來","控制","目前","頁","面","lt","a","href","quot","http://example.com&quot;","target","quot","blank","quot","gt","Click","here","lt","a","gt","請替換","成","這樣開啟","新","視窗","example","com","時","不用","擔心會","惡意","第三","方想來","操控","本来","頁","面","lt","a","href","quot","https://example.com&quot;","target","quot","blank","quot","rel","quot","noopener","noreferrer","quot","gt","Click","here","lt","a","gt","進","一步","閱讀","Developing","Secure","PHP","Software","應用","程式","安全性","對","個","新的","議題","先","從","A","Gentle","Introduction","to","Application","Security","應用","程式","安全","簡介","開始","大多","數資","安","專家","指出","開發人員","使用","OWASP","Top","10","資源","大多","數","常見","漏洞","看做","相同","高級別","安全","問題實例","代","碼與資料沒","完全","分","離","邏輯","不","健全","不安全","操作","環境","殘破","密碼協議","長遠來","看","們會假設","教育","這些","安全","新手","對這些","安","全","問題","更","簡單","更","基本的","理解","解決這些問題","將會朔造","更好","安全工程","Database","Interaction","深入","來說","避免","PHP","應用","程序","中的","SQL","Injection","撰寫","SQL","查詢語","句","請確","定","使用","prepared","statements","方式","來將透過網路傳遞進來","參數傳遞進","去","而不是","用字","串","相接","方式","來組","出","SQL","語","句","確","定","不是","使用","emulated","prepared","statements","這裡用","EasyDB","舉例","Insecure","code","query","pdo","gt","query","quot","SELECT","FROM","users","WHERE","username","x","27","quot","GET","x","27","username","x","27","quot","x","27","quot","請替換","成","這樣","語","法","Secure","against","SQL","injection","results","easydb","gt","row","quot","SELECT","FROM","users","WHERE","username","quot","GET","x","27","username","x","27","還","資料庫","抽象","層","提供","相同","安全性","EasyDB","實際","背","後","使用","PDO","避免","使用","emulation","prepared","statement","來","避免","安全","問題","使用者","輸","入","不","會影響","查詢","結構","很","安","全","這","包括","stored","procedures","File","Uploads","深入","來說","安全地","允許","使用者","上","傳檔案","接受","檔案","上","傳","風險","安全地","做到","這點","採","取","基本的","預","防","措施","也就是","說","避免","上","傳","檔案","直接","存取","這種","方式","可能","意外的","讓","們","夠","執行","上","傳","檔案應該","只","唯讀","讀","寫","永遠","不能","執行","網站根目錄為","var","www","example","com","將","不","會","希望","檔案","寄存","var","www","example","com","uploaded","files","希望","將檔案","放","不能","直接","存取","獨立目錄","中","e","g","var","www","example","com","uploaded","避免","以外","執行","server","端","script","並開啟遠端","代","碼執行","更","簡潔","解決辦","法","將根目錄後移","1","層","var","www","example","com","public","檔案","上","傳","另外一","個問題","安","全的","下","載","們","SVG","檔案","當","直接","訪問時","將","可能","會執行用戶端瀏覽器","JavaScript","代","碼","MIME","類型","image","開頭","MIME","sniffing","可能","會導致","攻","擊","參","X","Content","Type","Options","放","棄","先前","關於","安全地","儲","存","上","傳","文件","建議","攻","擊者","透過瀏覽器","直","接上","傳","php","phtml","來執行","任意","代","碼","進","讓","們獲","伺服器","完全","控制","權","Cross","Site","Scripting","XSS","深入","來說","需要","知道","關於","PHP","中的","跨站腳","攻","擊","實際","上","XSS","SQL","injection","1","樣","容易","們","可用","個簡單易用","API","來將檔案結構與資料","分","離","不幸的","實際經驗","上","大多","數","Web","開發人員將","生成","1","長串","HTML","並將","發","送到","HTTP","響應","中","這","PHP","開發","中","見","這","只","常見","Web","開發","方式","減輕","XSS","漏洞","不是","1","個失敗","缘由","瀏覽器","安全","部份","中的","所有","內容","突然","變","非常","相關","簡","輸","出","永遠記","跳脫","escape","輸","入","則","不用","乾淨","資料","放","資料庫","中","發現","其他地方","SQL","注入","式","攻","擊","SQL","injection","攻","擊者","惡意軟體","完全","繞過","XSS","保","護來","污染","這些資料","使用","框架","樣板","引擎","提供","動","上下文","過濾","請","使用","來讓","框架","變","安","全","echo","htmlentities","string","ENT","QUOTES","ENT","HTML","5","39","UTF","8","39","個","安全","有效的","方法","來","阻止","UTF","8","編碼頁","面上","所有","XSS","攻","擊","不","允許","字串","內","HTML","編碼","允許","使用","Markdown","語","法","來","替换","HTML","盡","可能","別用","HTML","需要","使用","HTML","非","樣版","引擎","話","請","使用","HTML","Purifier","HTML","Purifier","不","適","适用","HTML","轉譯","上下文","Cross","Site","Request","Forgery","CSRF","跨網站偽造請","求是","種","混淆","副","攻","擊","通常","藉著欺騙用戶瀏覽器","提高","用戶權限來","代替","攻","擊者執行惡意","HTTP","請","求","情況","下","透過簡單","兩","步","驟來解決","使用","HTTPS","這","先","決條","件","沒","HTTPS","情況","下","連線","相對","不安全","不","過","HTTPS","並","不能","制止","CSRF","添加","基本的","挑戰響應機制","驗證","challenge","response","為","個表單","加入","1","個隱藏","表單屬性","填","入","安","全的","隨機碼","稱為","token","驗證表單","是否是","提供","這隱藏屬性","是否是","符合","預","期","們寫","個","Anti","CSRF","函式庫來","更","進階處理","使","個","token","只能","使用","一次","來","來","避免","重","複","攻","擊","多個","token","寄存","後端","token","到期","後記","替換","成","新的","個","token","綁","定","特定","URL","1","個","token","洩漏","無","法","不同的","內容","中","使用","Token","綁","定","特定","IP","v","2.1","版","後","token","重","複","使用","為","AJAX","調用","框架","沒","做到","CSRF","漏洞","處理","記","使用","Anti","CSRF","不久","將來","使用","SameSite","cookies","來","避免","CSRF","攻","擊","XML","Attacks","XXE","XPath","Injection","執行","大","量","XML","處理","應用","程序","中","存","兩個","主要","漏洞","XML","External","Entities","XXE","XPath","Injection","XXE","攻","擊","啟動","本地","遠端","包括","攻","擊執行","文件","早期","著名的","Google","Docs","遭到","XXE","攻","擊","們","大量","操作","XML","商業應用","程序","以外","大部分","聞","未","聞","針對","XXE","襲擊","主要","緩解","措施","以下","libxml","disable","entity","loader","true","XPath","Injection","與","SQL","injection","很","不","過","使用","XML","檔案","幸運","PHP","生態","中","要將用戶輸","入","值傳","入","XPath","很罕見","不幸的","意味","著","PHP","生態","中","不存在","可用","最好","解法","最好","方法","在任","關","XPath","查詢","資料","上","使用","允許","字符","當","作","白名","單","白名","單","黑","名","單來","安","全","lt","phpdeclare","strict","types","1","class","SafeXPathEscaper","123","param","string","input","return","string","public","static","function","allowAlphaNumeric","string","input","string","123","return","preg","replace","x","27","A","Za","z","0","9","x","27","x","27","x","27","input","125","param","string","input","return","string","public","static","function","allowNumeric","string","input","string","123","return","preg","replace","x","27","0","9","x","27","x","27","x","27","input","125","125","Usage","selected","xml","gt","xpath","quot","user","username","quot","SafeXPathEscaper","allowAlphaNumeric","GET","x","27","username","x","27","Deserialization","and","PHP","Object","Injection","深入","來說","PHP","中","安","全地","實現","反","序列","化","將","不可靠","數據傳","入","unserialize","通常","會","下面","兩個結果","PHP","Object","Injection","用來啟動","1","連串","反","應並觸發","誤用","物件","漏洞","PHP","直","譯器","本身","記憶體損壞","大多","數開發者喜歡用","JSON","來","做","序列","化","這對","改进","軟體","安全","幫助","記住","json","decode","容易","遭到","透過","hash","碰撞","造成","阻斷式","攻","擊","hash","collision","denial","of","service","Hash","DoS","不幸的","PHP","Hash","DoS","問題還沒","完全","解決","從","djb","33","遷","移到","SipHash","對於","字串","輸","入","hash","輸","出","最高","為設為","1","對於整數輸","入","設置為","0","個請","求","時","使用","CSPRNG","密碼學偽隨機數","生成","器","英文","Cryptographically","secure","pseudorandom","number","generator","通稱","CSPRNG","將","完全","解決這問題","不幸的","PHP","團隊還沒","準備","好","放","棄","們","PHP","7","中","取","性能","提升","說服","們","放","棄","djb","33","這個","速度","非常","快","不安全","轉","支","持","SipHash","雖然","速度","djb","33","快","更","安","全","這","1","個很難解決","問題","效能","遭到","重大","影響","可能","會阻礙","未","來","版本","採用","進","影響","安全性","最好","做法","使用","JSON","為","unserialize","安全","反","序列","化輸","入","內容","前","先","驗證過","對於","提供","給","最","終用戶","數據","透過","網路","伺服器","才","知道","密鑰","使用","sodium","crypto","auth","sodium","crypto","auth","verify","對於","提供","給","第三方","數據","請","們透過","sodium","crypto","sign","來對","JSON","做","簽署","並","搭配","第三","公鑰","使用","sodium","crypto","sign","open","來","做","驗證","需要","對","hex","base","64","編碼傳輸進行簽署","使用","分","離","簽署","API","無","法","驗證","JSON","字串","請嚴格","限速","並","阻止","IP","地址","來減","少","重","複","違規者","Password","Hashing","深入","來說","2016年","安全地","儲","存","密碼","安","全的","密碼儲","存","曾經","個","激烈的","議題","現","實","作","來相當","微不足道","特","別","PHP","中","hash","password","hash","password","PASSWORD","DEFAULT","if","password","verify","password","hash","123","Authenticated","if","password","needs","rehash","hash","PASSWORD","DEFAULT","123","Rehash","update","database","125","125","不用","知道","背","後","使用","什麼","演算法","使用","最新","版本","PHP","會","使用","當","前","最新的","演算法","並","只","要有","新的","演算法","可用","用戶","密碼","會","動升級","不","論妳","做","什麼","都","不要","做","WordPress","做","過","事","很好","奇","從","PHP","5.5","PHP","7.2","默認","演算法","bcrypt","未","來","可能","改用","密碼","hash","大","賽冠軍","Argon","2","之前","沒","使用","password","API","並","傳統","hash","需要","遷移","請確","保","這種","方式","進行","很多","公司","弄錯","最","有名的","Yahoo","最近","不正","確","升級","傳統","hash","恍如","導致","Apple","最近","iamroot","錯誤","General","Purpose","Cryptography","這","們寫","另外一","個主題","正","確","使用","加密","認證","2015","何在","PHP","中","安全地","產生隨機","字符串","整數","2015","推","薦","為您","PHP","項目選擇","正","確","加密","庫","指南","2015","建議","You","Wouldn","t","Base","64","a","Password","Cryptography","Decoded","2015","Cryptographically","Secure","PHP","Development","2017","推","薦","Libsodium","快速","參","考","類似","命名","函數","使用","案例","2017","來說","您總","希望","使用","Sodium","密碼函式庫","libsodium","進行應用層","加密","需要","支援","PHP","7.2","之前","版本","使用","sodium","compat","來假裝用戶","7.2","版本","特殊","情況","下","為嚴格","演算法","選擇與","相互","操作","上","需要","不同的","函式庫","疑問","諮詢密碼專家","來","解密","碼選擇","密碼","工程","師實","作","上","是否是","安全","Specialized","Use","Cases","現","已","經","掌握","2018年","後構","建安","全","PHP","應用","程序","基礎知識","接下","來","們來","看","更","專業","用例","Searchable","Encryption","深入","來說","使用","PHP","SQL","構建","搜索","加密","資料庫","搜索","加密","資料庫","理想","普遍","認為","不","太","可能","實現","上面","文章","試圖讓讀者通過","們","解決","方案","來發展","更深","入","實際","上","設計您","架構","database","compromise","不","會讓","攻","擊者訪問您","加密","金鑰","1","個密鑰","下","加密","數據","基於","HMAC","具有","靜態","salt","安","全","KDF","Argon","2","創建多個","索引","具有","們","獨","特","密鑰","選","放","棄","第三步","驟","使用","布隆過濾器","Bloom","filter","SELECT","查詢結果","使用","步","驟","3","4","來輸","出","解密","結果","這過程","一步","都","根據","使用","情況來","推敲","Token","based","Authentication","without","Side","Channels","深入","來說","Split","Tokens","Token","Based","Authentication","Protocols","without","Side","Channels","說","資料庫","知道","SELECT","查詢","在理","論","上","可能","定","時訊息洩漏","來源","簡單","遷移","驗證","token","減","少","一半","使用","一半","SELECT","查詢","在理","論","上","可能","定","時訊息洩漏","來源","常數時間內驗證後半","部","選擇將後半","部份","hash","存","資料庫","中","而不是","半個","token","這對於","只能","使用","一次","token","故意","義","像是","密碼","重置","記住","這樣","時","使用","定","時洩漏","竊","取","來","一半","token","剩下","另一半","需要","強烈","攻","擊","才能","成功","Developing","Secure","APIs","深入","來說","使用","Sapient","來強化","PHP","支援","API","們開發","Secure","API","ENgineering","Toolkit","SAPIENT","來確","保","兩","台","伺服器","間","身份","驗證","不用","費","太多","力氣","HTTPS","提供","安全性","外","Sapinet","允許您","使用","共享","密鑰","公鑰","加密","來","加密","驗證訊息","這使您","使用","Ed","25519","對","API","請","求和","響應進行","身份","驗證","將","消息","加密","只能","接收","方服務器","密鑰","解密","存在","中","間人","攻","擊者並設","流氓","入侵","證書頒發機構","於","個","HTTP","訓息","都","通過","安","全","密碼進行","身份","驗證","安全地","使用","來","代替","狀態","token","雜耍協議","OAuth","密碼學","方面","不做","規範","事情","之前","總要確","保","們","實現","專家","研究","所有","Sapient","使用","密碼","都","Sodium","密碼術函式庫","提供","進","一步","閱讀","Sapient","Documentation","Sapient","Tutorial","Sapient","Specification","Paragon","Initiative","Enterprises","已","經","許多產品","包括","許多開源軟體專案","中","使用","Sapient","並將繼續為","Sapient","用戶組","合","添加","軟","件","項目","Security","Event","Logging","with","Chronicle","深入","來說","Chronicle","會讓","質疑區塊鏈技術","需求","Chronicle","個基於","hash","chain","資料結構","只","進行","追加","append","only","加密","帳","引发","許多","公司","對","區塊鏈","技術","興趣","只","進行","追加","append","only","加密","帳","具","創造性","以外","Chronicle","集成","SIEM","中","時","優點","為您","發送","安全","關鍵","事件","私有","Chronicle","中","並","們","保持","不可","變","Chronicle","設置為將","摘要","散","列","交叉","簽","名","Chronicle","中","還","重","製您","Chronicle","內容","實例","攻","擊者將很難","篡改","安全","事件","日","誌","通過","Chronicle","獲","區塊鏈","所有","彈性","沒","隱私","性能","彈性問題","要將資料發佈","本地","Chronicle","使用","與","Sapient","兼容","API","最","簡單","解決","方案","稱為","Quill","作者","後記","1","個聰明","讀者","可能","注意到","們","援用","很多","們","工作","部落","格","文章","開源軟","件","們","不","僅僅","援用","們","工作","這","不是","偶然","從","們於","2015","年初","成立","來","們","編寫","安全性","相關","函式庫","並","致力","於","提高","PHP","生態系統","安全性","們","已","經介紹","很多","們","資","安","工程","師","們","最近","PHP","核心","中","推行","更","安全的","加密","技術","只","PHP","7.2","並","不","擅長宣揚","工作","興趣","完成","作品","對於","們","多年","來開發","工具","函式庫","可能","一半","沒聽過","關於這點","很","抱歉","們","不可能","成","為","各方面","先行者","們","可能","情況","下","選擇","認為與公眾","利益","更","一致","專業","工作","不","藏私","這","為什麼瀏覽器","安全","專用","許多","部份","都","參","考","Scott","Helme","公司","工作","們","為開發人員","提供","這些","容易","理解","新安","全功能","指南","當然","不是","詳盡","寫","出","不安全","代","碼","方法","幾","撰寫","代","碼","1","樣多","安","全","1","種心態","而不是","目的性","隨著","上面","寫","與","提供","資源","們","希望","這將","有助","於","全","世界","開發人員從","今天","開始用","PHP","開發","安","全的","軟體","Resources","已","經","本篇","上","所有","內容進行","操作","並","需要","更多","內容","麼您","可能","會對","們策劃","閱讀","列表","感興趣","學習應用","程序","安全性","已","經寫","出","足夠","安全的","代","碼","並","希望","們從資","安","工程","師","角度","來","提供","指教","這","正","們","提供","服務","廣","告","部份","先","省略","接下","來","PHP","資訊","安全","社區","提供","資源","列表","這些資源幫助互聯網","更加","安","全","PHP","The","Right","Way","線","上","免","費","現","代","PHP","開發","指南","Mozilla","s","SSL","Config","Generator","Let","s","Encrypt","通過證書頒發機構","提供","免","費","TLS","證書來創造","更","安","全的","網路","Qualys","SSL","Labs","提供","1","個","快速","簡單","工具","來測試","TLS","配置","幾","個人","都","用這個來解決","們","安","全","憑證相關問題","SSL","Checker","提供","SSL","檢","查","工具","介面","友善","好","操作","網","站上","還","有用","工具","參","考","使用","Security","Headers","讓您","使用","瀏覽器","安全","功能","來","保","護您","用戶","驗證網站","安","全","Report","URI","1","個","不","錯","免","費網路資源","用來開始檢","查檔頭","安","全","發現","XSS","媒介","會","通報","Report","URI","讓","Report","URI","彙整這些問題來","提供","更","好的","服務","The","PHP","Security","Advent","Calendar","by","the","team","behind","RIPSTech","Snuffleupagus","1","個","安","全","導","PHP","模組","很大","程度","遺棄","Suhosin","精神","繼承者","PHP","Delusions","1","個","致力","於","更好","使用","PHP","網站","大部分","口","氣","都","點","負","作者","對技術","準確性","清晰度","奉獻","值得","1","讀","特","別","對於","不","太","喜歡","PDO","功能","人來說","Have","I","Been","Pwned","幫助用戶","找出","們過","去","資料","是否是","洩漏"]},{"title":"常用CSS紀錄","url":"https://soarlin.github.io/2017/11/05/%E5%B8%B8%E7%94%A8CSS%E7%B4%80%E9%8C%84/","content":"已經兩個月沒更新 blog 了，感覺再不寫都快忘光 hexo, Travis CI 跟 elasticsearch 的使用了，不過先前已經將大部分的工作都自動化了，所以現在省事很多，只要 git push 後沒出問題的話\n最近一兩個月下來，本來有想說寫一下怎麼做 FB 產品目錄，不過感覺這個找相關文件看好像就好了，加上寫文章動力大減，就一直荒廢中，而工作也幾乎都是切版，套程式，雖然有花一點時間摸索一下 docker 跟 golang 可是礙於工作需完成的進度很趕，所以實在沒太多時間好好深入這兩個東西，覺得非常可惜！希望之後可以跟得上大家的進度，不要扯後腿。\n之所以寫這篇只是記錄一下最近幾次的切版習慣跟用法，以及一些常用的 mixin 函式\nSCSS 慣用目錄結構雖然我是寫 scss 語法，可是我好像都把目錄命名成 sass，不曉得當初怎麼想的，反正就參考吧！\n./sass├── main.scss├── modules│   ├── _common.scss│   ├── _component.scss│   ├── _mixins.scss│   ├── _normalize.scss│   └── _variables.scss└── partials    ├── _auth.scss    ├── _blog.scss    ├── _button.scss    ├── _category.scss    ├── _footer.scss    ├── _header.scss    ├── _list.scss    ├── _login.scss    ├── _modal.scss    ├── _order.scss    └── _smartbanner.scss\n\n主要就用 main.scss 來 import 其他檔案來編譯， modules 裡面放些比較通用的資源，如： normalize (不過有另外用 bootstrap 的話應該不用在 import 了)、網站 CSS 通用變數、mixin 函式等等，而另一個 partials 就可能依照頁面名稱、功能來撰寫相關 CSS\n\n所以 main.scss 的檔案大概就只會像這樣，這裡我還多了 body 的樣式，主要是用來控制全站頁面 body 的 padding\n@import &#x27;modules/normalize&#x27;;@import &#x27;modules/variables&#x27;;@import &#x27;modules/mixins&#x27;;@import &#x27;modules/common&#x27;;@import &#x27;modules/component&#x27;;@import &#x27;partials/button&#x27;;@import &#x27;partials/list&#x27;;@import &#x27;partials/smartbanner&#x27;;....@import &#x27;partials/login&#x27;;@import &#x27;partials/modal&#x27;;body &#123;    padding-top: 70px;&#125;\n\n常用 mixin function清除 float後來少用了，大多用 flexbox 排版了\n@mixin clearfix &#123;    &amp;::after &#123;        content: &quot;&quot;;        display: table;        clear: both;    &#125;&#125;// 使用上.my-container &#123;    @include clearfix;    padding: 10px 20px;    ....&#125;\n\n\n過長文字結尾省略多行的用法不是每個瀏覽器都適用\n@mixin ellipsis($line:1) &#123;    text-overflow: ellipsis;    overflow: hidden;    @if $line == 1 &#123;        white-space: nowrap;    &#125; @else &#123;        display: -webkit-box;        -webkit-line-clamp: $line;        -webkit-box-orient: vertical;    &#125;&#125;// 使用上, 標題過長省略(一行), 描述第三行後省略.card &#123;    .title &#123;        font-size: 1em;        line-height: 1.4;        width: 100%;        @include ellipsis;    &#125;    .description &#123;        font-size: .8em;        line-height: 1.2;        @include ellipsis(3);    &#125;&#125;\n\n容器, flexbox 排版(預設置中)@mixin size($w, $h:$w, $bdrs:0) &#123;    width: $w;    height: $h;    border-radius: $bdrs;&#125;@mixin flex($jc:center, $ai:center) &#123;    display: flex;    justify-content: $jc;    align-items: $ai;&#125;// 範例: 按鈕內文字置中.redeem-btn &#123;    @include size(80, 50, 6);    border: 1px solid #ccc;    font-size: 1em;    line-height: 1.3;    @include flex;&#125;\n\n空背景方便替換圖片\n@mixin no-image-bg &#123;    background-color: rgba(255,255,255, .1);    background-position: center center;    background-repeat: no-repeat;    background-size: cover;&#125;// 範例: 某封面圖.cover &#123;    @include size(160, 120, 10);    @include flex;    @include no-image-bg;&#125;// HTML 內搭配背景圖片使用&lt;div class=&quot;cover&quot; style=&quot;background-image:url(&#x27;path-to-cover-image&#x27;)&quot;&gt;  &lt;h3 class=&quot;title&quot;&gt;封面標題&lt;/h3&gt;&lt;/div&gt;\n\nRWD 使用這個之前好像有寫過，這裡詳細列出\n/* 尺寸變數 */$desktop-lg-min: 1200px;$desktop-max:    1199px;$tablet-max:      991px;$mobile-max:      767px;$mobile-min:      480px;@mixin lg-desktop &#123;    @media screen and (min-width: $desktop-lg-min) &#123;        @content;    &#125;&#125;@mixin desktop &#123;    @media screen and (max-width: $desktop-max) &#123;        @content;    &#125;&#125;@mixin tablet &#123;    @media screen and (max-width: $tablet-max) &#123;        @content;    &#125;&#125;@mixin phone &#123;    @media screen and (max-width: $mobile-max) &#123;        @content;    &#125;&#125;@mixin phoneV &#123;    @media screen and (max-width: $mobile-min) &#123;        @content;    &#125;&#125;// 使用範例.swiper-slide &#123;    width: calc(33.33% - 10px);    @include tablet &#123;        width: calc(50% - 10px);    &#125;    @include phone &#123;        width: calc(75% - 10px);    &#125;    @include phoneV &#123;        width: 100%;    &#125;&#125;\n\n捲軸隱藏, 非支援所有瀏覽器有時候覺得捲軸有點醜，可以在 Chrome 瀏覽器內隱藏起來，只是使用時要小心，使用者因此不曉得可以捲動，反而造成使用上的困擾\n.my-dropdown-list &#123;    max-height: 300px;    overflow-x: hidden;    overflow-y: scroll;    &amp;::-webkit-scrollbar &#123;        display: none;    &#125;&#125;\n\n另外最近幫網站切版，發現幾乎大量使用到 Swiper 這套件，而開始用這套件時，還是 3.4.2 版，而現在時過境遷，都更新到 4.0.1 版了，查閱的 API 資料也開始不適用了…感覺有點糟糕，要是全站套件更新，感覺是個大工程，只能先繼續使用舊版，而相關參數應該不會差太多，目前已知的是左右切換的按鈕參數寫法改變了\n這裡也記錄一下最常用的幾個參數\n// 必要 DOM&lt;div class=&quot;swiper-container&quot;&gt;  &lt;div class=&quot;swiper-wrapper&quot;&gt;    &lt;div class=&quot;swiper-slide&quot;&gt;Slide 1&lt;/div&gt;    &lt;div class=&quot;swiper-slide&quot;&gt;Slide 2&lt;/div&gt;    &lt;div class=&quot;swiper-slide&quot;&gt;Slide 3&lt;/div&gt;    ....  &lt;/div&gt;  &lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;&lt;/div&gt;// JSnew Swiper (&#x27;.swiper-container&#x27;, &#123;    freeMode: false,    freeModeSticky: false,    freeModeMomentumRatio: 5,    threshold: 50,    slidesPerView: &#x27;auto&#x27;,    spaceBetween: 30,    paginationClickable: true,    touchReleaseOnEdges: true,    prevButton: &#x27;.swiper-button-prev&#x27;,    nextButton: &#x27;.swiper-button-next&#x27;,    breakpoints: &#123;        991: &#123;            spaceBetween: 10,        &#125;,        1199: &#123;            spaceBetween: 15,        &#125;    &#125;&#125;);\n\n\nfreeMode 預設 false，如果設定成 tree, 在手機上滑動的時候，會非常平順，不過也不好定下來\nfreeModeSticky 在 free mode 下設定 true 好讓 slide 可以再鬆開滑動時，停在某一 slide 下\nfreeModeMomentumRatio 滑動釋放時的動量\nthreshold 行動裝置上, touch 時移動的容錯距離，在這範圍內不觸法 slider 滑動\nslidesPerView 指定每一頁 slider 要放幾個，當有給定 swiper-slide 寬度時，使用 auto 可自行排序，但是畫面會等 js 處理\nspaceBetween 每個 slide 中間的間距，在 slidesPerView 設定 auto 時，可以明顯感受出來\npaginationClickable 顧名思義，當有 pagination 時，可點擊下方小圓點來切換\ntouchReleaseOnEdges 有點忘了當初為何有用這個，好像是可以讓滑到 slider 邊緣時，繼續滑動吧？！\nbreakpoints 很好用，但是不一定常用，用來指定在不同螢幕寬度下，要變化的參數\n\n大概就先這樣吧！其實最近還有用到一個套件是 jquery.dotdotdot 的樣子，不過才剛使用沒多久，馬上就版本更新，害我後來想找舊版文件超難找，還好一開始有寫好一個版本可以參考，不然真的就 GG 了\n","title_tokenize":["经常使用","CSS","紀錄"],"content_tokenize":["已","經兩個","月","沒","更新","blog","感覺","再不","寫","都","快","忘","光","hexo","Travis","CI","elasticsearch","使用","不","過","先前","已","經將","大部分","工作","都","動化","現","省事","很多","git","push","後沒","出","問題","話","最近","1","兩個","月下","來","來","想說寫","一下","怎麼","做","FB","產","品目","錄","不","過感覺這個","找","相關","文件","看好","好了","加上","寫","文章","動力","大","減","1","直","荒廢","中","工作","幾","都","切版","套","程式","雖然","有花","1","點時間","摸索","一下","docker","golang","礙於","工作","需","完成","進度很趕","實","沒","太多","時間","好好","深入","這兩個東西","覺","非常","惋惜","希望","後","上","大家","進度","不要","扯","後腿","寫這篇","記錄","一下","最近","幾","次","切版習慣","用法","常用的","mixin","函式","SCSS","慣用目錄結構雖然","我是","寫","scss","語","法","好像","都","目錄","命名","成","sass","不","曉","當初怎麼想","反正","參","考","sass","main","scss","modules","common","scss","component","scss","mixins","scss","normalize","scss","variables","scss","partials","auth","scss","blog","scss","button","scss","category","scss","footer","scss","header","scss","list","scss","login","scss","modal","scss","order","scss","smartbanner","scss","主要","main","scss","來","import","檔案來編譯","modules","裡","面","放","些","較","通用","資源","normalize","不","過","bootstrap","話應該","不用","import","網站","CSS","通用","變數","mixin","函式","另外一","個","partials","可能","頁","面","名","稱","功能","來撰寫相關","CSS","main","scss","檔案","大概","只","會","這樣","這裡","還多","body","樣式","主要","用來","控制","全","站頁","面","body","padding","import","x","27","modules","normalize","x","27","import","x","27","modules","variables","x","27","import","x","27","modules","mixins","x","27","import","x","27","modules","common","x","27","import","x","27","modules","component","x","27","import","x","27","partials","button","x","27","import","x","27","partials","list","x","27","import","x","27","partials","smartbanner","x","27","import","x","27","partials","login","x","27","import","x","27","partials","modal","x","27","body","123","padding","top","70","px","125","经常使用","mixin","function","清除","float","後來","少","大","多用","flexbox","排版","mixin","clearfix","123","amp","after","123","content","quot","quot","display","table","clear","both","125","125","使用","上","my","container","123","include","clearfix","padding","10","px","20","px","125","過長","文字","結尾","省略","多行","用法","不是","個瀏覽器","都","適用","mixin","ellipsis","line","1","123","text","overflow","ellipsis","overflow","hidden","if","line","1","123","white","space","nowrap","125","else","123","display","webkit","box","webkit","line","clamp","line","webkit","box","orient","vertical","125","125","使用","上","標題過長","省略","一行","描写","三行","後","省略","card","123","title","123","font","size","1","em","line","height","1.4","width","100%","include","ellipsis","125","description","123","font","size","8","em","line","height","1.2","include","ellipsis","3","125","125","容器","flexbox","排版","預設置","中","mixin","size","w","h","w","bdrs","0","123","width","w","height","h","border","radius","bdrs","125","mixin","flex","jc","center","ai","center","123","display","flex","justify","content","jc","align","items","ai","125","範例","按鈕內","文字","置","中","redeem","btn","123","include","size","80","50","6","border","1","px","solid","ccc","font","size","1","em","line","height","1.3","include","flex","125","空","背景","方便","替換圖","片","mixin","no","image","bg","123","background","color","rgba","255","255","255","1","background","position","center","center","background","repeat","no","repeat","background","size","cover","125","範例","封面","圖","cover","123","include","size","160","120","10","include","flex","include","no","image","bg","125","HTML","內","搭配","背景","圖","片","使用","lt","div","class","quot","cover","quot","style","quot","background","image","url","x","27","path","to","cover","image","x","27","quot","gt","lt","h","3","class","quot","title","quot","gt","封面","標題","lt","h","3","gt","lt","div","gt","RWD","使用","這個","之前","好像","寫過","這裡詳細","列出","尺寸","變數","desktop","lg","min","1200","px","desktop","max","1199","px","tablet","max","991","px","mobile","max","767","px","mobile","min","480","px","mixin","lg","desktop","123","media","screen","and","min","width","desktop","lg","min","123","content","125","125","mixin","desktop","123","media","screen","and","max","width","desktop","max","123","content","125","125","mixin","tablet","123","media","screen","and","max","width","tablet","max","123","content","125","125","mixin","phone","123","media","screen","and","max","width","mobile","max","123","content","125","125","mixin","phoneV","123","media","screen","and","max","width","mobile","min","123","content","125","125","使用","範例","swiper","slide","123","width","calc","33.33%","10","px","include","tablet","123","width","calc","50%","10","px","125","include","phone","123","width","calc","75%","10","px","125","include","phoneV","123","width","100%","125","125","捲軸隱藏","非","支援","所有","瀏覽器","時候覺","捲軸","點醜","Chrome","瀏覽器內隱藏","來","使用","時要","当心","使用者","不","曉","捲動","反而","造成","使用","上","困","擾","my","dropdown","list","123","max","height","300","px","overflow","x","hidden","overflow","y","scroll","amp","webkit","scrollbar","123","display","none","125","125","最近","幫網站切版","發現幾","大量","使用","Swiper","這","套件","開始用這","套件","時","還","3.4.2","版","現","時過境遷","都","更新","4.0.1","版","查閱","API","資料","開始","不","適用","感覺","點","糟","全","站","套件","更新","感覺","個","大","工程","只","先","繼續","使用","舊版","相關參數應該","不","會","差","太多","目前","已知","左右","切換","按鈕參數寫","法","改","變","這裡","記錄","一下","最","常用的","幾個參數","必要","DOM","lt","div","class","quot","swiper","container","quot","gt","lt","div","class","quot","swiper","wrapper","quot","gt","lt","div","class","quot","swiper","slide","quot","gt","Slide","1","lt","div","gt","lt","div","class","quot","swiper","slide","quot","gt","Slide","2","lt","div","gt","lt","div","class","quot","swiper","slide","quot","gt","Slide","3","lt","div","gt","lt","div","gt","lt","div","class","quot","swiper","button","prev","quot","gt","lt","div","gt","lt","div","class","quot","swiper","button","next","quot","gt","lt","div","gt","lt","div","gt","JSnew","Swiper","x","27","swiper","container","x","27","123","freeMode","false","freeModeSticky","false","freeModeMomentumRatio","5","threshold","50","slidesPerView","x","27","auto","x","27","spaceBetween","30","paginationClickable","true","touchReleaseOnEdges","true","prevButton","x","27","swiper","button","prev","x","27","nextButton","x","27","swiper","button","next","x","27","breakpoints","123","991","123","spaceBetween","10","125","1199","123","spaceBetween","15","125","125","125","freeMode","預設","false","設","定","成","tree","在手","機","上","滑動","時候","會","非","常平順","不","過","也不","好","定下","來","freeModeSticky","free","mode","下","設","定","true","好","讓","slide","再鬆開滑動時","停在","某一","slide","下","freeModeMomentumRatio","滑動釋","放","時","動","量","threshold","行動裝置","上","touch","時移動","容錯距離","這範圍內","不","觸","法","slider","滑動","slidesPerView","指定","頁","slider","放","幾個","當","給","定","swiper","slide","寬度時","使用","auto","自行","排序","畫","面","會","js","處理","spaceBetween","個","slide","中","間","間距","slidesPerView","設","定","auto","時","明顯","感受","出","來","paginationClickable","顧","名","思義","當","pagination","時","點擊","下方","小","圓點來切換","touchReleaseOnEdges","點忘","當初為","有用","這個","好","像是","讓滑","slider","邊緣時","繼續滑動吧","breakpoints","很好","不一","定","经常使用","用來","指定","不同","螢幕寬度","下","要變化","參數","大概","先","這樣吧","實","最近","還","有用","1","個","套件","jquery","dotdotdot","樣","子","不","過","才","剛","使用","沒","多久","馬","上","版本","更新","害","後來想","找","舊版","文件","超","難","找","還","好","1","開始","寫","好","1","個","版本","參","考","真","GG"]},{"title":"Google Analytics與Facebook Pixel事件追蹤筆記","url":"https://soarlin.github.io/2017/09/02/Google-Analytics%E8%88%87Facebook-Pixel%E4%BA%8B%E4%BB%B6%E8%BF%BD%E8%B9%A4%E7%AD%86%E8%A8%98/","content":"Google Analytics基本作法每一頁都加上 pageview，這個真的太基本了，就不在浪費時間說明了\n使用事件追蹤事件追蹤主要分幾個參數可以使用\n\nCategory\nAction\nLabel\nValue (int, 可選擇)\n\n下面用個簡單的例子說明，如果想要對用戶登入、註冊進行事件追蹤，大概可以這樣設計\n\n\n\n說明\nCategory\nAction\nLabel\n\n\n\nEmail登入\nLogin\nClick\nEmail_Login\n\n\nFacebook登入\nLogin\nClick\nFacebook_Login\n\n\nEmail註冊\nRegister\nClick\nEmail_Register\n\n\nFacebook註冊\nRegister\nClick\nFacebook_Register\n\n\nJavaScript 程式碼說明，也可以看 Google Analytics的教學文件\n\nga(&#x27;send&#x27;, &#x27;event&#x27;, [eventCategory], [eventAction], [eventLabel], [eventValue], [fieldsObject]);\n\n設定目標GA增加目標，可以用來驗證 AdWords 廣告成果轉換率，以及在「轉換」頁籤中的分析統計資料\n目標設定的方式有四種，這裡只介紹有用過的兩種，一種是針對頁面來設定，一種是針對事件\n針對頁面設定目標決定好目標頁面填寫連結目標頁面網址，記得用反斜線/開頭，可以用以下三種方法\n\n完全相等的網址(e.g. /payment/product-123)\n開始路徑一樣(e.g. /payment/product-)\n正規表示式的網址寫法(e.g. /payment/product-[0-9]+)如果需要先經過其他頁面，再到目標頁面，才算完成目標的話，再將需要先經過的頁面寫上\n\n例如：目標是「進入商品購買頁面」，需要先經過商品頁面瀏覽，就記得在開啟「程序」，然後步驟內填上畫面網址\n針對事件設定目標將目標的事件先加入追蹤，假定目標為成功登入的事件進入目標詳情裡面的設定，記得跟當初事件追蹤用的 Category, Action, Label, Value(如果有的話)\n\n類別 = Login\n動作 = Click\n標籤 = Email_Login\n價值 (X) 不設定\n\n使用事件價值做為這項轉換的目標價值，這個意思是說如果事件本身有設定價值，可以用來當成這次目標達成的價值，不然可以自己設定一個金額，但不是每個目標都有價值，所以見仁見智了\n驗證目標這個步驟非常重要，當 GA 放置一段時間後，開始有資料統計後，再來設定目標會比較準確，因為可以透過驗證剛剛設定的目標，檢查是否到目前為止有出現過你想追蹤的目標，如果驗證的結果 &gt; 0.0%，就表示你設定沒錯啦！不然可能就是設定出問題或這目標在先前的統計資料裡還沒有資訊。\n電子商務追蹤這個追蹤肯定沒有自己的後台訂單追蹤來的準確，畢竟很容易遇到消費者退訂、取消訂單之類的，所以加入這個追蹤只能當作是參考用，應該會超過 87% 的程度與實際相符。\n使用方式：\n開始結帳的時候，先在頁面加入\nga(&#x27;require&#x27;, &#x27;ecommerce&#x27;);\n\n當商品加入購物車時可加入，如果是單一商品結帳畫面，可以再填寫結帳資訊時加入\nga(&#x27;ecommerce:addItem&#x27;, &#123;  &#x27;id&#x27;: 訂單ID,  &#x27;sku&#x27;: 商品ID,  &#x27;name&#x27;: 商店名稱-商品名稱,  &#x27;category&#x27;: 商品分類,  &#x27;price&#x27;: 訂單價格,  &#x27;quantity&#x27;: &#x27;1&#x27;,  &#x27;currency&#x27;: 幣別(e.g. TWD, HKD..)&#125;);\n\n交易(付款)成功時，加入\nga(&#x27;ecommerce:addTransaction&#x27;, &#123;    &#x27;id&#x27;         : 訂單ID or 商品ID,    &#x27;affiliation&#x27;: 商店名稱,    &#x27;revenue&#x27;    : 訂單價格,    &#x27;currency&#x27;   : 幣別&#125;);ga(&#x27;ecommerce:send&#x27;);\n\n若中途返回，訂單要釋放時\nga(&#x27;ecommerce:clear&#x27;);\n\nFacebook Pixel Tracking基本的像素追蹤，也是每頁加入 PageView 事件(注意大小寫，與GA不同)Chrome 擴充套件 **Facebook Pixel Helper **可以檢查\n事件已經定義9種標準事件，大致上已經夠用，可再自行增加事件定義，以下是以目前工作上使用的紀錄為例\n\n\n\n說明\nEvent Name\n參數\n備註\n\n\n\n完成註冊\nCompleteRegistration\n\n\n\n\n使用關鍵字搜尋時\nSearch\nsearch_string\n\n\n\n進入商品頁面\nViewContent\nvalue, currency, content_name, content_type, content_ids\n動態商品廣告中用到，必要參數 content_ids 與 content_type\n\n\n進入預訂享樂流程\nInitiateCheckout\ncontent_type, content_ids, content_name\n\n\n\n進入信用卡頁面\nAddToCart\nvalue, currency, content_name, content_type, content_ids\n動態商品廣告中用到，必要參數 content_ids 與 content_type\n\n\n新增信用卡資料\nAddPaymentInfo\nvalue, currency, content_name, content_ids\n\n\n\n訂單交易成功\nPurchase\nvalue, currency, content_name, content_type, content_ids\n動態商品廣告中用到，必要參數 content_ids 與 content_type\n\n\nViewContent 範例 :\nfbq(&#x27;track&#x27;, &#x27;ViewContent&#x27;, &#123;  content_type: &#x27;product&#x27;,// 固定名稱為 product  content_ids: [&#x27;204&#x27;],   // product_id, array  content_name: &#x27;店家名稱-商品名稱&#x27;,  value: 13,              // 價格,integer  currency: &#x27;TWD&#x27;&#125;);\n\nAddToCart 範例 :\nfbq(&#x27;track&#x27;, &#x27;AddToCart&#x27;, &#123;    content_type: &#x27;product&#x27;,    content_ids: [&#x27;204&#x27;],    content_name: &#x27;店家名稱-商品名稱&#x27;,    value: 68,    currency: &#x27;TWD&#x27;&#125;);\n\nPurchase 範例 :\nfbq(&#x27;track&#x27;, &#x27;Purchase&#x27;, &#123;    value: 68,    currency: &#x27;TWD&#x27;,    content_type: &#x27;product&#x27;,    content_ids: [&#x27;204&#x27;],    content_name: &#x27;店家名稱-商品名稱&#x27;&#125;);\n\n其實 FB Pixel 還有其他用途，算是用在商品目錄上，讓公司可以針對客戶再行銷使用\n使用情境像是，顧客A到網站上瀏覽了類別①的商品，也將商品加入購物車，但最後卻沒有完成結帳。\n這樣是不是很可惜，沒有好好把握到這位顧客，所以FB可已讓妳投廣告的時候打到精準的客戶，讓他再重新看到這項商品，溝引起他想買的慾望。有時候一次購買需要2~3次的推波助瀾才會成功，而FB的再行銷就可以在這邊用上，只是這個過程有點複雜，日後再補上另一篇詳細一點的介紹吧！(如果有人需要的話..XD，根據這網站的流量，我猜應該是沒人需要)\n","title_tokenize":["Google","Analytics","與","Facebook","Pixel","事件","追蹤筆記"],"content_tokenize":["Google","Analytics","基本","作法","頁","都","加上","pageview","這個","真","太","基本了","不在","浪費時間說","明了","使用","事件","追蹤","事件","追蹤","主要","分","幾個參數","使用","Category","Action","Label","Value","int","選擇","下面","用個簡單","例子","說明","想要","對用戶","登","入","註冊進","行事","件","追蹤","大概","這樣設計","說明","Category","Action","Label","Email","登","入","Login","Click","Email","Login","Facebook","登","入","Login","Click","Facebook","Login","Email","註冊","Register","Click","Email","Register","Facebook","註冊","Register","Click","Facebook","Register","JavaScript","程式","碼說明","看","Google","Analytics","教學","文件","ga","x","27","send","x","27","x","27","event","x","27","eventCategory","eventAction","eventLabel","eventValue","fieldsObject","設","定","目標","GA","增加","目標","用來驗證","AdWords","廣","告","成果","轉換率","轉換","頁籤","中的","分析","統計資料","目標設","定","方式","4","種","這裡","只","介紹","有用","過","兩種","1","種","針對頁","面","來設","定","1","種","針對","事件","針對頁","面","設","定","目標決","定","好","目標頁","面","填","寫連結目標頁","面","網址","記","得用","反","斜線","開頭","用以","下","3","種","方法","完全","相等","網址","e","g","payment","product","123","開始路徑","1","樣","e","g","payment","product","正","規","表示","式","網址寫","法","e","g","payment","product","0","9","需要","先","經過","頁","面","再","目標頁","面","才","算","完成","目標","話","再將","需要","先","經過","頁","面","寫","上","目標","進","入","商品","購買頁","面","需要","先","經過","商品","頁","面","瀏覽","記","開啟","程序","然後","步","驟內","填","上","畫","面","網址","針對","事件","設","定","目標將目標","事件","先","加入","追蹤","假定","目標為","成功","登","入","事件","進","入","目標詳情裡","面","設","定","記","當初","事件","追蹤用","Category","Action","Label","Value","話","類別","Login","動","作","Click","標籤","Email","Login","價值","X","不","設","定","使用","事件","價值","做","為這項轉換","目標價值","這個","意思","說","事件","本身","設","定","價值","用來當","成","這","次","目標達","成","價值","設","定","1","個金額","不是","個目標","都","價值","見仁見智","驗證目標這個","步","驟","非常重要","當","GA","放置","一段","時間後","開始","資料統計後","再來設","定","目標會","較準確","為","透過驗證剛剛設","定","目標","檢","查","是否是","目前","為止","出","現過","你想","追蹤","目標","驗證","結果","gt","0.0%","表示","設","定","沒錯","可能","設","定出","問題","這目標","在先","前","統計資料裡還沒","資訊","電","子","商務追蹤這個追蹤","肯定","沒","後","台","訂單追蹤來","準確","畢","竟","很容易","遇到","消費者","退","訂","取消","訂單","類","加入","這個追蹤","只能","當","作","參","考","應該會","超","過","87%","程度","與實際","符合","使用","方式","開始結帳","時候","先在","頁","面","加入","ga","x","27","require","x","27","x","27","ecommerce","x","27","當","商品","加入","購物車時","加入","單","1","商品","結帳畫","面","再","填","寫結帳資訊時","加入","ga","x","27","ecommerce","addItem","x","27","123","x","27","id","x","27","訂單","ID","x","27","sku","x","27","商品","ID","x","27","name","x","27","商店","名","稱","商品","名","稱","x","27","category","x","27","商品","分","類","x","27","price","x","27","訂單價格","x","27","quantity","x","27","x","27","1","x","27","x","27","currency","x","27","幣別","e","g","TWD","HKD","125","交易","付款","成功","時","加入","ga","x","27","ecommerce","addTransaction","x","27","123","x","27","id","x","27","訂單","ID","or","商品","ID","x","27","affiliation","x","27","商店","名","稱","x","27","revenue","x","27","訂單價格","x","27","currency","x","27","幣別","125","ga","x","27","ecommerce","send","x","27","中途","返回","訂單要釋","放","時","ga","x","27","ecommerce","clear","x","27","Facebook","Pixel","Tracking","基本的","像素","追蹤","也是","頁","加入","PageView","事件","注意","大小","寫","與","GA","不同","Chrome","擴充","套件","Facebook","Pixel","Helper","檢","查","事件","已","經","定","義","9","種標準","事件","大致上","已","經夠用","再","自行","增加","事件","定","義","以下","是以","目前","工作","上","使用","紀錄為例","說明","Event","Name","參數","備註","完成","註冊","CompleteRegistration","使用","關鍵字搜尋時","Search","search","string","進","入","商品","頁","面","ViewContent","value","currency","content","name","content","type","content","ids","動態","商品","廣","告","中用","必要","參數","content","ids","與","content","type","進","入","預訂享樂","流程","InitiateCheckout","content","type","content","ids","content","name","進","入","信用卡","頁","面","AddToCart","value","currency","content","name","content","type","content","ids","動態","商品","廣","告","中用","必要","參數","content","ids","與","content","type","新增","信用卡","資料","AddPaymentInfo","value","currency","content","name","content","ids","訂單","交易","成功","Purchase","value","currency","content","name","content","type","content","ids","動態","商品","廣","告","中用","必要","參數","content","ids","與","content","type","ViewContent","範例","fbq","x","27","track","x","27","x","27","ViewContent","x","27","123","content","type","x","27","product","x","27","固定","名","稱為","product","content","ids","x","27","204","x","27","product","id","array","content","name","x","27","店家","名","稱","商品","名","稱","x","27","value","13","價格","integer","currency","x","27","TWD","x","27","125","AddToCart","範例","fbq","x","27","track","x","27","x","27","AddToCart","x","27","123","content","type","x","27","product","x","27","content","ids","x","27","204","x","27","content","name","x","27","店家","名","稱","商品","名","稱","x","27","value","68","currency","x","27","TWD","x","27","125","Purchase","範例","fbq","x","27","track","x","27","x","27","Purchase","x","27","123","value","68","currency","x","27","TWD","x","27","content","type","x","27","product","x","27","content","ids","x","27","204","x","27","content","name","x","27","店家","名","稱","商品","名","稱","x","27","125","實","FB","Pixel","還","用处","算是","商品","目錄","上","讓","公司","針對客戶","再行","銷","使用","使用","情境","像是","顧客","A","網","站上","瀏覽","類別①","商品","將","商品","加入","購物車","最","後卻沒","完成","結帳","這樣","是否是","很","惋惜","沒","好好","掌控","這","位","顧客","FB","已","讓妳投廣","告","時候","精準","客戶","讓","再","重新","看到","這項","商品","溝","引发","想買","慾望","時候","一次","購買","需要","2","3次","推","波助瀾","才","會","成功","FB","再行","銷","這邊","用上","只","這個過程","點複雜","日","後再補","上","另外一","篇詳細","1","點","介紹吧","有人","需要","話","XD","根據這網站","流量","猜應該","沒人","需要"]},{"title":"Android 中 Webview 內的 Facebook login","url":"https://soarlin.github.io/2017/07/02/Android%E4%B8%ADWebview%E5%85%A7%E7%9A%84Facebook-login/","content":"前言上週一一大早本來想說，好不容易完成多語系的初版，可以再稍微修改調整，準備上code來測試，誰知道突然來了個問題，原本以為這問題應該半天可以處理掉，誰知道竟然花了整整三天，真的改到好崩潰啊！\n遇到的問題目前正在開發的 mobile web 為了搭配某銀行的優惠活動，所以之前趕緊把整個購買流程跟會員登入的功能都補上去，結果請對方先行測試，果然都不會測試，等活動一上線才發現問題，問題就是 App 內開啟網頁後，facebook 登入的功能就…無效了！？\n處理經過嘗試一 - 手動建立登入流程原本就是按照Facebook Developer內文件教學來撰寫的，但還是出問題，只好先暫時改用Facebook登入裡面的進階做法了，裡面有個手動建立登入流程，照著這個做法，把原本fb登入呼叫API的行爲替換成一個帶有回傳網址(redirect_uri)的連結。\n不過很偷懶，回傳網址還是跟原本頁面一樣，只是在透過 js 把一些回傳參數接起來處理，另外也把一些對方反應我們提供的優惠怎麼只有新註冊會員才有，而原本我們服務的舊會員沒有享受到優惠這樣不行啦！所以除了改登入問題，順便偷渡了這個商業邏輯的處理上去。\n\n結果\n\niOS 裝置都可以正常登入啦！(撒花～)\nAndroid 裝置一樣毫無反應….Orz (哭哭)\n\n嘗試二 - 獨立寫一個 FB callback 頁面星期一的所有努力，遇到了 Android 還是無解，所以想說乖乖地另外寫一頁來接收 facebook callback 吧！當然也把授權的行為改到 PHP 端來處理，不過我又想偷吃步，把授權後的資料丟給 JS 再來完成後續的登入/註冊流程。這也不能怪我，原本 js 端把所有的註冊登入流程都寫好了，code 不拿來用真的很可惜啊！\n結果\n\niOS 裝置都可以正常登入啦！(撒花～)\nAndroid 裝置畫面跳轉了，但是….沒下文了 (哭哭)\n\n嘗試三 - 克難的建立測試方式因為只有 Android 裝置不行，而我本身也沒有 Android 的裝置可以測試，為了讓自己好測試 debug，所以出動了 Genymotion 模擬器，不得不說這個模擬器真的是之前試過可以在電腦內快速啟動的 Android 模擬器，要是用原本 Android Studio 裡另外安裝的模擬器，可能要跑到天荒地老了。\n然後請同事幫忙開發一個只有 webview 的測試 APP，好讓我能夠隨時測試，雖然聽起來很美好，但是真的透過 Android Studio build code 然後在 install pkg 到模擬器內，這過程真的是很漫長，而且電腦會跑的很慢，風扇也會持續發出哀號，我難過啊～\n但是暫時也只能先這樣進行，不過沒辦法在 app 內的 webview 看到 js 印出來的 console.log 真的非常難除錯，感覺都只能用猜的，不過後來去 google 了一下類似的問題，發現了幾行神奇的 sample code 就順手把它加到原本 android 那個精簡的測試 app 內，然後再重新 build，結果這次竟然就成功了！！\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;    CookieManager.getInstance().setAcceptThirdPartyCookies(myWebView, true);&#125;\n\n後來查了一下，這是讓 webview 內的頁面能夠接受第三方寫入 cookie，也就是說 facebook js sdk 的登入流程中，會將一些必要的 cookie 寫到我的網站內，但是 Android APP 內的 webview 預設是不允許的，所以 facebook 登入才會一直失敗沒反應，也就是說原本寫好的登入流程，得全部改用 php 來重寫…崩潰！\n嘗試四 - 使用 Facebook PHP SDK最後真的沒其他招了，只好乖乖的去改用 PHP SDK 來撰寫這整段 facebook 登入註冊流程，然後順便把 fb 新註冊會員的資料確認頁面一起做好，雖然 android 的程式只要加個三行 code 就可以解決這個問題，但是日後可能還有其他合作夥伴，不可能要求每個廠商都把他們 android 的 app 重新 build 一版上架，而且還要對方的用戶都有更新才行，所以還是得自己來，只是內心都會想著「人家只要改個三行code就好了，可是我卻要改三天」，唉～\n星期三花了一整天再改寫 PHP，到了下班前測了幾台 android 裝置，發現除了 android 7.0 以上的機器外，其他版本的 android 都正常了，這…到底該不該高興呢？抱著哀傷的心情先上一版 code 吧！至少可以先解決 android 7.0 版本以下的用戶，回家再來想想會是什麼問題。\n嘗試五 - Facebook OAuth 重新導向 URI回家的一路上，一直在思考，為何 Android 有的裝置跳轉網址還是會有問題，後來才想到原因應該是 Facebook OAuth 重新導向 URI 的白名單設定問題，其實原本的名單也不算有錯，只是我寫的是https的網址，但是在這幾天改寫手動登入流程的過程中，需要重組 callback uri，可是我自己本機開發時，抓到 server 的 port 都很正常是 443，但是 code 一到 server 上，會抓到 80 port，造成我一開始的重組的 redirect_uri 有問題，只好都改成寫死是https開頭的網址。\n但是 facebook App 的登入設定內，OAuth redirect uri 卻不能寫死https，必須改成http才能正常運作，我實在搞不懂這到底是什麼道理啊！！！！！\n只能推測目前公司的 server 都是架設在 ELB 後面，而是透過 ELB 來做 port forward，所以原本 server 不一定要強制將網頁導向 443 port，所以 php code 才會都抓到 80 port。\n結論！能動最重要因為我沒有管理 AWS 的權限，所以不太清楚 ELB 設定的如何，只能用推測的來猜想結論，反正自己的結論就是 code 裡面產生的 redirect_uri 一定要 https 開頭，但是 facebook app 設定一定要 http 開頭，然後就可以在這微妙的設定下達成平衡，程式就可以正常運作了～喔耶！\n","title_tokenize":["Android","中","Webview","內","Facebook","login"],"content_tokenize":["前言","上","週","逐一","大早","來想說","好不","容易","完成","多語系","初版","再","稍微","修改","調整","準備","上","code","來測試","誰","知道","突然","來","個問題","本来","為這問題應該","半天","處理掉","誰","知道","居然","花","整整","三天","真","改","好","崩潰啊","遇到","問題","目前","正","開發","mobile","web","為","搭配","某銀行","優惠活動","之前","趕緊","整個購買","流程","會員","登","入","功能","都","補","上去","結果請對","方","先行","測試","都","不","會測試","活動","1","上","線","才","發現問題","問題","App","內開啟網頁後","facebook","登","入","功能","無效","處理經過嘗試","1","手","動","建立","登","入","流程","本来","Facebook","Developer","內","文件","教學來撰寫","還","出","問題","只好","先","暫時","改用","Facebook","登","入","裡","面","進階","做法","裡","面","個","手","動","建立","登","入","流程","著這個","做法","本来","fb","登","入","呼唤","API","行爲替換","成","1","個帶","回傳網址","redirect","uri","連結","不","過很","偷","懶","回傳網址還","本来","頁","面","1","樣","只","透過","js","回傳參數接","來處理","對","方","反","應","們","提供","優惠怎麼","新","註冊會員","才","本来","們服務","舊會員沒","享受","優惠這樣","不行","改","登","入","問題","順便","偷渡","這個商業邏輯","處理","上去","結果","iOS","裝置","都","正常","登","入","撒花","Android","裝置","1","樣毫無","反","應","Orz","哭哭","嘗試","2","獨立寫","1","個","FB","callback","頁","面","星期一","所有","努力","遇到","Android","還","無解","想說","乖乖","寫","1","頁來","接收","facebook","callback","當然","授權","行為","改","PHP","端來處理","不","過","想","偷","吃","步","授權後","資料丟給","JS","再來","完成","後續","登","入","註冊","流程","這","也不","怪","本来","js","端","註冊","登","入","流程","都","寫","好了","code","不","來用","真","很","惋惜","結果","iOS","裝置","都","正常","登","入","撒花","Android","裝置畫","面","跳轉","沒","下文","哭哭","嘗試","3","克難","建立","測試","方式","為","Android","裝置","不行","本身","沒","Android","裝置","測試","為","讓","好","測試","debug","出","動","Genymotion","模擬器","不能不","說這個模擬器","真","之前","試過","電腦內","快速","啟動","Android","模擬器","本来","Android","Studio","裡","安","裝","模擬器","可能","跑到","天荒地老","然後請","同事","幫忙開發","1","個","只","webview","測試","APP","好","讓","夠隨時測試","雖然聽","來很","美好","真","透過","Android","Studio","build","code","然後","install","pkg","模擬器內","這過程","真","很漫長","電腦會跑","很","慢","風","扇","會","持","續發","出","哀號","難過啊","暫時","只","先","這樣進行","不","過沒辦","法","app","內","webview","看到","js","印","出","來","console","log","真","非","常難","錯","感覺","都","只","能用","猜","不","過後來","去","google","一下","類","問題","發現","幾行","神奇的","sample","code","順","手把","加","本来","android","個精簡","測試","app","內","然後再","重新","build","結果這","次","居然","成功","if","Build","VERSION","SDK","INT","gt","Build","VERSION","CODES","LOLLIPOP","123","CookieManager","getInstance","setAcceptThirdPartyCookies","myWebView","true","125","後來","查","一下","這","讓","webview","內","頁","面","夠","接受","第三","方寫","入","cookie","也就是","說","facebook","js","sdk","登","入","流程","中","會將","必要的","cookie","寫","網站內","Android","APP","內","webview","預設","不","允許","facebook","登","入","才","會","1","直","失敗沒","反","應","也就是","說","本来","寫","好的","登","入","流程","全部","改用","php","來","重","寫","崩潰","嘗試","4","使用","Facebook","PHP","SDK","最","後","真","沒","招","只好","乖乖","去","改用","PHP","SDK","來撰寫這整","段","facebook","登","入","註冊","流程","然後順便","fb","新","註冊會員","資料確認頁","面","一起","做好","雖然","android","程式","加","個","三行","code","解決這個問題","日","後","可能","還","合作","夥伴","不可能","要求","個廠","商都","們","android","app","重新","build","1","版","上架","還要對","方","用戶","都","更新","才","行","還","來","只","內心","都","會想著","改","個","三行","code","好了","卻要","改","三天","星期三","花","一整天","再","改","寫","PHP","到了","下班","前","測","幾","台","android","裝置","發現","android","7.0","以上","機器外","版本","android","都","正常了","這","到底","該","不","該","高興","抱著哀傷","心情","先","上","1","版","code","最少","先","解決","android","7.0","版本","以下","用戶","回家","再來","想想","會","什麼問題","嘗試","5","Facebook","OAuth","重新","導","URI","回家","1","路上","1","直","思考","為","Android","裝置跳轉網址還","會","問題","後來","才","想到","原","應該","Facebook","OAuth","重新","導","URI","白名","單設","定","問題","實","本来","名","單","不算","錯","只","寫","https","網址","這幾天","改","寫","手","動","登","入","流程","過程","中","需要","重","組","callback","uri","機開發時","抓","server","port","都","很","正常","443","code","1","server","上","會","抓","80","port","造成","1","開始","重","組","redirect","uri","問題","只好","都","改成","寫","死","https","開頭","網址","facebook","App","登","入","設","定","內","OAuth","redirect","uri","卻","不能","寫","死","https","必","須","改成","http","才能","正常","運","作","實","弄","不懂","這","到底","什麼","道理","只","推","測","目前","公司","server","都是","架設","ELB","後","面","透過","ELB","來","做","port","forward","本来","server","不","一定要","強制將網頁導","443","port","php","code","才","會","都","抓","80","port","結論","動","最","重","要因","為","沒","管理","AWS","權限","不","太","清楚","ELB","設","定","只","能用","推","測","來","料想","結論","反正","結論","code","裡","面","產生","redirect","uri","一定要","https","開頭","facebook","app","設","定","一定要","http","開頭","然後","這","微妙的","設","定下","達","成","平衡","程式","正常","運","作","喔耶"]},{"title":"Slim 3 + Twig 實作多語系版本(i18n)","url":"https://soarlin.github.io/2017/06/21/Use-gettext-in-Twig-to-implement-i18n/","content":"前廢言原本就認為做個多語系，應該不會太簡單，先撇除掉翻譯的問題，以前使用的 Laravel 裡面，已經有相關套件以及預留好的語系檔存放路徑了，要實作的話應該不會是太大問題，但是換了 Slim 3 這個極其精簡的框架後，想要什麼功能，就得自己找出方法加進去，雖然大部分都有相關模組或套件可以使用，不過還是得花上一些學習成本上去，較為費時，但也可以多學一些東西。\n這篇也不是要從頭教學，畢竟網路上相關的教學文章已經很多了，我只是記錄一下學習過程中，一些基本的步驟以及該注意的小東西。\n實作步驟網路上搜尋關於 slim 3 + i18n，出現的文章其實都有段時間了，有時候跟著做到後來，發現似乎不合用，所以這裡記錄一下，希望能夠幫助到其他有需要的人(或是兩個月後的自己)\n其實歸納到最後，是使用 PHP 推薦的 gettext 的方式來實踐多語系版本，而 slim 3 搭配的樣版引擎 Twig，本身也有提供 Extension 套件(i18n)來實作，所以找到 gettext 的教學文章，看懂基本原理後，再搭配 twig i18n 的套件來實作，底下收錄我後來覺得最實用的參考文章\n\n參考資料\nEasy Multi-Language Twig Apps with Gettext\nTwig-extensions - The i18n Extension\n\n其實可以多找幾篇看，不過第一篇應該已經是精華的集大成者了。\n步驟記錄\n安裝 Twig Extension - i18n\ncomposer require twig/extensions\n\n\n在自己專案內新增要放多國語系檔的目錄 ./resource/lang\n\n# 專案路徑PROJECT├── app            # 主要 PHP 程式目錄├── bootstrap│   └── app.php    # 程式起始檔案├── resources│   ├── assets     # js/css/font/images 等資源目錄│   ├── lang       # 多國語言檔案目錄│   └── views      # twig 樣板目錄├── vendor├── ...└── ...\n\n\n建立一份語言範本檔 (.pot)  ./resource/lang/message.pot，\n\n# SOME DESCRIPTIVE TITLE.# Copyright (C) YEAR THE PACKAGE&#x27;S COPYRIGHT HOLDER# This file is distributed under the same license as the PACKAGE package.# FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.##, fuzzymsgid &quot;&quot;msgstr &quot;&quot;&quot;Project-Id-Version: PACKAGE VERSION\\n&quot;&quot;Report-Msgid-Bugs-To: \\n&quot;&quot;POT-Creation-Date: 2016-04-10 10:44+0000\\n&quot;&quot;PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n&quot;&quot;Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\\n&quot;&quot;Language-Team: LANGUAGE &lt;LL@li.org&gt;\\n&quot;&quot;Language: \\n&quot;&quot;MIME-Version: 1.0\\n&quot;&quot;Content-Type: text/plain; charset=CHARSET\\n&quot;&quot;Content-Transfer-Encoding: 8bit\\n&quot;#: public/i18n.php:13msgid &quot;HELLO_WORLD&quot;msgstr &quot;&quot;\n\n\n使用 .pot 檔來建立不同語系的 .po 檔 (人類看得懂的語言包索引檔)\n\n根據 gettext 的實作原則，多語系的目錄下，根據每個語系再產生類似 語系/LC_MESSAGES 的目錄, e.g. en_US/LC_MESSAGES or zh_TW/LC_MESSAGES\n\n\n\nmsginit --locale=en_US --output-file=resources/lang/en_US/LC_MESSAGES/message.po --input=resources/lang/message.potmsginit --locale=zh_CN --output-file=resources/lang/zh_CN/LC_MESSAGES/message.po --input=resources/lang/message.potmsginit --locale=zh_TW --output-file=resources/lang/zh_TW/LC_MESSAGES/message.po --input=resources/lang/message.pot\n\n\n編輯 .po 檔裡的語言翻譯\n編輯完成後，產生 .mo 檔 (給機器讀取的語言包檔案)\n\nmsgfmt -c -o resources/lang/en_US/LC_MESSAGES/message.mo resources/lang/en_US/LC_MESSAGES/message.pomsgfmt -c -o resources/lang/zh_CN/LC_MESSAGES/message.mo resources/lang/zh_CN/LC_MESSAGES/message.pomsgfmt -c -o resources/lang/zh_TW/LC_MESSAGES/message.mo resources/lang/zh_TW/LC_MESSAGES/message.po\n\n\n這時候整個語言包的目錄大致上會長這樣，到這邊已經把基本架構做好了\n\n./resource/lang├── en_US               # english│   └── LC_MESSAGES│       ├── message.mo│       └── message.po├── zh_CN               # 简体中文语言│   └── LC_MESSAGES│       ├── message.mo│       └── message.po├── zh_TW               # 繁體中文語言│   └── LC_MESSAGES│       ├── message.mo│       └── message.po└── message.pot         # 語言包範本\n\n\n接著才進入到 twig i18n 套件的使用\n\n接下來其實就參考 Twig-extensions - The i18n Extension 這邊的方式，大致上應該就可以做出來啦！\n注意事項這個真的非常重要，因為我為了這奇怪的問題，鬼打牆一整天(絕對不是因為那陣子剛好在看鬼吹燈的關係)，由於 PHP 檔案在執行當下會編譯出機器碼並且快取起來，所以有時候語言包更新了，卻發現網頁上要顯示的翻譯文字出不來，只會顯示 .po 檔裡的 msgid 字串，而不是對映出來的 msgstr 的翻譯內容，這時候絕對不是你程式碼有寫錯(前提是你真的沒寫錯)，只是先前的翻譯資料被 cache 了，而我也找不到該去哪清理這 cache，後來找到的解決辦法是 Apache 重啟，我知道這招很爛，但是很管用\n解決 gettext 無法正常顯示方法# on Mac OSsudo apachectl restart# on Ubuntusudo service apache2 restart\n\n但是有時候 Server 上的機器，可不是隨隨便便就可以將 web server 重啟，所以同事幫忙找了另一個解決辦法，雖然我實際測試後，效果不如預期，還是有可能會失敗，不過還是提供來參考\nHow to clear php’s gettext cache without restart Apache nor change domain?\n原理是，在語言目錄下，建立一個虛擬目錄連結(nocache)，指向原本目錄(.)\ncd resource/langln -s . nocache\n\n然後在 bindtextdomain 的時候，先指向 nocache 目錄，再指向正確目錄\nbindtextdomain(&#x27;message&#x27;, &#x27;./resources/lang/nocache&#x27;);bindtextdomain(&#x27;message&#x27;, &#x27;./resources/lang/&#x27;);\n\n翻譯語言內，增加變數(動態資料)顯示根據 twig extension - i18n 的教學文件提到，可以在翻譯的文字內使用 %name% 之類的方式來插入變數\n舉個例子\n\n「Congratulations! You get xxx points」\n「恭喜你！獲得 xxx 分」\n\n當中的 xxx 就是要替換的變數，確定好 PHP 程式從 Controller 傳給 View (twig template) 的變數名稱，比方說是 score，那麼在 .po 檔裡面大概長這樣\nmsgid &quot;Congratulations! You get %score% points&quot;msgstr &quot;恭喜你！獲得%score%分&quot;\n\n在 Controller 裡，要將變數 $score 傳給 View，而到了 .twig 檔裡面，使用雙括號來顯示變數 &#123;&#123; score &#125;&#125;，大致如下所示：\n&lt;p&gt;  &#123;% trans %&#125;    Congratulations! You get &#123;&#123; score &#125;&#125; points  &#123;% endtrans %&#125;&lt;p&gt;\n\n後記原本以為都改好可以正常運作了，程式碼 deploy 到 server 上才發現更可怕的事實，辛辛苦苦做好的多語系功能完全無法執行…WTF。好在有另外寫一個測試的檔案，可以很快看出是 setlocale 這個 function 無法順利執行，上網查了一些解決方法，提供以下兩個連結。\nPHP setlocale has no effectsetlocale() returns false\n我看完這兩篇後，大概就是以下幾個步驟：\n\n先檢查 server 上可設定的語系\n\nlocale -a# 原本只能看到以下幾個CC.UTF-8en_US.utf8POSIX\n\n而我需要有zh_TW, zh_CN, ja_JP，所以需要自行在安裝這幾個語系的檔案\n備註: 這是在 Ubuntu 14.04 環境下\nsudo /usr/share/locales/install-language-pack zh_TWsudo /usr/share/locales/install-language-pack zh_CNsudo /usr/share/locales/install-language-pack ja_JP\n\n如果是 Ubuntu 16.04 ，在 zh_TW 與 zh_CN，就需要換成 zh_TW.UTF-8 與 zh_CN.UTF-8，所以指令會變成下面這樣\nsudo /usr/share/locales/install-language-pack zh_TW.UTF-8sudo /usr/share/locales/install-language-pack zh_CN.UTF-8sudo /usr/share/locales/install-language-pack ja_JP\n\n其實都到這裡了，應該要可以跑吧！但是還是沒那麼簡單，因為 Mac OSX 的系統與 Ubuntu 系統內的名稱還是不太一樣\nMAC OSX下的locale -a可以看到，語系種類非常多種，跟剛剛在 server 上看到那兩三個相差甚遠\nen_USen_US.ISO8859-1en_US.ISO8859-15en_US.US-ASCIIen_US.UTF-8...ja_JPja_JP.eucJPja_JP.SJISja_JP.UTF-8...zh_CNzh_CN.GB2312zh_CN.GBKzh_CN.UTF-8zh_TWzh_TW.Big5zh_TW.UTF-8\n\n而要注意的是，原本程式內寫的 setlocale(LC_ALL, &#39;zh_TW&#39;); 到了 server 上就要跟著調整成 setlocale(LC_ALL, &#39;zh_TW.utf8&#39;); 大概做完這些動作，我辛辛苦苦做好的多語系版本總算可以運作了，就甘心！\nP.S. 有時候 server 需要更新一下 locale，指令是 sudo dpkg-reconfigure locales\n","title_tokenize":["Slim","3","Twig","實","作","多語系","版本","i","18","n"],"content_tokenize":["前","廢言","原","本就","認為","做","個多語系","應該","不","會","太","簡單","先","撇","除掉","翻","譯","問題","之前","使用","Laravel","裡","面","已","經","相關","套件","預留","好的","語系檔","寄存","路徑","要實","作","話應該","不","會","太大","問題","換","Slim","3","這個極","精簡","框架","後","想要","什麼","功能","找出","方法","加","進","去","雖然","大部分","都","相關模組","套件","使用","不","過還","花","上","學習","本钱","上去","較為費時","多學","東西","這篇","也不","要從頭教學","畢","竟","網","路上","相關","教學","文章","已","經","很多","記錄","一下","學習過程","中","基本的","步","驟","該","注意的","小","東西","實","作","步","驟網","路上","搜尋關於","slim","3","i","18","n","出","現","文章","實","都","段時間","時候","著","做到","後來","發現","恍如","不","适用","這裡記錄","一下","希望","夠幫助","需要","人","兩個","月","後","實歸納","最","後","使用","PHP","推","薦","gettext","方式","來實踐多語系","版本","slim","3","搭配","樣版","引擎","Twig","本身","提供","Extension","套件","i","18","n","來實","作","找到","gettext","教學","文章","看懂","基本","原理","後","再","搭配","twig","i","18","n","套件","來實","作","底下","收錄","後來覺","最","實用","參","考","文章","參","考","資料","Easy","Multi","Language","Twig","Apps","with","Gettext","Twig","extensions","The","i","18","n","Extension","實","找","幾篇","看","不","過","一篇","應該","已","經","精華","集大成者","步","驟記錄","安","裝","Twig","Extension","i","18","n","composer","require","twig","extensions","專案內","新增","放","多國語系檔","目錄","resource","lang","專案路徑","PROJECT","app","主要","PHP","程式","目錄","bootstrap","app","php","程式","起始","檔案","resources","assets","js","css","font","images","資源目錄","lang","多國語言檔案目錄","views","twig","樣板目錄","vendor","建立","一份","語言範","檔","pot","resource","lang","message","pot","SOME","DESCRIPTIVE","TITLE","Copyright","C","YEAR","THE","PACKAGE","x","27","S","COPYRIGHT","HOLDER","This","file","is","distributed","under","the","same","license","as","the","PACKAGE","package","FIRST","AUTHOR","lt","EMAIL@ADDRESS&gt","YEAR","fuzzymsgid","quot","quot","msgstr","quot","quot","quot","Project","Id","Version","PACKAGE","VERSION","n","quot","quot","Report","Msgid","Bugs","To","n","quot","quot","POT","Creation","Date","2016","04","10","10","44","0000","n","quot","quot","PO","Revision","Date","YEAR","MO","DA","HO","MI","ZONE","n","quot","quot","Last","Translator","FULL","NAME","lt","EMAIL@ADDRESS&gt","n","quot","quot","Language","Team","LANGUAGE","lt","LL@li.org&gt","n","quot","quot","Language","n","quot","quot","MIME","Version","1.0","n","quot","quot","Content","Type","text","plain","charset","CHARSET","n","quot","quot","Content","Transfer","Encoding","8","bit","n","quot","public","i","18","n","php","13","msgid","quot","HELLO","WORLD","quot","msgstr","quot","quot","使用","pot","檔來","建立","不同","語系","po","檔","人類","看","懂","語言","包","索引","檔","根據","gettext","實","作","原","則","多語系","目錄","下","根據","個語系再產生類似","語系","LC","MESSAGES","目錄","e","g","en","US","LC","MESSAGES","or","zh","TW","LC","MESSAGES","msginit","locale","en","US","output","file","resources","lang","en","US","LC","MESSAGES","message","po","input","resources","lang","message","potmsginit","locale","zh","CN","output","file","resources","lang","zh","CN","LC","MESSAGES","message","po","input","resources","lang","message","potmsginit","locale","zh","TW","output","file","resources","lang","zh","TW","LC","MESSAGES","message","po","input","resources","lang","message","pot","編輯","po","檔裡","語言","翻","譯","編輯","完成","後","產生","mo","檔","給機器讀","取","語言","包","檔案","msgfmt","c","o","resources","lang","en","US","LC","MESSAGES","message","mo","resources","lang","en","US","LC","MESSAGES","message","pomsgfmt","c","o","resources","lang","zh","CN","LC","MESSAGES","message","mo","resources","lang","zh","CN","LC","MESSAGES","message","pomsgfmt","c","o","resources","lang","zh","TW","LC","MESSAGES","message","mo","resources","lang","zh","TW","LC","MESSAGES","message","po","這時候整個語言","包","目錄","大致上","會長這樣","這邊","已","經","基本","架構","做","好了","resource","lang","en","US","english","LC","MESSAGES","message","mo","message","po","zh","CN","简体中文","语言","LC","MESSAGES","message","mo","message","po","zh","TW","繁體","中文","語言","LC","MESSAGES","message","mo","message","po","message","pot","語言","包","範","接著","才","進","入","twig","i","18","n","套件","使用","接下","來","實","參","考","Twig","extensions","The","i","18","n","Extension","這邊","方式","大致上","應該","做出","來","注意","事項這個","真","非常重要","為","為","這","奇怪的","問題","鬼","牆","1","整天","絕對","不是","為","陣","子","剛","好在","看","鬼","吹","燈","關係","於","PHP","檔案","執行當","下","會編譯","出","機器碼並","快","取","來","時候語言","包","更新","卻發現網頁","上","要顯示","翻","譯","文字","出","不","來","只","會顯示","po","檔裡","msgid","字串","而不是","對","映出","來","msgstr","翻","譯內容","這時候絕對","不是","程式","碼","寫錯","条件","真","沒寫錯","先前","翻","譯資料","cache","找不到","該","去","清算","這","cache","後來","找到","解決辦","法","Apache","重","啟","知道","這","招","很爛","很","管用","解決","gettext","無","法","正常","顯示","方","法","on","Mac","OSsudo","apachectl","restart","on","Ubuntusudo","service","apache","2","restart","時候","Server","上","機器","可不是","隨隨便便","將","web","server","重","啟","同事","幫忙","找","另外一","個解決辦","法","雖然","實際測試後","效果","預","期","還","有可能","會失敗","不","過還","提供","來參","考","How","to","clear","php","s","gettext","cache","without","restart","Apache","nor","change","domain","原理","語言目錄","下","建立","1","個虛擬目錄連結","nocache","指向","本来","目錄","cd","resource","langln","s","nocache","然後","bindtextdomain","時候","先","指向","nocache","目錄","再","指向","正","確目錄","bindtextdomain","x","27","message","x","27","x","27","resources","lang","nocache","x","27","bindtextdomain","x","27","message","x","27","x","27","resources","lang","x","27","翻","譯語言內","增加","變數","動態資料","顯示根據","twig","extension","i","18","n","教學","文件","提到","翻","譯","文字","內","使用","name","類","方式","來","插入","變數","舉個","例子","Congratulations","You","get","xxx","points","恭喜","獲","xxx","分","當","中的","xxx","要替換","變數","確","定","好","PHP","程式","從","Controller","傳給","View","twig","template","變數","名","稱","說","score","麼","po","檔裡","面","大概","長這樣","msgid","quot","Congratulations","You","get","score","points","quot","msgstr","quot","恭喜","獲","score","分","quot","Controller","裡","要將變數","score","傳給","View","到了","twig","檔裡","面","使用","雙括號來顯示變數","123","123","score","125","125","大致","以下","示","lt","p","gt","123","trans","125","Congratulations","You","get","123","123","score","125","125","points","123","endtrans","125","lt","p","gt","後記","本来","為","都","改","好","正常","運","作","程式","碼","deploy","server","上","才","發現","更","可怕的","事實","辛辛苦苦","做","好的","多語系","功能","完全","無","法","執行","WTF","好在","寫","1","個測試","檔案","很快","看出","setlocale","這個","function","無","法","順利執行","上","網","查","解決","方法","提供","以下","兩個連結","PHP","setlocale","has","no","effectsetlocale","returns","false","看","完這兩篇後","大概","以下","幾個","步","驟","先","檢","查","server","上","設","定","語系","locale","a","本来","只能","看到","以下","幾個","CC","UTF","8","en","US","utf","8","POSIX","需要","zh","TW","zh","CN","ja","JP","需要","自行","安","裝這幾個語系","檔案","備註","這","Ubuntu","14.04","環境","下","sudo","usr","share","locales","install","language","pack","zh","TWsudo","usr","share","locales","install","language","pack","zh","CNsudo","usr","share","locales","install","language","pack","ja","JP","Ubuntu","16.04","zh","TW","與","zh","CN","需要","換","成","zh","TW","UTF","8","與","zh","CN","UTF","8","指令","會變","成","下面","這樣","sudo","usr","share","locales","install","language","pack","zh","TW","UTF","8","sudo","usr","share","locales","install","language","pack","zh","CN","UTF","8","sudo","usr","share","locales","install","language","pack","ja","JP","實","都","這裡","應該要","跑吧","還","沒","麼簡單","為","Mac","OSX","系統與","Ubuntu","系統內","名","稱還","不","太","1","樣","MAC","OSX","下","locale","a","看到","語系種類","非","常多種","剛剛","server","上","看到","兩","3","個","相差","甚遠","en","USen","US","ISO","8859","1","en","US","ISO","8859","15","en","US","US","ASCIIen","US","UTF","8","ja","JPja","JP","eucJPja","JP","SJISja","JP","UTF","8","zh","CNzh","CN","GB","2312","zh","CN","GBKzh","CN","UTF","8","zh","TWzh","TW","Big","5","zh","TW","UTF","8","注意的","本来","程式","內寫","setlocale","LC","ALL","39","zh","TW","39","到了","server","上","就要","著調整","成","setlocale","LC","ALL","39","zh","TW","utf","8","39","大概","做完","這些動","作","辛辛苦苦","做好","多語系","版本","總算","運","作","甘心","P","S","時候","server","需要","更新","一下","locale","指令","sudo","dpkg","reconfigure","locales"]},{"title":"CSS筆記(2017/06/10)","url":"https://soarlin.github.io/2017/06/10/CSS%E7%AD%86%E8%A8%98-2017-06-10/","content":"\n\n\n文字過長省略\n過場動畫效果\nAnimation 動畫效果參數解說\n\n\n\n\n\n最近太久沒寫 blog 文章，覺得真的越來越懶惰了，趁著這個週末有點時間，來稍微紀錄一下最近忙的東西，從四月底到現在大致上做了些事情：\n\n換工作前把原本考尚樂平台，增加一個可以讓老師們放上宣傳圖片的功能\n跟佑鈞接了一個賣藥的網頁切版\n跟阿宏交接一下國研院專利檢索平臺的專案\n新工作的專案(Vue 2.0 + Vuex + vue-router)\n\n當中做最多的應該還是 CSS 撰寫，以及使用 Vue 開發專案吧！而這次接案跟新工作中寫的 css 都用上了一點點小小的動畫效果，雖然後來接案的業主說：「動畫效果拿掉，改成靜態畫面」最後沒機會出現動畫效果，但開始跟 css animation 漸漸變熟了一些些，雖然還是要一直查資料，但是覺得有進步了。\n\n文字過長省略最近幾次的排版，常常會遇到標題文字，在某些版面會過長自動換行的情況，有時候為了版面對其，標題行只能給一行的高度，所以超過寬度的文字需要被省略，所以越來越長使用到這功能了，就稍微紀錄一下。如果文字要兩行的高度，就不適用了，唯一作法就是把文字區塊高度設定成兩倍行高，讓超過的文字被隱藏。\n\n@mixin ellipsis &#123;    text-overflow: ellipsis;    white-space: nowrap;    overflow: hidden;&#125;.title &#123;    font-size: 24px;    @include ellipsis;&#125;\n\nCodepen 上的範例\nSee the Pen ellipsis by soar_lin (@SoarLin) on CodePen.\n\n\n\n過場動畫效果雖然寫了兩三次，還是覺得很難掌握，只好有空多練習了，所以在 codepen 上做了一個範例，順便附上一些過程中用到的工具、網站\n\nCSS Pattern Generator，用來製作重複圖樣背景還不錯，缺點是無法做太大的重複區塊\nCSS EASING ANIMATION TOOL，用來製作過場時間函示(transition-timing-function)還不錯\n\n目前用的招式很普通，先把要做動畫的物件寫出來後，透明度設定成 0, 然後透過 js 將寫好的動畫 css 加到物件內，然後再設定個 Timeout 在動畫持續時間結束後，也把動畫 css 移除\n部分參考範例 code\nspan.hint &#123;    opacity: 0;    animation: hint-show-hide 1.5s ease 0s 1 normal forwards;&#125;@keyframes hint-show-hide &#123;    0% &#123;        opacity: .3;        top: -10px;    &#125;    80% &#123;        opacity: 1;        top: -25px;    &#125;    100% &#123;        opacity: .5;        top: -26px;    &#125;&#125;\n\n\nAnimation 動畫效果參數解說animation: @keyframes | duration | timing-function | delay | (iteration-count) | (direction) | fill-mode | (play-state) | (name)\n其實我大概常會用到，就只有幾個\n\n\n\nName\n說明\n\n\n\nanimation-name\n動畫效果 @keyframes 名稱\n\n\nanimation-duration\n動畫一次週期的時間, e.g. 1s, 300ms\n\n\nanimation-timing-function\n動畫轉變時時間的加速曲線, e.g. ease, ease-in-out\n\n\nanimation-fill-mode\n元素在動畫播放外(動畫開始前及結束後)的狀態 e.g. forwards(停在最後), backwards(停在最初)\n\n\nCodepen 上的範例\n原本只是想寫個簡單的範例，但是又覺得太單調，所以就模擬一下超級馬力得到金幣的情形，所以點一下中間那問號磚塊，會彈出硬幣\nSee the Pen Super Mario Coin by soar_lin (@SoarLin) on CodePen.\n","title_tokenize":["CSS","筆記","2017","06","10"],"content_tokenize":["文字","過長","省略","過場動畫","效果","Animation","動畫","效果","參數解說","最近","太","久","沒寫","blog","文章","覺","真","越來越懶惰","趁著這個週","末","點時間","來","稍微","紀錄","一下","最近","忙","東西","從","4","月底","現","大致上","做","些","事情","換","工作","前","本来","考","尚","樂","平台","增加","1","個","讓","老","師們","放","上","宣傳圖","片","功能","佑鈞接","1","個賣藥","網頁切版","阿宏","交接","一下","國研院專利檢索平臺","專案","新","工作","專案","Vue","2.0","Vuex","vue","router","當","中","做","最多","應該還","CSS","撰寫","使用","Vue","開發專案吧","這","次","接案","新","工作","中","寫","css","都","用上","1","點點","小小","動畫","效果","雖然後來","接案","業主說","動畫","效果","拿掉","改成","靜態畫","面","最","後沒機會","出","現動畫","效果","開始","css","animation","漸漸變熟","些","雖然還","1","直","查資料","覺","進","步","文字","過長","省略","最近","幾","次","排版","常常","會","遇到","標題","文字","版面","會過長","動換行","情況","時候為","版面","對","標題行","只","給","一行","高度","超","過寬度","文字","需要","省略","越來越長","使用","這","功能","稍微","紀錄","一下","文字","要兩行","高度","不","適用","唯一","作法","文字","區塊","高度","設","定","成","兩","倍","行","高","讓","超","過","文字","隱藏","mixin","ellipsis","123","text","overflow","ellipsis","white","space","nowrap","overflow","hidden","125","title","123","font","size","24","px","include","ellipsis","125","Codepen","上","範例","See","the","Pen","ellipsis","by","soar","lin","SoarLin","on","CodePen","過場動畫","效果","雖然寫","兩","三次","還","覺","得很","難","掌握","只","好","空","多練習","codepen","上","做","1","個範例","順便","附上","過程","中用","工具","網站","CSS","Pattern","Generator","用來製","作","重","複圖樣","背景","還","不","錯","缺點","無","法","做","太大","重","複區塊","CSS","EASING","ANIMATION","TOOL","用來製","作","過場時間函示","transition","timing","function","還","不","錯","目前","招式","很","普通","先","做","動畫","物件","寫","出","來後","透明度","設","定","成","0","然後透過","js","將寫","好的","動畫","css","加","物件","內","然後再設","定","個","Timeout","動畫","持","續時間結束後","動畫","css","移","部","分","參","考","範例","code","span","hint","123","opacity","0","animation","hint","show","hide","1.5","s","ease","0","s","1","normal","forwards","125","keyframes","hint","show","hide","123","0%","123","opacity","3","top","10","px","125","80%","123","opacity","1","top","25","px","125","100%","123","opacity","5","top","26","px","125","125","Animation","動畫","效果","參數解說","animation","keyframes","duration","timing","function","delay","iteration","count","direction","fill","mode","play","state","name","實","大概","常會","用到","只","幾個","Name","說明","animation","name","動畫","效果","keyframes","名","稱","animation","duration","動畫","一次","週","期","時間","e","g","1","s","300","ms","animation","timing","function","動畫轉變時時間","加速","曲線","e","g","ease","ease","in","out","animation","fill","mode","元素","動畫","播放","外","動畫開始","前","結束後","狀態","e","g","forwards","停","最","後","backwards","停在","最初","Codepen","上","範例","本来","只","想寫個簡單","範例","覺","太","單調","模擬","一下","超","級馬力","得到","金幣","情形","點","一下","中","間","問號磚塊","會彈","出","硬","幣","See","the","Pen","Super","Mario","Coin","by","soar","lin","SoarLin","on","CodePen"]},{"title":"工作筆記之PHP PSR-4 autoload","url":"https://soarlin.github.io/2017/05/14/%E5%B7%A5%E4%BD%9C%E7%AD%86%E8%A8%98%E4%B9%8BPHP-PSR-4-autoload/","content":"前情提要最近手上的工作接手了一個很精簡的 PHP 專案，但是收到的消息是之後要針對這個站台增加許多功能、版面大改，因為是個以前沒碰過的 PHP 框架做成的專案(Slim Framework)，所以一開始花了很多時間在看 Framework 的使用，以及了解前人使用這框架開發的架構。\n原本有幾度想整個換成熟悉的 Laravel，但是又覺得整個打掉重練不曉得要花多久，雖然內心是覺得原本站台還不複雜應該可以在一週內換框架重建，最後還是放棄這個誘人的想法，決定好好在熟悉新環境的開發模式。\n一開始將前端的開發，建立起一些自動化處理的流程，透過 bower 來管理 3rd 套件，導入 Scss 來替以後切版做打算，利用 Gulp 來將 js/css 等檔案打包以及加上亂數版號，等這一切都處理得差不多其實也花了約兩天了，接著先開始研究增加登入(FB註冊登入)等流程，目前專案內並不直接存取資料庫，所有的資料存取行為全都是透過 API 的方式來實現，讓我有點突發奇想的乾脆全部頁面都用前端框架 Vue framework 來做好了，可是這樣會增加太多技術債，這兩天已經增加的夠多了。\n為了記住登入的使用者資訊，還是先從簡單的 PHP 寫 Session or Cookie 開始吧！因為考量到還沒開始使用 redis 來存取 Session，而正式部署的機器不只一台的情況，就先放棄 Session 這個方式，改以 Cookie 的方式來著手，可是花了一天的時間不段的嘗試，只要我在 Controller 內將 cookie 存好，透過 route 切換到新頁面，cookie 就會神秘的消失，即使後來看到 Slim Framework 官網上建議使用 FIG Cookies，還是一直搞不清處為何 Request, Response 兩邊都去寫 cookie 了，透過 route 導向新頁面一樣無效…XD，最後經過一天的努力，宣告不治，放棄治療\n後來在找資料的同時有看到一個 Slim Framework 的教學影片，看著裡面逐步用一個精簡的框架打造成小有規模的架構，覺得很感動，所以隔天一早就開始了把現有的結構調整一下，看著目錄架構慢慢接近熟悉的 laravel 有點小感動，而且在電腦上運行都很正常，直到我把 code push 上去接著到測試機器上面測試後，發現糟糕了…出事了！\n\n釐清問題由於將整個 Namespace 下的程式目錄名字更換了，所以特別記得要執行 composer dump-autoload，甚至在 Jenkins build 上也多加了這條指令，確保 build 完打包起來的程式碼是有引用到更換目錄名稱的 class，為了確定編譯後的程式碼，還特地把 jenkins 編譯後的檔案整包抓回本機測試，依然可以正常運行，但是上了測試機，就一直出現 Class not found 的錯誤訊息\n後來真的沒辦法，只好請同事幫忙找找看問題，最後同事土法煉鋼的慢慢抽絲剝繭發現，我的目錄名稱跟寫在程式碼裡面的 Namespace 大小寫不一樣….WTF。原本的 namespace 幾乎都是用小寫的，後來我把幾個字眼的首字改成大寫，如: Controller, Models, … 等，但是原本資料夾都還是維持全部小寫的名稱，而這是因為在 Mac 的作業系統下，引用檔案時會忽略大小寫，而在 Linux 下的 Apache 可是有區分大小寫的，所以這起慘案就在神隊友的幫助下，順利解決了！\n重點這次更改整個程式目錄架構的過程中，其實也學到不少東西，一個是PHP PSR-4 的 Autoload 機制，因為 namespace 目錄名稱換掉的關係，所以了解到要去 Composer.json 裡面把 autoload 下面 psr-4 的對應目錄做更換，而且還需要執行 composer dump-autoload 來重新產生 autoload 的所指定的檔案路徑\n另一個是 Mac 跟 Linux 環境針對大小寫的判斷，原本印象中 Linux 上是沒有特別區分大小寫的，不過看來真的是自己記錯了，希望以後不要再被大小寫這問題給陰了(印象中以前好像已經有過一次了)\nReference原文參考：PSR-4: Autoloader\n中文參考：PHP PSR-4 Autoloader 機制\n其他參考：代碼、原始碼寫作風格 PSR-4 - PHP編碼規範Apache 設定忽略檔案字母大小寫\n","title_tokenize":["工作","筆記","PHP","PSR","4","autoload"],"content_tokenize":["前情","提要","最近","手上","工作","接手","1","個很精簡","PHP","專案","收到","消息","後要針對這個","站台","增加","許","多功能","版面","大","改","為","個","之前","沒碰過","PHP","框架","做成","專案","Slim","Framework","1","開始花","很多","時間","看","Framework","使用","了解","前人","使用","這","框架","開發","架構","本来","幾度想整個換","成","熟悉的","Laravel","覺","整個","打掉","重","練","不","曉","要花","多久","雖然內心","覺","本来","站台","還","不","複雜應該","1","週內換","框架","重建","最","後還","放","棄這個誘人","想法","決","定","好","好在","熟习","新","環境","開發","模式","1","開始將","前端","開發","建立起","動化處理","流程","透過","bower","來","管理","3","rd","套件","導","入","Scss","來替","後切版","做","打算","利用","Gulp","來將","js","css","檔案","打包","加上","亂數版號","這","都","處理","差不多","實","花","約兩天","接著","先","開始","研究","增加","登","入","FB","註冊","登","入","流程","目前","專案內並","不","直接","存取","資料庫","資料","存取","行為","全都","透過","API","方式","來實現","讓","點突發","奇想","乾脆","全部","頁","面","都","前端","框架","Vue","framework","來","做好","這樣會","增加","太多","技術債","這兩天","已","經","增加","夠多","為","記住","登","入","使用者","資訊","還","先","從簡單","PHP","寫","Session","or","Cookie","開始吧","為","考量","還沒開始","使用","redis","來","存取","Session","正式","部署","機器","一台","情況","先","放","棄","Session","這個","方式","改","Cookie","方式","來著","手","花","一天","時間","不","段","嘗試","Controller","內將","cookie","存","好","透過","route","切換","新","頁","面","cookie","會","神秘的","消失","後來","看到","Slim","Framework","官網","上","建議","使用","FIG","Cookies","還","1","直","弄","不","清","處為","Request","Response","兩邊","都","去","寫","cookie","透過","route","導","新","頁","面","1","樣無效","XD","最","後經過","一天","努力","宣布","不治","放","棄治療","後來","找","資料","時","看到","1","個","Slim","Framework","教學","影片","看","著裡","面","逐渐","1","個精簡","框架","造成","小","規模","架構","覺","得很","感動","隔天","一早","開始","現","結構調整","一下","看","著目錄架構","渐渐","接近","熟悉的","laravel","點","小","感動","電腦","上","運","行都","很","正常","直到","code","push","上去","接著","測試機器","上面","測試後","發現","糟糕了","失事","釐","清","問題","於將整個","Namespace","下","程式","目錄","名字","更","換","特","別記","要執行","composer","dump","autoload","Jenkins","build","上","加","這條","指令","確","保","build","完","打包","來","程式","碼","援用","更","換目錄","名","稱","class","為","確","定","編譯後","程式","碼","還","特地","jenkins","編譯後","檔案整","包","抓","回","機測試","依然","正常","運行","上了","測試機","1","直","出","現","Class","not","found","錯誤訊息","後來","真","沒辦","法","只好","請","同事","幫忙","找找","看","問題","最","後","同事","土法","煉鋼","渐渐","抽絲剝繭發現","目錄","名","稱","寫","程式","碼裡","面","Namespace","大小","寫","不一","樣","WTF","本来","namespace","幾","都","小","寫","後來","幾個","字眼","首字","改成","大","寫","Controller","Models","本来","資料夾","都","還","維","持","全","部","小","寫","名","稱","這","為","Mac","作","業系統","下","援用","檔案時會","忽视","大小","寫","Linux","下","Apache","區","分","大小","寫","這","慘案","神隊友","幫助","下","順利解決","重","點這","次","更改","整個","程式","目錄架構","過程","中","實","學","不","少","東西","1","個","PHP","PSR","4","Autoload","機制","為","namespace","目錄","名","稱換掉","關係","了解到","去","Composer","json","裡","面","autoload","下面","psr","4","對應目錄","做","更","換","還","需要","執行","composer","dump","autoload","來","重新","產生","autoload","指定","檔案路徑","另外一","個","Mac","Linux","環境針對","大小","寫","判","斷","本来","印象","中","Linux","上","沒","特","別區","分","大小","寫","不","過","看","來","真","記錯","希望","後","不要","再","大小","寫這問題給陰","印象","中","之前","好像","已","經","過","一次","Reference","原文","參","考","PSR","4","Autoloader","中文","參","考","PHP","PSR","4","Autoloader","機制","參","考","代","碼","原始","碼寫","作","風格","PSR","4","PHP","編碼規範","Apache","設","定","忽视","檔案","字母","大小","寫"]},{"title":"Composer與NPM指令 install 與 update 的差異","url":"https://soarlin.github.io/2017/04/21/Composer-NPM-install-update/","content":"\n其實這是一篇偽技術文，實際上是最近面試的心得文\n\n前陣子接連不斷的面試，讓我也學到了不少，有些公司技術背景不錯的，就會由淺入深的問，也有面試官人很好的，類似聊天方式的相互交流技術資訊，整個面試完都沒發現其實自己很多答不出來的東西，都還是面試官經驗分享讓我學習不少，可惜沒有緣分一起合作。\n面試找工作真的是一件勞心勞力的事，有些比較體恤求職者的，就會是一試定江山，有些比較謹慎找人的，就會有兩三次的面試流程，也因為這樣從投遞履歷到收到 Offer, 感謝函, 無聲卡等過程所經歷的時間實在是很難掌握，最後會到哪上班似乎也是種緣份！\n這裡分享一下之前被問到的一點點東西，原因是自己真的沒弄懂，趁現在來紀錄一下，希望以後要是再被問到，不要又回答錯了。\nComposer 基本用法這裡就不在寫啥是 Composer 了，簡單來說就是開發 PHP 專案時，一個用來方便安裝使用第三方套件的工具，使用上會有一個 composer.json 的相依套件描述檔案。並在安裝過套件後，會產生一份 composer.lock，如果有使用 Git 這類版本控管工具的話，建議這兩個檔案都要加入追蹤。\nComposer.lock在安裝過相依套件後，會在專案底下額外產生一份 Composer.lock 檔案來鎖定目前安裝的相依套件版本與資訊，之後再執行 install 指令時，會先檢查這份 lock 檔案來安裝，所以當有版本變更或新增套件時，也是會更新這份資料\n\nComposer install當 composer install 指令執行時，會依序執行以下行為\n\n檢查 composer.lock 檔案是否存在\nNo, 檔案不存在，改以執行 composer update 來建立\nYes, 檔案存在，根據 lock 檔內描述安裝指定套件版本\n已存在套件可能會更新版本\n若有新增套件，安裝新套件\n\n\n\n\n\nComposer update當執行 composer update 時，會依序執行以下行為\n\n檢查 composer.json 檔案\n根據 composer.json 內的套件版本規格，安裝最新一版\n安裝後更新資訊到 composer.lock 檔案內\n\n小結當初開發的專案composer.lock被加到.gitignore內，導致後來每次使用 composer 安裝套件的時候，到別人的機器或 server 上就會問題重重，正確的作法應該是要保留composer.lock檔到 git repository 內，等其他人需要更新時，透過 composer install 來安裝每次變更的紀錄就好\nNPM 基本介紹由於太多處理是要透過後端執行的 Node.js，所以也勢必要學一下 npm 這東西，透過 Node.js 官網提供的檔案安裝後，其實就會將 Node.js 與 NPM 一起裝好，而 NPM(Node Package Manager) 也就是 Node.js 的一些套件管理工具。\n\n目前用自己最多的還是在使用前端自動化工具 Gulp 時，需要安裝許多套件來加速前端自動化處理的流程，在還不知道 Gulp 或是 Grunt 之前，我只能自己土炮 shell script 來跑一些 css, js comporess, concat 等行為。原本想學 Grunt 但是天資不夠聰穎，還沒學會前就跳槽到 gulp 了，沒想到還挺好上手的\n\n使用 npm 來進行套件管理時，專案下可先透過 npm init 來產生一份 package.json 檔案，而之後安裝過的套件記得用 --save (or --save-dev) 的參數來將套件名稱與版號加入 package.json 內\nNPM 基本指令# 顯示套件相關資訊npm show &lt;package&gt;# 安裝相關套件npm install# 安裝指定套件npm install &lt;package&gt;# 升級所有套件npm update# 升級指定套件npm update &lt;package&gt;# 刪除套件npm uninstall &lt;package&gt;# 套件清單npm list\n\nnpm install vs npm update這裡可以參考 stack overflow 的一篇精美解釋\n&#123;  &quot;name&quot;:          &quot;my-project&quot;,  &quot;version&quot;:       &quot;1.0&quot;,                             // install   update  &quot;dependencies&quot;:  &#123;                                  // ------------------    &quot;already-installed-versionless-module&quot;:  &quot;*&quot;,     // ignores   &quot;1.0&quot; -&gt; &quot;1.1&quot;    &quot;already-installed-semver-module&quot;:       &quot;^1.4.3&quot; // ignores   &quot;1.4.3&quot; -&gt; &quot;1.5.2&quot;    &quot;already-installed-versioned-module&quot;:    &quot;3.4.1&quot;  // ignores   ignores    &quot;not-yet-installed-versionless-module&quot;:  &quot;*&quot;,     // installs  installs    &quot;not-yet-installed-semver-module&quot;:       &quot;^4.2.1&quot; // installs  installs    &quot;not-yet-installed-versioned-module&quot;:    &quot;2.7.8&quot;  // installs  installs  &#125;&#125;\n\n以上可以看出，npm install 基本上就是將尚未安裝過的 module 安裝進去，而 npm update 除了安裝 module 外，還會將已經安裝過的 module，根據版號描述去更新最新版本\n小結記得面試時，面試官問了這幾個指令的差異，但因為我印象中 npm 與 composer 在各自的 install 與 update 行為上似乎是相反的(※正確來說應該是 install 針對已安裝套件有些微不同處理)，但當時聽完說明後又有點不清楚，所以決定花點時間查詢並且做一下記錄\nReferenceComposer基本用法\nComposer: It’s All About the Lock File\n[Node.js]Node.js &amp; NPM 安裝(建立開發環境)\nnpm install vs. update - what’s the difference?\n","title_tokenize":["Composer","與","NPM","指令","install","與","update","差","異"],"content_tokenize":["實這","一篇","偽技術文","實際","上","最近","面","試","心得","文","前","陣","子","接連","不","斷","面","試","讓","學","到了","很多","公司","技術","背景","不","錯","會","淺","入","深","問","面","試","官人","很好","類似","聊天","方式","相互","交换","技術資訊","整個","面","試完","都","沒發現","實","很多","答","不","出","來","東西","都","還","面","試官經驗","分享","讓","學習","很多","惋惜","沒","緣","分","一起","合作","面","試","找工作","真","一件","勞心勞力","事","較體恤","求","職者","會","1","試","定","江山","較謹慎","找","人","會","兩","三次","面","試","流程","為這樣從投遞履歷","收到","Offer","感謝函","無聲卡","過程","經歷","時間實","很難","掌握","最","後會","上班","恍如","也是","種緣","份","這裡","分享","一下","之前","問","1","點點東西","缘由","真","沒","弄懂","趁現","來紀錄","一下","希望","後","再","問","不要","回答","錯","Composer","基本","用法","這裡","不在","寫啥","Composer","簡單來說","開發","PHP","專案時","1","個用來","方便","安","裝","使用","第三方","套件","工具","使用","上","會","1","個","composer","json","相依","套件","描写","檔案","並","安","裝過","套件","後","會產生","一份","composer","lock","使用","Git","這類","版本","控","工具","話","建議這兩個檔案","都","加入","追蹤","Composer","lock","安","裝過","相依","套件","後","會","專","案底","下","額外產生","一份","Composer","lock","檔案來鎖","定","目前","安","裝","相依","套件","版本","與資訊","後再執行","install","指令","時","會","先","檢","查這","份","lock","檔案來","安","裝","當","版本","變","更","新增","套件","時","也是","會","更新","這","份","資料","Composer","install","當","composer","install","指令","執行時","會依序執行","下行","為","檢","查","composer","lock","檔案","是否是","存","No","檔案","不","存","改","執行","composer","update","來","建立","Yes","檔案","存","根據","lock","檔內","描写","安","裝","指定","套件","版本","已","存在","套件","可能","會","更新","版本","新增","套件","安","裝","新","套件","Composer","update","當執行","composer","update","時","會依序執行","下行","為","檢","查","composer","json","檔案","根據","composer","json","內","套件","版本","規格","安","裝","最新","1","版","安","裝後","更新","資訊","composer","lock","檔案內","小","結當初開發","專案","composer","lock","加","gitignore","內","導致後來","每次","使用","composer","安","裝","套件","時候","別人","機器","server","上","會問題","重重","正","確","作法","應該","保存","composer","lock","檔","git","repository","內","其他人","需要","更新","時","透過","composer","install","來","安","裝","每次","變","更","紀錄","好","NPM","基本","介紹","於","太多","處理","要透過後端執行","Node.js","勢","必要","學","一下","npm","這東西","透過","Node.js","官網","提供","檔案","安","裝後","實","會將","Node.js","與","NPM","一起","裝","好","NPM","Node","Package","Manager","也就是","Node.js","套件","管理","工具","目前","最多","還","使用","前端","動","化工","具","Gulp","時","需要","安","裝許多","套件","來","加速","前端","動化處理","流程","還","不知道","Gulp","Grunt","之前","只","土炮","shell","script","來跑","css","js","comporess","concat","行為","本来","想學","Grunt","天資","不","夠聰穎","還沒學會","前","跳槽","gulp","沒","想到","還","挺好","上手","使用","npm","來進行","套件","管理","時","專案","下","先","透過","npm","init","來產生","一份","package","json","檔案","後","安","裝過","套件","記","得用","save","or","save","dev","參數來將","套件","名","稱與版號","加入","package","json","內","NPM","基本","指令","顯示","套件","相關資訊","npm","show","lt","package","gt","安","裝相關","套件","npm","install","安","裝","指定","套件","npm","install","lt","package","gt","升級","所有","套件","npm","update","升級","指定","套件","npm","update","lt","package","gt","刪","套件","npm","uninstall","lt","package","gt","套件","清","單","npm","list","npm","install","vs","npm","update","這裡","參","考","stack","overflow","一篇","精美","解釋","123","quot","name","quot","quot","my","project","quot","quot","version","quot","quot","1.0","quot","install","update","quot","dependencies","quot","123","quot","already","installed","versionless","module","quot","quot","quot","ignores","quot","1.0","quot","gt","quot","1.1","quot","quot","already","installed","semver","module","quot","quot","1.4.3","quot","ignores","quot","1.4.3","quot","gt","quot","1.5.2","quot","quot","already","installed","versioned","module","quot","quot","3.4.1","quot","ignores","ignores","quot","not","yet","installed","versionless","module","quot","quot","quot","installs","installs","quot","not","yet","installed","semver","module","quot","quot","4.2.1","quot","installs","installs","quot","not","yet","installed","versioned","module","quot","quot","2.7.8","quot","installs","installs","125","125","以上","看出","npm","install","基本上","將","还没有","安","裝過","module","安","裝進","去","npm","update","安","裝","module","外","還會將","已","經","安","裝過","module","根據版號","描写","去","更新","最新","版本","小","結記","面","試時","面","試官問","這幾個","指令","差","異","為","印象","中","npm","與","composer","install","與","update","行為","上","似乎是","相反","※","正","確來說應該","install","針對","已","安","裝","套件","些微","不同","處理","當時聽完說明後","點","不清楚","決","定","花點時間","查詢並","做","一下","記錄","ReferenceComposer","基本","用法","Composer","It","s","All","About","the","Lock","File","Node.js","Node.js","amp","NPM","安","裝","建立","開發環境","npm","install","vs","update","what","s","the","difference"]},{"title":"使用 Travis CI 自動發布 Hexo 內容到 Github","url":"https://soarlin.github.io/2017/03/29/use-travis-ci-auto-deploy-to-github/","content":"\n\n\n前期準備\nAdd Private Key\n加入 SSH 連線設定\n增加 ssh 連線的 config 設定\n.travis.yml 內設定\n\n\n增加 git 資訊\n加入 Hexo 以及執行 Deploy\n補充：\n\n\n後記\nReference\n\n\n\n\n其實一直都想研究一下 CI/CD 的一些流程，知道 Travis CI 可以結合 Github 上的專案來進行，那就先從一些簡單的小專案開始好了，上網找到一篇文章有 Travis CI 與 Github 以及 Hexo 的關鍵字，害我好興奮，看了好一陣子後決定上了！\n\n前期準備\n申請 Travis CI 帳號\n串接 Github 上的 repo\n替 github 的 repo 加上 .trivas.yml 檔案\n這就比較麻煩，因為得根據各自專案的程式語言來撰寫，我也超不熟，只好去官方網站看文件了\n我先以目前 hexo 的專案為例，就如下面顯示少少兩三行\n\n\n\nlanguage: node_jsnode_js:  - &#x27;4&#x27;\n\n\n\nAdd Private Key因為不能大辣辣的把自己 ssh private key 丟到 github 上，所以 Travis CI 提供加密的方式，可以把 private 加密，等到 Travis 上再來處理；因為我已經把自己電腦的 private key 加到 github 上，所以就直接把 key 加到 Travis 與對應的 repo 上\n\n安裝 Travis command line tool，因為使用 ruby 所以要確認電腦已經安裝好 ruby\n\ngem install travis\n\n\n透過 Command Line Tool 登入到 Travis，需要輸入 github 的帳號密碼\n\ntravis login --auto\n\n\n將自己的 private key 加到對應 repo，加入後會自動改寫 .travis.yml 檔案\n我後來在專案下建立 .travis 目錄，然後將 private key 資料放進去\n\n\n\ntravis encrypt-file ~/.ssh/id_rsa_github --add// or 手動指定 repotravis encrypt-file ~/.ssh/id_rsa_github --add YOUR-NAME/YOUR-REPO-NAMEmkdir .traviscp id_rsa_github.enc .travis/\n\n這時候 .travis.yml 裡面會被添加一些加解密的指令，就不要亂改嘍！注意最後的 -in xxxxx.enc -out oooooo -d，當中xxxxx是剛剛加密後產生的 .enc 檔，而ooooo是 Travis 解密後的檔案路徑，之後會一直用到\n\n-in xxxxx.enc 整個 repo 被 Travis CI 抓取後 private key 的相對路徑，剛剛搬到 .travis 目錄下，所以是 .travis/id_rsa_github.enc\n-out ooooooo 解密後 private key 路徑，後續會再用到，這裡我定義成 ~/.ssh/id_rsa\n\nlanguage: node_jsnode_js:\t- &#x27;4&#x27;before_install:\t- openssl aes-256-cbc -K $encrypted_43f1702cd897_key -iv $encrypted_43f1702cd897_iv -in .travis/id_rsa_github.enc -out ~/.ssh/id_rsa -d\n\n\n加入 SSH 連線設定這時只是把自己的 private key 加密後，在 Travis 從 github 抓出來解密成功，接著還需要指定 SSH 連回 github 使用剛剛解密的 private key，步驟大概是：\n\n增加 ssh 連線的 config 設定\n自己的再連 github 的時候，因為有兩個 github 帳號，所以產生了兩組 private key使用，連帶需要把 ssh 連線設定分開寫\n這邊只列出自己目前常用帳號的 ssh 連線設定提供參考\n\nvim .travis/ssh_config\n\n內容如下：\n# SoarLin@githubHost SoarLin.github.com\tHostName github.com\tUser git\tStrictHostKeyChecking no\t# 底下路徑需要根據實際 Travis CI 上存取解開後的 private key 位置\tIdentityFile ~/.ssh/id_rsa\tIdentitiesOnly yes\n\n\n.travis.yml 內設定\n更改 private key 權限為 600\n將 private key 增加到系統中\n將 ssh 連線搬到系統 ~/.ssh 目錄下\n\n以上這些動作，大概會讓 .travis.yml 檔案變成如下\nlanguage: node_jsnode_js:\t- &#x27;4&#x27;before_install:\t- openssl aes-256-cbc -K $encrypted_43f1702cd897_key -iv $encrypted_43f1702cd897_iv -in .travis/id_rsa_github.enc -out id_rsa -d\t- chmod 600 ~/.ssh/id_rsa\t- eval $(ssh-agent)\t- ssh-add ~/.ssh/id_rsa\t- cp .travis/ssh_config ~/.ssh/config\n\n\n增加 git 資訊因為 hexo deploy 的時候，會將所有產生出來的檔案 push 回 github，所以需要有個 git psuh 的使用者資訊，所以繼續加入 .travis.yml\nlanguage: node_jsnode_js:\t- &#x27;4&#x27;before_install:\t- openssl aes-256-cbc -K $encrypted_43f1702cd897_key -iv $encrypted_43f1702cd897_iv -in id_rsa_github.enc -out id_rsa_github -d\t- chmod 600 id_rsa_github\t- eval $(ssh-agent)\t- ssh-add id_rsa_github\t- cp .travis/ssh_config ~/.ssh/config\t- git config --global user.name &quot;Soar Lin&quot;\t- git config --global user.email soar.lin@gmail.com\n\n\n加入 Hexo 以及執行 Deploy最後當然是把 hexo 套件安裝好，然後執行hexo generate來產生檔案，以及hexo deploy來自動發布，因為我自己還要把 blog 文章丟去 ElasticSearch Server 建立 index 來做搜尋索引，所以會再多一些東西，最後完成的 .travis.yml 大概如下：\n\n補充：一開始忘了把 package.json 內相關套件安裝，所以後來才又補上 npm install，以及增加個 cache，才不用每次都重新安裝 node_modules 內的套件。\n目前 repo 內的佈景，不曉得為何沒有跟著上 github，所以之前 deploy 後，整個頁面空空如也，所以只好再把布景重新傳上去\nlanguage: node_jsnode_js:  - &#x27;4&#x27;cache:  directories:    - node_modulesbefore_install:  - openssl aes-256-cbc -K $encrypted_43f1702cd897_key -iv $encrypted_43f1702cd897_iv -in .travis/id_rsa_github.enc -out ~/.ssh/id_rsa -d  - chmod 600 ~/.ssh/id_rsa  - eval $(ssh-agent)  - ssh-add ~/.ssh/id_rsa  - cp .travis/ssh_config ~/.ssh/config  - git config --global user.name &quot;Soar Lin&quot;  - git config --global user.email soar.lin@gmail.com  - npm install -g hexo-cliinstall:  - npm installscript:  - hexo generate  - curl -i -X POST &quot;https://soar.stco.tw/update&quot; -F &#x27;file=@db.json&#x27; -F &#x27;index=blog&#x27; -F &#x27;type=articles&#x27;  - hexo deploybranches: only:  - master\n\n\n後記雖然好像不複雜，可是我也是照著大大的教學文章，做了好幾個小時，不斷的失敗，不斷的找其他資料參考，最後才完成這小小的流程。希望之後可以越來越上手嘍～\n\nReference用Travis CI自动部署Hexo博客 &lt;– 推薦這篇，很詳細用 Travis CI 自動部署網站到 GitHub &lt;– Hexo作者大大的文章用 Travis CI 自動部屬 hexo 到 GitHub使用 Travis CI 自动更新 Hexo Blog\n","title_tokenize":["使用","Travis","CI","動發布","Hexo","內容","Github"],"content_tokenize":["前期","準備","Add","Private","Key","加入","SSH","連線設","定","增加","ssh","連線","config","設","定","travis","yml","內設","定","增加","git","資訊","加入","Hexo","執行","Deploy","補充","後記","Reference","實","都","想","研究","一下","CI","CD","流程","知道","Travis","CI","結","合","Github","上","專案來進行","先","從","簡單","小","專案開始","好了","上","網","找到","一篇","文章","Travis","CI","與","Github","Hexo","關鍵字","害","好","興奮","看","好","1","陣","子","後決","定","上了","前期","準備","申請","Travis","CI","帳號","串接","Github","上","repo","github","repo","加上","trivas","yml","檔案","這","較麻煩","為","根據","專案","程式","語言來撰寫","超","不熟","只","好","去","官方","網站","看","文件","先","目前","hexo","專案為例","下面","顯示","少少","兩","三行","language","node","js","node","js","x","27","4","x","27","Add","Private","Key","為","不能","大","辣辣","ssh","private","key","丟","github","上","Travis","CI","提供","加密","方式","private","加密","等到","Travis","上","再來處理","為","已","經","電腦","private","key","加","github","上","直接","key","加","Travis","與對應","repo","上","安","裝","Travis","command","line","tool","為","使用","ruby","要確認電腦","已","經","安","裝","好","ruby","gem","install","travis","透過","Command","Line","Tool","登","入","Travis","需要","輸","入","github","帳號密碼","travis","login","auto","將","private","key","加","對應","repo","加入","後會","動","改","寫","travis","yml","檔案","後來","專案","下","建立","travis","目錄","然後將","private","key","資料","放","進","去","travis","encrypt","file","ssh","id","rsa","github","add","or","手","動","指定","repotravis","encrypt","file","ssh","id","rsa","github","add","YOUR","NAME","YOUR","REPO","NAMEmkdir","traviscp","id","rsa","github","enc","travis","這時候","travis","yml","裡","面","會","添加","加","解密","指令","不要","亂","改","嘍","注意","最","後","in","xxxxx","enc","out","oooooo","d","當","中","xxxxx","剛剛","加密","後產生","enc","檔","ooooo","Travis","解密","後","檔案路徑","後會","1","直","用到","in","xxxxx","enc","整個","repo","Travis","CI","抓取","後","private","key","相對路徑","剛剛","搬","travis","目錄","下","travis","id","rsa","github","enc","out","ooooooo","解密","後","private","key","路徑","後續會","再用","這裡","定","義","成","ssh","id","rsa","language","node","js","node","js","x","27","4","x","27","before","install","openssl","aes","256","cbc","K","encrypted","43","f","1702","cd","897","key","iv","encrypted","43","f","1702","cd","897","iv","in","travis","id","rsa","github","enc","out","ssh","id","rsa","d","加入","SSH","連線設","定","這時","private","key","加密","後","Travis","從","github","抓","出","來","解密","成功","接著還","需要","指定","SSH","連回","github","使用","剛剛","解密","private","key","步","驟","大概","增加","ssh","連線","config","設","定","再連","github","時候","為","兩個","github","帳號","產生","兩組","private","key","使用","連帶","需要","ssh","連線設","定","分","開寫","這邊","只","列出","目前","经常使用","帳號","ssh","連線設","定","提供","參","考","vim","travis","ssh","config","內容","以下","SoarLin","githubHost","SoarLin","github","com","HostName","github","com","User","git","StrictHostKeyChecking","no","底下","路徑","需要","根據實際","Travis","CI","上","存取","解開後","private","key","位置","IdentityFile","ssh","id","rsa","IdentitiesOnly","yes","travis","yml","內設","定","更改","private","key","權限為","600","將","private","key","增加","系統","中","將","ssh","連線","搬","系統","ssh","目錄","下","以上","這些動","作","大概","會讓","travis","yml","檔案變","成","以下","language","node","js","node","js","x","27","4","x","27","before","install","openssl","aes","256","cbc","K","encrypted","43","f","1702","cd","897","key","iv","encrypted","43","f","1702","cd","897","iv","in","travis","id","rsa","github","enc","out","id","rsa","d","chmod","600","ssh","id","rsa","eval","ssh","agent","ssh","add","ssh","id","rsa","cp","travis","ssh","config","ssh","config","增加","git","資訊","為","hexo","deploy","時候","會將","所有","產","生出","來","檔案","push","回","github","需要","個","git","psuh","使用者","資訊","繼續","加入","travis","yml","language","node","js","node","js","x","27","4","x","27","before","install","openssl","aes","256","cbc","K","encrypted","43","f","1702","cd","897","key","iv","encrypted","43","f","1702","cd","897","iv","in","id","rsa","github","enc","out","id","rsa","github","d","chmod","600","id","rsa","github","eval","ssh","agent","ssh","add","id","rsa","github","cp","travis","ssh","config","ssh","config","git","config","global","user","name","quot","Soar","Lin","quot","git","config","global","user","email","soar","lin","gmail","com","加入","Hexo","執行","Deploy","最","後當然","hexo","套件","安","裝","好","然後執行","hexo","generate","來產生檔案","hexo","deploy","來","動發布","為","還要","blog","文章","丟","去","ElasticSearch","Server","建立","index","來","做","搜尋","索引","會再多","東西","最","後","完成","travis","yml","大概","以下","補充","1","開始忘","package","json","內相關","套件","安","裝","後來","才","補","上","npm","install","增加","個","cache","才","不用","每次","都","重","新安","裝","node","modules","內","套件","目前","repo","內","佈景","不","曉","為","何沒","著","上","github","之前","deploy","後","整個頁","面","空空如也","只好","再","布景","重新","傳","上去","language","node","js","node","js","x","27","4","x","27","cache","directories","node","modulesbefore","install","openssl","aes","256","cbc","K","encrypted","43","f","1702","cd","897","key","iv","encrypted","43","f","1702","cd","897","iv","in","travis","id","rsa","github","enc","out","ssh","id","rsa","d","chmod","600","ssh","id","rsa","eval","ssh","agent","ssh","add","ssh","id","rsa","cp","travis","ssh","config","ssh","config","git","config","global","user","name","quot","Soar","Lin","quot","git","config","global","user","email","soar","lin","gmail","com","npm","install","g","hexo","cliinstall","npm","installscript","hexo","generate","curl","i","X","POST","quot","https://soar.stco.tw/update&quot;","F","x","27","file","db","json","x","27","F","x","27","index","blog","x","27","F","x","27","type","articles","x","27","hexo","deploybranches","only","master","後記雖然","好","不","複雜","也是","著","大大","教學","文章","做","好","幾個","小","時","不","斷","失敗","不","斷","找","資料參","考","最","後","才","完成","這","小小","流程","希望","後","越來越","上手","嘍","Reference","Travis","CI","自动","部署","Hexo","博客","lt","–","推","薦這篇","很詳細用","Travis","CI","動","部署","網站","GitHub","lt","–","Hexo","作者","大大","文章","Travis","CI","動","部","屬","hexo","GitHub","使用","Travis","CI","自动","更新","Hexo","Blog"]},{"title":"Google Cloud Platform 初體驗","url":"https://soarlin.github.io/2017/02/28/get-start-with-google-cloud-platform/","content":"\n\n\nGoogle Cloud Platform 初體驗\n實驗\nCreate VM on Google Compute Engine\nInstall JDK and ElasticSearch\n地雷區1\n\n\nInstall elasticsearch-analysis-ik\n地雷區2\n\n\nSetup RESTful API for ES\nCreate Index,Type and Mapping\n地雷區3\n\n\nUpload data to create indices\nTest Query API\n\n\n後記！\n補充說明\n\n\n\n\n\n\nGoogle Cloud Platform 初體驗==========================\n原本自己都使用 AWS，但上週聽阿宏說改用 google cloud platform 似乎價格會降低將近一半，所以就來試試看了，覺得 GCP 一開始的 Free Trial 給的不是很吸引人，因為只有 $300 美元 / 兩個月的期限，兩個月其實很快就過去了，然後馬上就要開始收費，很多東西可能才剛架設好，甚至還沒摸熟，服務還沒正式啟用，就開始要使用者付費，這感覺不是很愉快。\n反觀 AWS 的 Free Trial 方案，提供新帳號一年許多服務免費試用，雖然可以使用的等級是最低階的，不過對於新創事業來說，可以邊摸索雲端服務編開發跟部署，等差不多準備就緒應該也好幾個月過去了，接著熟悉雲端服務後，也差不多可以把等級提升正式營運了。\n好了，廢話少說，這次就先找一個簡單的範例來做實驗，在開始之前覺得應該很簡單，實際操作後，才發現踩了好多雷，以及自己原本的文件不夠充足，但還是可以花時間一一克服，唯一比較辛苦的是….我家網路連不上stackoverflow….ＯＭＧ，對於一個工程師來說連不上這網站幾乎是武功被廢的狀態了\n\n實驗將 elasticsearch 移植到 google compute engine 上面運行\n為了達成這目標，有底下幾個步驟：\n\n建立一台VM，類似 AWS EC2 上開啟一台 instance\n安裝 ElasticSearch，當然還必須先把 JDK 安裝好， JDK 版本也要對\n安裝中文分詞套件 ik，須根據 es 版本編譯正確版本套件\n建立 RESTful API 來存取 ElasticSearch\n建立 Index 與 Type 以及 Mapping 資料\n上傳檔案批次建立 index 資料\n搜尋 API 測試\n\n\nCreate VM on Google Compute Engine其實進入 Google Cloud Platform 官網，就可以看到親切的繁體中文介面，大大增加了我想繼續試用下去的心情。\n進入 Compute Engine 的介面，選擇建立”執行個體”後，介面也都是中文的，很好理解，尤其是已經被 AWS 訓練過後，底下是我一開始的設定\n\n\n\n名稱 : micro-elasticsearch-server(請自訂吧！)\n區域 : us-east-a (為了省錢，先放這邊吧！)\n機器類型 : 微型(f1-micro)\n一個共用vCPU\nRAM : 0.6G\n\n\n開機磁碟 :\nUbuntu 16.04 LTS (原本都用14.04，趁現在換個新版試試看)\n標準永久磁碟 10G (為了省錢，放棄SSD)\n\n\n身分及 API 存取權 : 允許預設存取權\n防火牆 : 允許 HTTP, HTTPS 流量\n之後再手動設定 Node.js 的 port\n以及本地端IP連 elasticsearch 的 9200 port\n\n\nSSH 金鑰\n請自行 cat ~/.ssh/id_rsa.pub 的內容貼上\n注意自己的登入名稱\n\n\n\n\n建立完成後，就可以使用網頁版 Terminal 或是自己習慣的SSH軟體連線進去主機操作了，由於已經新增SSH金鑰，所以可以直接根據畫面上顯示的”外部IP”來連線\n\nssh soar@104.XXX.XXX.106\n\n\nInstall JDK and ElasticSearch\n先安裝 Oracle JDK 8 ，教學文件\n安裝 Elasticsearch 到 Server 上，教學文件\n這裡我又想心血來潮去官網抓了 Elasticsearch 5.2.1 版的 deb 檔來安裝\n修改的設定檔如下\n\n\n\nsudo vim /etc/elasticsearch/elasticsearch.ymlcluster.name: my-clusterhttp.port: 9200network.host: 0.0.0.0\n\n\n啟動 Elasticsearch\n\nsudo service elasticsearch start\n\n\n地雷區1這裡我遇到了第一個地雷，原本以為可以順利啟動 Elasticsearch，但後來檢查的時候發現服務沒啟動(狀態檢查sudo service elasticsearch status)，原因是由於 JVM 啟動時所需要的記憶體預設為2G，靠！怎麼我之前那台 t2.micro 才 1G 的 RAM 都可以跑，在這邊就挫賽了，難道因為改用新版比較潮，所以記憶體也需要比較多？\n找了很多資料(從這時候開始無法連上stackoverflow)，最後try了很久，好像只需要修改 jvm 設定，在 5.2 版後可以在 /etc/elasticsearch/ 下看到有個 jvm.options 的檔案，打開來修改吧！\n# 註解原本的這兩行#-Xms2g#-Xmx2g# 修改為下面這樣-Xms1g-Xmx1g\n\n這時候，聰明的人應該會發現原本開啟的 vm 只有 0.6G RAM，應該不行吧！沒錯！\n所以需要調整 vm 的等級，所以乖乖地將 vm stop 後，將機器類型從 f1-micro 更換到 g1-small (1 個 vCPU，1.7 GB 記憶體)，然後再重新 SSH 進去啟動 Elasticsearch 吧！\n\nInstall elasticsearch-analysis-ik安裝一下中文分詞的套件，因為已經不是第一次了，所以還滿容易上手的\n\nclone 專案回自己電腦\n\ngit clone https://github.com/medcl/elasticsearch-analysis-ik.git\n\n\n切換到對應的 ES 版本\nES version 5.2.1 ==&gt; IK version 5.2.1\n\n\n\ngit checkout tags/v5.2.1\n\n\n使用 mvn 來封裝 package\n\nmvn package\n\n\n上傳封裝後 zip 擋到 server 上\n\nsftp soar@104.XXX.XXX.106put target/releases/elasticsearch-analysis-ik-5.2.1.zip .ssh soar@104.XXX.XXX.106# copy zip to /usr/share/elasticsearch/pluginssudo -scp elasticsearch-analysis-ik-5.2.1.zip /usr/share/elasticsearch/pluginscd /usr/share/elasticsearch/pluginsmkdir ikunzip elasticsearch-analysis-ik-5.2.1.zip -d ik\n\n\n地雷區2其實是自己白癡，解壓縮後忘了把zip黨刪除，造成後來啟動 es 失敗，所以 plugins 目錄下請保持正確檔案結構\n\nSetup RESTful API for ES使用自己之前建立的專案 es-restful-api，應該可以很快的把服務建立\n前提是先安裝好 Node.js 以及 npm，安裝 Node.js 可參考 官方文件 或是 digitalocean的文章\n\nCreate Index,Type and Mapping根據之前專案補上的說明文件，大致上可以順利完成，但是在建立 Mapping 時出現狀況了\n\n地雷區3因為 Elasticsearch 5.x 的版本內不在支援 “string” 這個資料類型，所以得改成 “text” 才能順利建立 mapping\n\nUpload data to create indices一樣可以參考專案內的文件，打開 upload 網址，然後將 blog 的 db.json 上傳上去，這邊只要注意原本 API 目錄內沒有 .es-last-index-time 這個檔案就好，才能把資料新建上去\n\nTest Query API這邊依然根據專案的文件來測試吧！\n\n後記！我這個白痴在 Server 上使用 ufw 來設定防火牆規則，而外部 Google Cloud Platform 的網路中也設定好規則，__但是！__主機裡的 ufw 規則一開始我就忘了開啟 22 port 來讓自己電腦連進去，所以就在我剛剛很開心地關掉 SSH 後，就再也無法連線進去了，所以今天所做的一切都白費了。\n\n補充說明後來經過半個多小時的掙扎，以為複製一台機器就有機會成功，結果只是規格複製，裡面空空如也。不過卻有找到可以再開機的時候，讓主機預先執行指定的 script 語法，所以再回到不願放棄的 VM 裡設定，增加自訂 script\n但是記得要先停止 VM 再來更改設定\n自訂中繼資料\n\n\n\nKey\nValue\n\n\n\nstartup-script\nsudo ufw allow ssh\n\n\n也可以在對等 REST 的描述裡找到位置添加，位於 “metadata” 下 “items” 的陣列內加入一組 object，包含 key 與 value\n&quot;metadata&quot;: &#123;  &quot;kind&quot;: &quot;compute#metadata&quot;,  &quot;fingerprint&quot;: &quot;GXxxxxxxxx=&quot;,  &quot;items&quot;: [    &#123;      &quot;key&quot;: &quot;startup-script&quot;,      &quot;value&quot;: &quot;sudo ufw allow ssh&quot;    &#125;,    &#123;      &quot;key&quot;: &quot;ssh-keys&quot;,      &quot;value&quot;: &quot;soar:ssh-rsa AAAAWMrLjP[中間省略]zoHWzIzP/ soar@Soar.local&quot;    &#125;  ]&#125;,\n","title_tokenize":["Google","Cloud","Platform","初體驗"],"content_tokenize":["Google","Cloud","Platform","初體驗","實驗","Create","VM","on","Google","Compute","Engine","Install","JDK","and","ElasticSearch","地雷","區","1","Install","elasticsearch","analysis","ik","地雷","區","2","Setup","RESTful","API","for","ES","Create","Index","Type","and","Mapping","地雷","區","3","Upload","data","to","create","indices","Test","Query","API","後記","補充說明","Google","Cloud","Platform","初體驗","本来","都","使用","AWS","上","週聽阿宏說","改用","google","cloud","platform","恍如","價格會","着落","將","近","一半","來試試","看","覺","GCP","1","開始","Free","Trial","給","不是","很","吸引","人","為","只","300","美元","兩個","月","期限","兩個","月","實","很快","過","去","然後馬","上","就要","開始收費","很多","東西","可能","才","剛架設","好","還沒摸熟","服務還沒","正式","啟用","開始要","使用者","付","費","這感覺","不是","很","愉快","反","觀","AWS","Free","Trial","方案","提供","新","帳號","一年","許多服務","免","費試用","雖然","使用","級","最低","階","不","過對於","新","創事業來說","邊","摸索","雲端服務編開發","部署","差不多","準備","緒應該","幾個","月","過","去","接著","熟习","雲端服務後","差不多","級","提升","正式","營運","好了","廢話","少","說","這","次","先","找","1","個簡單","範例來","做","實驗","開始","之前","覺","應該很簡單","實際","操作","後","才","發現踩","好多","雷，","本来","文件","不","夠","充足","還","花時間","逐一","克服","唯一","較","辛苦的","我家","網路連","不","上","stackoverflow","ＯＭＧ","對於","1","個","工程","師來說連","不","上","這網站幾","武功","廢","狀態","實驗將","elasticsearch","移植","google","compute","engine","上面","運行","為","達","成","這目標","有底","下","幾個","步","驟","建立","一台","VM","類似","AWS","EC","2","上","開啟","一台","instance","安","裝","ElasticSearch","當然還","必","須","先","JDK","安","裝","好","JDK","版本","要對","安","裝","中文","分","詞","套件","ik","須根據","es","版本","編譯","正","確","版本","套件","建立","RESTful","API","來","存取","ElasticSearch","建立","Index","與","Type","Mapping","資料","上","傳檔案","批次","建立","index","資料","搜尋","API","測試","Create","VM","on","Google","Compute","Engine","實進","入","Google","Cloud","Platform","官網","看到","親切","繁體","中文","介面","大大","增加","我想","繼續試用","下去","心情","進","入","Compute","Engine","介面","選擇","建立","執行個體","後","介面","都是","中文","很好","理解","尤其是","已","經","AWS","訓練過後","底下","1","開始","設","定","名","稱","micro","elasticsearch","server","請","訂吧","區域","us","east","a","為","省錢","先","放","這邊吧","機器類型","微型","f","1","micro","1","個","共用","vCPU","RAM","0.6","G","開機","磁碟","Ubuntu","16.04","LTS","本来","都","14.04","趁現","換個","新版","試試","看","標準","永久","磁碟","10","G","為","省錢","放","棄","SSD","身分","API","存取","權","允許預設","存取","權","防火","牆","允許","HTTP","HTTPS","流量","後再","手","動設","定","Node.js","port","本地","端","IP","連","elasticsearch","9200","port","SSH","金鑰","請","自行","cat","ssh","id","rsa","pub","內容貼","上","注意","登","入","名","稱","建立","完成","後","使用","網頁版","Terminal","習慣","SSH","軟體連線進","去","主機","操作","於","已","經","新增","SSH","金鑰","直接","根據畫","面上","顯示","外部","IP","來連線","ssh","soar","104","XXX","XXX","106","Install","JDK","and","ElasticSearch","先","安","裝","Oracle","JDK","8","教學","文件","安","裝","Elasticsearch","Server","上","教學","文件","這裡","想","血汗","來潮","去官","網","抓","Elasticsearch","5.2.1","版","deb","檔來","安","裝","修改","設","定","檔","以下","sudo","vim","etc","elasticsearch","elasticsearch","ymlcluster","name","my","clusterhttp","port","9200","network","host","0.0.0.0","啟動","Elasticsearch","sudo","service","elasticsearch","start","地雷","區","1","這裡","遇到","第一","個","地雷","本来","為","順利啟動","Elasticsearch","後來檢","查","時候發現服務沒啟動","狀態檢","查","sudo","service","elasticsearch","status","原","於","JVM","啟動時","需要","記憶體預設為","2","G","怎麼","之前","台","t","2","micro","才","1","G","RAM","都","跑","這邊","挫賽","難道","為","改用","新版","較潮","記憶體","需要","較多","找","很多","資料","從這時候開始無","法","連","上","stackoverflow","最","後","try","很久","好像","只","需要","修改","jvm","設","定","5.2","版後","etc","elasticsearch","下","看到","個","jvm","options","檔案","開來","修改","註解","本来","這兩行","Xms","2","g","Xmx","2","g","修改","為","下面","這樣","Xms","1","g","Xmx","1","g","這時候","聰明","人應該會發現","本来","開啟","vm","只","0.6","G","RAM","應該","不行","沒錯","需要","調整","vm","級","乖乖","將","vm","stop","後","將機器類型從","f","1","micro","更","換","g","1","small","1","個","vCPU","1.7","GB","記憶體","然後再","重新","SSH","進","去","啟動","Elasticsearch","Install","elasticsearch","analysis","ik","安","裝","一下","中文","分","詞","套件","為","已","經","不是","第一次","還滿","容易","上手","clone","專案回","電腦","git","clone","https://github.com/medcl/elasticsearch-analysis-ik.git","切換","對應","ES","版本","ES","version","5.2.1","gt","IK","version","5.2.1","git","checkout","tags","v","5.2.1","使用","mvn","來","封","裝","package","mvn","package","上","傳","封","裝後","zip","擋","server","上","sftp","soar","104","XXX","XXX","106","put","target","releases","elasticsearch","analysis","ik","5.2.1","zip","ssh","soar","104","XXX","XXX","106","copy","zip","to","usr","share","elasticsearch","pluginssudo","scp","elasticsearch","analysis","ik","5.2.1","zip","usr","share","elasticsearch","pluginscd","usr","share","elasticsearch","pluginsmkdir","ikunzip","elasticsearch","analysis","ik","5.2.1","zip","d","ik","地雷","區","2","實","白癡","解壓縮後忘","zip","黨刪","造成","後來啟動","es","失敗","plugins","目錄","下","請","保持","正","確檔案結構","Setup","RESTful","API","for","ES","使用","之前","建立","專案","es","restful","api","應該","很快","服務","建立","条件","先","安","裝","好","Node.js","npm","安","裝","Node.js","參","考","官方","文件","digitalocean","文章","Create","Index","Type","and","Mapping","根據","之前","專案補","上","說","明文","件","大致上","順利","完成","建立","Mapping","時","出","現狀況","地雷","區","3","為","Elasticsearch","5","x","版本","內","不在","支援","string","這個資料類型","改成","text","才能","順利","建立","mapping","Upload","data","to","create","indices","1","樣","參","考","專案內","文件","開","upload","網址","然後將","blog","db","json","上","傳","上去","這邊","注意","原","API","目錄內沒","es","last","index","time","這個檔案","好","才能","資料","新建","上去","Test","Query","API","這邊","依然","根據專案","文件","來測試吧","後記","這個","白痴","Server","上","使用","ufw","來設","定","防火","牆規則","部","Google","Cloud","Platform","網路","中","設","定","好","規則","主機裡","ufw","規則","1","開始","忘","開啟","22","port","來讓","電腦連進","去","剛剛很開","心肠","關掉","SSH","後","再也","無","法","連線進","去","今天","所做的一切","都","白費","補充說明後來經過半個多","小","時","掙扎","為複製","一台","機器","機會","成功","結果","只","規格複製","裡","面","空空如也","不","過卻","找到","再開機","時候","讓主機預","先","執行","指定","script","語","法","再","回到","不","願","放","棄","VM","裡設","定","增加","訂","script","記","先","停止","VM","再來","更改","設","定","訂","中","繼資料","Key","Value","startup","script","sudo","ufw","allow","ssh","對","REST","描写","裡","找到","位置","添加","位","於","metadata","下","items","陣","列","內","加入","1","組","object","包括","key","與","value","quot","metadata","quot","123","quot","kind","quot","quot","compute","metadata","quot","quot","fingerprint","quot","quot","GXxxxxxxxx","quot","quot","items","quot","123","quot","key","quot","quot","startup","script","quot","quot","value","quot","quot","sudo","ufw","allow","ssh","quot","125","123","quot","key","quot","quot","ssh","keys","quot","quot","value","quot","quot","soar","ssh","rsa","AAAAWMrLjP","中","間","省略","zoHWzIzP","soar","Soar","local","quot","125","125"]},{"title":"Vue 1.x 升級至 2.0 的辛酸歷程","url":"https://soarlin.github.io/2017/01/22/Migration-Vue-to-2/","content":"\n\n\nMigration Vue 1.x to 2.0\n前言\n升級前後版本比較\n升級 Step 1\nVue 1.0 內可無痛修改\n\n\n升級 Step 2\n安裝主要工具\n安裝編譯工具\ngulpfile 調整\n語法調整\n\n\n大功告成？\nReference\n\n\n\n\n\n\n\nMigration Vue 1.x to 2.0\n前言雖然知道 Vue 2.0 推出也好一陣子了，但是原本的專案一直在猶豫該不該升級到 2.0 版本，之前嘗試了一兩次要升級，最後都因為無法順利編譯過而放棄。但由於考量到之後還要再開發的功能也需要使用前端框架，所以這幾天還是痛下決心再試一次。\n目前專案用到的東西真的好複雜，gulp 流程要跑完都要好長一段時間，光 CSS 處理就從，純 CSS 到 CSS 前處理器(包含 Less, Sass)甚至還有後處理器 PostCSS，而 JS Framework 也使用了兩個 React.js 與 Vue.js，而原本 gulpfile 也從單純自己安裝套件到後來改為 Laravel Elixir 的方式來處理，這些全都算是一種技術債吧！\n而這次 Vue 的版本升級，也順便更新了 Laravel Elixir 的版本從 5 到 6，但似乎遇到了一個滿多人遇到的情況，在執行 gulp watch 時，會因為產生亂數版本號(version) 的動作出問題而程序終止，也因為這個問題讓我一度猶豫是否該把 elixir 版本降回去 5.0.x 版，但是昨晚也為了這付出了許多代價，結果還是失敗，只能放棄 gulp watch 這個美好的指令….XD\n\n升級前後版本比較\n這裡先將有相關工具升級前後，版本的資料紀錄一下，\n\n\n\nTools\nBefore\nAfter\n備註\n\n\n\nlaravel-elixir\n5.0.0\n6.0.0-14\n\n\n\nlaravel-elixir-webpack-official\n—-\n1.0.2\nelixir 6 使用 webpack\n\n\nlaravel-elixir-rollup-official\n—-\n1.1.0\nelixir 6 採用 Rollup 來轉譯 JS 到 ES 5\n\n\nlaravel-elixir-browserify-official\n—-\n0.1.3\nelixir 6 在執行 browserSync 用到，不過本身沒用到，似乎白裝了\n\n\nlaravel-elixir-postcss\n0.3.6\n0.5.0\n順便更新\n\n\nlaravel-elixir-vueify\n1.0.3\n—-\nelixir 5 編譯 Vue 1.0 時會用，要編譯 vue 2.0 改用 laravel-elixir-vueify-2.0\n\n\nlaravel-elixir-vueify-2.0\n—-\n1.0.3\nelixir 5 編譯 Vue 2.0 時用到，只是我實驗結果失敗了，所以 elixir 才升級到 6\n\n\nvue\n1.0.26\n2.0.1\n這次的主角 Vue 2.0\n\n\nvuex\n0.6.3\n1.0.1\nVuex 搭背 Vue 來處理狀態機制，類似 React.js 搭配 Redux\n\n\nlaravel-elixir-vue-2\n—-\n0.2.0\nelixir 6 搭配這個總算順利編譯 Vue 2.0 了\n\n\nvueify\n8.7.0\n9.4.0\n用來處理單一 Vue Compoment 檔案，不曉得需不需要也是升級了\n\n\n很希望有人來指導這次的升級該怎麼做才是最佳做法，我不是很聰明，只能一直 try &amp; error，經過了好幾個小時的時間消耗，才順利把 Vue 2.0 給編譯出來，而且可以正常執行，覺得這真的是個打擊信心的做法\n\n升級 Step 1當然先去找升級提示工具來提示，然後在 Vue 1.0 還能編譯的範圍，先將一些細節修改，使用的是官方推薦的工具 - Vue migration helper，第一次檢查專案時，跑出了37個建議，因為之前有過一些經驗，知道有些問題可以先處理，這裡列出來給後人參考\n\n\nVue 1.0 內可無痛修改在真的 npm install &#x76;&#x75;&#x65;&#x40;&#50;&#46;&#x30; 之前，還是有些建議寫法可以先改起來放，可能會有人問說，就乾脆安裝 Vue 2.0 然後再一口氣改不就好了，我也很想這麼做，但是 gulp 一開始就跑不過，不可控制的變數太多，我失敗了幾次後學到的教訓，還是慢慢來就好，如果本身已經是大神的，可能就沒差，直接上吧！\n所以試誤了幾次後，大概歸納出下面幾個可以先在 Vue 1.x 改了也還能編譯過的方法：\n原本屬性內的計算插值要改寫法Interpolation within attributes has been removed\nVue 1.x 寫法&lt;button class=&quot;btn btn-&#123;&#123; size &#125;&#125;&quot;&gt;&lt;/button&gt;Vue 2.0 寫法&lt;button v-bind:class=&quot;&#x27;btn btn-&#x27; + size&quot;&gt;&lt;/button&gt;\n\nHTML 計算插值改用 v-html 替換HTML interpolation with &#123;&#123;&#123;&#125;&#125;&#125; has been removed\nVue 1.x 寫法&lt;div&gt; &#123;&#123;&#123; foo &#125;&#125;&#125; &lt;/div&gt;Vue 2.0 寫法&lt;div v-html=&quot;foo&quot;&gt;&lt;/div&gt;\n\n這裡有踩到雷的經驗，因為在 1.x 時，輸出的 html 內容還可以再搭配其他 DOM 元素，但是改用 v-html 後，裡面再放其他 DOM 元素都會消失，只剩下原本要輸出的 html 內容\n__踩到的地雷__，原本寫法如下\n&lt;div&gt; &#123;&#123;&#123; foo &#125;&#125;&#125; &lt;button&gt;OK&lt;/button&gt; &lt;/div&gt;\n在 1.x 版本還能顯示 button，若改成 2.0 寫法\n&lt;div v-html=&quot;foo&quot;&gt; &lt;button&gt;OK&lt;/button&gt; &lt;/div&gt;\n\n這時候裡面的 button 就無法顯示了，需拆成兩個元件來寫\n&lt;div v-html=&quot;foo&quot;&gt;&lt;/div&gt; &lt;button&gt;OK&lt;/button&gt;\n雖然可能覺得沒什麼，但是原本寫好的一些邏輯判斷就要小心，是否因為 DOM 排列變化而出問題\n移除 v-for 中隱含變數 $index, $key$index has been removed to avoid implicitly defined (i.e. “magic”) variables\nVue 1.x 寫法&lt;div v-for=&quot;item in items&quot;&gt;index : &#123;&#123; $index &#125;&#125;, item = &#123;&#123; item &#125;&#125;&lt;/div&gt;Vue 2.0 寫法&lt;div v-for=&quot;(item, index) in items&quot;&gt;index : &#123;&#123; index &#125;&#125;, item = &#123;&#123; item &#125;&#125;&lt;/div&gt;\n\n__注意事項__，在還沒真的升級到 Vue 2.0 前，v-for 裡增加 index 的寫法，index 擺在前面，如下面的過渡寫法\n&lt;div v-for=&quot;(index, item) in items&quot;&gt;index : &#123;&#123; index &#125;&#125;, item = &#123;&#123; item &#125;&#125;&lt;/div&gt;\n\n\n升級 Step 2當然就是安裝 Vue 2.0，然後再根據 vue-migration-helper 剩下的建議，把語法改一改，再來找合適的編譯工具\n因為還有使用 vuex 來做狀態的管理，為了配合 Vue 2.0，vuex 也需要從原本的 0.6 升級啦 (Migration form Vuex 0.6.x to 1.0)，雖然 vuex 也有 2.0版本，但是寫法也改了，我暫時不想再搞自己了，先把 vue 升到 2.0 就快搞死我了，不想多折磨自己\n\n安裝主要工具當然是 vue 2.0 與 vuex\nnpm install --save vue@2.0.1 vuex@1.0.1\n\n\n安裝編譯工具經過了很長時間的 try &amp; error，總結出應該就是下面這幾個工具，不然就在參考上面的表格吧\n\n&#x6c;&#97;&#x72;&#97;&#x76;&#x65;&#x6c;&#45;&#101;&#x6c;&#x69;&#x78;&#105;&#114;&#64;&#x36;&#x2e;&#48;&#x2e;&#x30;&#x2d;&#x31;&#x34;\nlaravel-elixir-vue-2\nlaravel-elixir-rollup-official\nlaravel-elixir-webpack-official\n\nnpm install --save-dev laravel-elixir-rollup-official laravel-elixir-webpack-officialnpm install --save laravel-elixir@6.0.0-14 laravel-elixir-vue-2\n\n\ngulpfile 調整為了編譯 Vue 2.0，使用了 laravel-elixir-vue-2，所以基本用法如下：\nvar elixir = require(&#x27;laravel-elixir&#x27;)require(&#x27;laravel-elixir-vue-2&#x27;)elixir(function(mix) &#123;  mix.webpack(&#x27;app.js&#x27;); // resources/assets/js/app.js&#125;)\n\n另外 laravel-elixir 版本也從 5 升級到 6，所以原本的 Bebel 寫法也要改成 Rollup\nBebel 寫法elixir(function(mix) &#123;    mix.babel([        &#x27;order.js&#x27;,        &#x27;product.js&#x27;    ]);&#125;);Rollup 寫法elixir(function(mix) &#123;    mix.rollup(&#x27;app.js&#x27;);&#125;);\n\n\n語法調整一樣繼續使用 vue-migration-helper 檢查語法，加以調整\nv-for 中 index, key 變數位置由於先前過度寫法已經加入 index or key 在 v-for 內，所以這邊只是將位置調換，為了符合 Vue 2.0 的用法\n過渡時寫法 (index, value)&lt;div v-for=&quot;(index, item) in items&quot;&gt;index : &#123;&#123; index &#125;&#125;, item = &#123;&#123; item &#125;&#125;&lt;/div&gt;Vue 2.0 寫法 (value, index)&lt;div v-for=&quot;(item, index) in items&quot;&gt;index : &#123;&#123; index &#125;&#125;, item = &#123;&#123; item &#125;&#125;&lt;/div&gt;\n\nLifecycle 中的 ready 已移除ready lifecycle hook has been removedVue 1.x 與 Vue 2.0 的 lifecycle 經過調整，原本的 ready 狀態更換為 mounted，所以就跟著調整\nVue 1.xready: function() &#123;  // code here&#125;Vue 2.0mounted: function () &#123;  this.$nextTick(function () &#123;    // code here  &#125;)&#125;\n\nTransition 參數替換The new and improved transition system requires use of new &lt;transition&gt; and &lt;transition-group&gt; components\n原本的專案內用到 modal 效果，就會需要個簡單的過場，這裡 Vue 有提供好的範例可以參考使用，還不賴 ( Vue 2.0 的 Modal Compontent 範例 )\nVue 1.x 版本\n&lt;div class=&quot;modal-mask&quot; v-show=&quot;show&quot; transition=&quot;modal&quot;&gt;  &lt;div class=&quot;modal-wrapper&quot;&gt;    ....  &lt;/div&gt;&lt;/div&gt;\n\nVue 2.0 版本\n&lt;transition name=&quot;modal&quot;&gt;  &lt;div class=&quot;modal-mask&quot;&gt;    &lt;div class=&quot;modal-wrapper&quot;&gt;      ....    &lt;/div&gt;  &lt;/div&gt;&lt;/transition&gt;\n\nComponent 必須有個 root domVue 2.0 後，每個元件都必須被包在一個 DOM 元素下，這點跟 React.js 有點像，之前沒這麼做，現在就不得不改寫了\nVue 1.x 版本&lt;template&gt;  &lt;div&gt;    ....   &lt;/div&gt;  &lt;component-a&gt;&lt;/&lt;component-a&gt;  &lt;component-b&gt;&lt;/&lt;component-b&gt;&lt;/template&gt;Vue 2.0 版本&lt;template&gt;  &lt;div&gt;    &lt;div&gt;      ....     &lt;/div&gt;    &lt;component-a&gt;&lt;/&lt;component-a&gt;    &lt;component-b&gt;&lt;/&lt;component-b&gt;  &lt;/div&gt;&lt;/template&gt;\n\nvm.$set (this.$set) 用法替換原本專案內很多元件裡的 data 都透過 this.$set 的方式來更新內容，現在 vm.$set 變成 Vue.set 的別名，所以原本的用法就變啦！\nvm.$set( keypath, value ) –&gt; Vue.set( object, key, value )\n底下是自己的紀錄\n基本調整this.$set(&#x27;mode&#x27;, nextMode);修改為this.$set(this, &#x27;mode&#x27;, nextMode);在 vue-resource 使用時要注意// Vue 1.0 -&gt; 2.0後, this.$set 改成 Vue.set 別名// Vue.set(object, key, value), 所以須將自身傳入才能指定到contents這個資料var self = this;this.$http.get(&#x27;/someUrl&#x27;).then((response) =&gt; &#123;  // success callback  var contents = response.json();  this.$set(self, &#x27;contents&#x27;, contents);&#125;, (response) =&gt; &#123;  // error callback&#125;);\n\n其他自己遇到的問題checkbox 元件的預設狀態原本 Vue 1.x 寫成 &lt;input type=&quot;checkbox&quot; :checked=&quot;checked&quot;&gt; 裡面的 checked 是從父原件傳入的 Boolean 值，但是改成 Vue 2.0 後，似乎就失效了，花了很久的時間才改正確\nVue 1.x 時&lt;input type=&quot;checkbox&quot; name=&quot;status&quot; :checked=&quot;checked&quot;       v-model=&quot;status&quot;&gt;搭配export default &#123;  props: &#123;    checked: Boolean  &#125;,  data() &#123;        return &#123;            status: &#x27;&#x27;        &#125;;    &#125;,&#125;;Vue 2.0 後&lt;input type=&quot;checkbox&quot; name=&quot;status&quot; v-model=&quot;status&quot;&gt;搭配export default &#123;  props: &#123;    checked: Boolean  &#125;,  data() &#123;        return &#123;            status: this.checked        &#125;;    &#125;,&#125;;\n\n中間一度誤入歧途，找到了一些在討論 prop 取消雙向綁定 的問題，但等到後來解決後才想到，我根本就是用 vuex 在做狀態管理，一開始就不是 twoWay bind 的做法，還搞了半天，簡直就是白痴\n\n大功告成？其實還沒有經過很嚴謹的測試，但是基本的功能與操作上，似乎沒有太多問題，我該高興我好不容易花了兩三天總算順利升級了嗎？但是想到 elixir 6 在 gulp watch 會出錯 (Cannot gulp watch, but can gulp)，實在一點也高興不起來，上網找了一下相關問題，似乎滿多人也都遇到了，但真正的解法我倒是還沒找到，希望有人可以來替我指點迷津。\n\nReferenceVueJS 2.0 升級小幫手: Vue migration helper\nMigration from Vue 1.x\n","title_tokenize":["Vue","1","x","升級至","2.0","辛酸","歷程"],"content_tokenize":["Migration","Vue","1","x","to","2.0","前言","升級","前","後","版本","較","升級","Step","1","Vue","1.0","內","無痛","修改","升級","Step","2","安","裝","主要","工具","安","裝編譯","工具","gulpfile","調整","語","法","調整","大功告成","Reference","Migration","Vue","1","x","to","2.0","前言","雖然","知道","Vue","2.0","推出","1","陣","子","本来","專案","猶豫該","不","該升級","2.0","版本","之前","嘗試","1","兩","次要","升級","最","後","都","為無","法","順利編譯過","放","棄","於","考量","後還要再開發","功能","需要","使用","前端","框架","這幾天還","痛","下","決心再試","一次","目前","專案","用到","東西","真","好","複雜","gulp","流程","要跑完","都","要好","長","1","段時間","光","CSS","處理","從","純","CSS","CSS","前","處理器","包括","Less","Sass","還","後處理器","PostCSS","JS","Framework","使用","兩個","React","js","與","Vue","js","本来","gulpfile","從單純","安","裝","套件","後來","改","為","Laravel","Elixir","方式","來處理","這些","全都","算是","1","種技術債吧","這","次","Vue","版本","升級","順便","更新","Laravel","Elixir","版本","從","5","6","恍如","遇到","1","個滿多人","遇到","情況","執行","gulp","watch","時","會","為產生亂數","版本","號","version","動","作出","問題","程序","終止","為這個問題讓","一度","猶豫","是否是","該","elixir","版本","降","回去","5.0","x","版","昨晚","為","這","付出","許多","代","價","結果還","失敗","只","放","棄","gulp","watch","這個","美好的","指令","XD","升級","前","後","版本","較","這裡","先","將","相關","工具","升級","前","後","版本","資料紀錄","一下","Tools","Before","After","備註","laravel","elixir","5.0.0","6.0.0","14","laravel","elixir","webpack","official","1.0.2","elixir","6","使用","webpack","laravel","elixir","rollup","official","1.1.0","elixir","6","採用","Rollup","來轉譯","JS","ES","5","laravel","elixir","browserify","official","0.1.3","elixir","6","執行","browserSync","用到","不","過","本身","沒","用到","恍如","白裝","laravel","elixir","postcss","0.3.6","0.5.0","順便","更新","laravel","elixir","vueify","1.0.3","elixir","5","編譯","Vue","1.0","時會用","要編譯","vue","2.0","改用","laravel","elixir","vueify","2.0","laravel","elixir","vueify","2.0","1.0.3","elixir","5","編譯","Vue","2.0","時","用到","只","實驗結果失敗","elixir","才","升級","6","vue","1.0.26","2.0.1","這","次","主角","Vue","2.0","vuex","0.6.3","1.0.1","Vuex","搭","背","Vue","來處理狀態機制","類似","React","js","搭配","Redux","laravel","elixir","vue","2","0.2.0","elixir","6","搭配","這個總算順利編譯","Vue","2.0","vueify","8.7.0","9.4.0","用來處理單","1","Vue","Compoment","檔案","不","曉","需","不需要","也是","升級","很","希望","有人","來指導這","次","升級該怎麼","做","才是","最好","做法","我不是","很聰明","只","try","amp","error","經過","好","幾個","小","時","時間","消耗","才","順利","Vue","2.0","給編譯","出","來","正常","執行","覺","這","真","個","擊","信心","做法","升級","Step","1","當然","先","去找","升級","提示","工具","來","提示","然後","Vue","1.0","還","編譯","範圍","先","將","細節","修改","使用","官方","推","薦","工具","Vue","migration","helper","第一次","檢","查專案時","跑出","37","個建議","為","之前","過","經驗","知道","問題","先","處理","這裡","列出","來給後人參","考","Vue","1.0","內","無痛","修改","真","npm","install","x","76","x","75","x","65","x","40","50","46","x","30","之前","還","建議寫","法","先","改","來","放","可能","會","有人","問說","乾脆","安","裝","Vue","2.0","然後","再一口","氣","改","不","好了","很想","這麼","做","gulp","1","開始","跑","不","過","不可","控制","變數","太多","失敗","幾","次","後學","教訓","還","渐渐","來","好","本身","已","經","大神","可能","沒","差","直","接上","試誤","幾","次","後","大概","歸納","出","下面","幾個","先在","Vue","1","x","改","還","編譯過","方法","本来","屬性內","計算","插","值要","改","寫","法","Interpolation","within","attributes","has","been","removed","Vue","1","x","寫","法","lt","button","class","quot","btn","btn","123","123","size","125","125","quot","gt","lt","button","gt","Vue","2.0","寫","法","lt","button","v","bind","class","quot","x","27","btn","btn","x","27","size","quot","gt","lt","button","gt","HTML","計算","插","值","改用","v","html","替換","HTML","interpolation","with","123","123","123","125","125","125","has","been","removed","Vue","1","x","寫","法","lt","div","gt","123","123","123","foo","125","125","125","lt","div","gt","Vue","2.0","寫","法","lt","div","v","html","quot","foo","quot","gt","lt","div","gt","這裡","踩","雷的","經驗","為","1","x","時","輸","出","html","內容還","再","搭配","DOM","元素","改用","v","html","後","裡","面","再","放","DOM","元素","都","會","消失","只","剩下","本来","要輸","出","html","內容","踩","地雷","本来","寫","法","以下","lt","div","gt","123","123","123","foo","125","125","125","lt","button","gt","OK","lt","button","gt","lt","div","gt","1","x","版本","還","顯示","button","改成","2.0","寫","法","lt","div","v","html","quot","foo","quot","gt","lt","button","gt","OK","lt","button","gt","lt","div","gt","這時候裡","面","button","無","法","顯示","需拆","成","兩個","元件","來寫","lt","div","v","html","quot","foo","quot","gt","lt","div","gt","lt","button","gt","OK","lt","button","gt","雖然","可能","覺","沒什麼","本来","寫","好的","邏輯","判","斷","就要","当心","是否是","為","DOM","排列","變化","出","問題","移","v","for","中","隱","含","變數","index","key","index","has","been","removed","to","avoid","implicitly","defined","i","e","magic","variables","Vue","1","x","寫","法","lt","div","v","for","quot","item","in","items","quot","gt","index","123","123","index","125","125","item","123","123","item","125","125","lt","div","gt","Vue","2.0","寫","法","lt","div","v","for","quot","item","index","in","items","quot","gt","index","123","123","index","125","125","item","123","123","item","125","125","lt","div","gt","注意","事項","還沒","真","升級","Vue","2.0","前","v","for","裡","增加","index","寫","法","index","擺","在前面","以下","面","過渡寫","法","lt","div","v","for","quot","index","item","in","items","quot","gt","index","123","123","index","125","125","item","123","123","item","125","125","lt","div","gt","升級","Step","2","當然","安","裝","Vue","2.0","然後再根據","vue","migration","helper","剩下","建議","語","法","改","一改","再來","找","合","適","編譯","工具","為還","使用","vuex","來","做","狀態","管理","為","配合","Vue","2.0","vuex","需要","從","本来","0.6","升級","Migration","form","Vuex","0.6","x","to","1.0","雖然","vuex","2.0","版本","寫","法","改","暫時","不想","再","弄","先","vue","升","2.0","快","弄","死","不想","折磨","安","裝","主要","工具","當然","vue","2.0","與","vuex","npm","install","save","vue","2.0.1","vuex","1.0.1","安","裝編譯","工具","經過","很長時間","try","amp","error","總結","出","應該","下面","這幾個","工具","參","考","上面","表格","x","6","c","97","x","72","97","x","76","x","65","x","6","c","45","101","x","6","c","x","69","x","78","105","114","64","x","36","x","2","e","48","x","2","e","x","30","x","2","d","x","31","x","34","laravel","elixir","vue","2","laravel","elixir","rollup","official","laravel","elixir","webpack","official","npm","install","save","dev","laravel","elixir","rollup","official","laravel","elixir","webpack","officialnpm","install","save","laravel","elixir","6.0.0","14","laravel","elixir","vue","2","gulpfile","調整為","編譯","Vue","2.0","使用","laravel","elixir","vue","2","基本","用法","以下","var","elixir","require","x","27","laravel","elixir","x","27","require","x","27","laravel","elixir","vue","2","x","27","elixir","function","mix","123","mix","webpack","x","27","app","js","x","27","resources","assets","js","app","js","125","laravel","elixir","版本","從","5","升級","6","本来","Bebel","寫","法","改成","Rollup","Bebel","寫","法","elixir","function","mix","123","mix","babel","x","27","order","js","x","27","x","27","product","js","x","27","125","Rollup","寫","法","elixir","function","mix","123","mix","rollup","x","27","app","js","x","27","125","語","法","調整","1","樣繼續","使用","vue","migration","helper","檢","查語","法","加以","調整","v","for","中","index","key","變數","位置","於","先前","過度寫","法","已","經","加入","index","or","key","v","for","內","這邊","只","將","位置","調換","為","符合","Vue","2.0","用法","過渡時寫","法","index","value","lt","div","v","for","quot","index","item","in","items","quot","gt","index","123","123","index","125","125","item","123","123","item","125","125","lt","div","gt","Vue","2.0","寫","法","value","index","lt","div","v","for","quot","item","index","in","items","quot","gt","index","123","123","index","125","125","item","123","123","item","125","125","lt","div","gt","Lifecycle","中的","ready","已","移","ready","lifecycle","hook","has","been","removedVue","1","x","與","Vue","2.0","lifecycle","經過調整","本来","ready","狀態","更","換為","mounted","著調整","Vue","1","xready","function","123","code","here","125","Vue","2.0","mounted","function","123","this","nextTick","function","123","code","here","125","125","Transition","參數替換","The","new","and","improved","transition","system","requires","use","of","new","lt","transition","gt","and","lt","transition","group","gt","components","本来","專案內","用到","modal","效果","會","需要","個簡單","過場","這裡","Vue","提供","好的","範例","參","考","使用","還","不","賴","Vue","2.0","Modal","Compontent","範例","Vue","1","x","版本","lt","div","class","quot","modal","mask","quot","v","show","quot","show","quot","transition","quot","modal","quot","gt","lt","div","class","quot","modal","wrapper","quot","gt","lt","div","gt","lt","div","gt","Vue","2.0","版本","lt","transition","name","quot","modal","quot","gt","lt","div","class","quot","modal","mask","quot","gt","lt","div","class","quot","modal","wrapper","quot","gt","lt","div","gt","lt","div","gt","lt","transition","gt","Component","必","須","個","root","domVue","2.0","後","個","元件","都","必","須","包","1","個","DOM","元素","下","這點","React","js","點","之前","沒這麼","做","現","不能不","改","寫","Vue","1","x","版本","lt","template","gt","lt","div","gt","lt","div","gt","lt","component","a","gt","lt","lt","component","a","gt","lt","component","b","gt","lt","lt","component","b","gt","lt","template","gt","Vue","2.0","版本","lt","template","gt","lt","div","gt","lt","div","gt","lt","div","gt","lt","component","a","gt","lt","lt","component","a","gt","lt","component","b","gt","lt","lt","component","b","gt","lt","div","gt","lt","template","gt","vm","set","this","set","用法","替換","本来","專案內","很多","元件","裡","data","都","透過","this","set","方式","來","更新","內容","現","vm","set","變","成","Vue","set","別","名","本来","用法","變","vm","set","keypath","value","–","gt","Vue","set","object","key","value","底下","紀錄","基本","調整","this","set","x","27","mode","x","27","nextMode","修改","為","this","set","this","x","27","mode","x","27","nextMode","vue","resource","使用","時要","注意","Vue","1.0","gt","2.0","後","this","set","改成","Vue","set","別","名","Vue","set","object","key","value","須將","本身","傳","入","才能","指定","contents","這個資料","var","self","this","this","http","get","x","27","someUrl","x","27","then","response","gt","123","success","callback","var","contents","response","json","this","set","self","x","27","contents","x","27","contents","125","response","gt","123","error","callback","125","他自己","遇到","問題","checkbox","元件","預設狀態","本来","Vue","1","x","寫","成","lt","input","type","quot","checkbox","quot","checked","quot","checked","quot","gt","裡","面","checked","從父","原件","傳","入","Boolean","值","改成","Vue","2.0","後","恍如","失效","花","很久","時間","才","改","正","確","Vue","1","x","時","lt","input","type","quot","checkbox","quot","name","quot","status","quot","checked","quot","checked","quot","v","model","quot","status","quot","gt","搭配","export","default","123","props","123","checked","Boolean","125","data","123","return","123","status","x","27","x","27","125","125","125","Vue","2.0","後","lt","input","type","quot","checkbox","quot","name","quot","status","quot","v","model","quot","status","quot","gt","搭配","export","default","123","props","123","checked","Boolean","125","data","123","return","123","status","this","checked","125","125","125","中","間","一度","誤","入","歧途","找","到了","討論","prop","取消","雙","綁","定","問題","等到","後來解決後","才","想到","根本","vuex","做","狀態","管理","1","開始","不是","twoWay","bind","做法","還","弄","半天","簡","直","白痴","大功告成","實還沒","經過很嚴謹","測試","基本的","功能","與","操作","上","恍如","沒","太多","問題","該","高興","好不容易","花","兩","三天","總算順利升級","嗎","想到","elixir","6","gulp","watch","會","出","錯","Cannot","gulp","watch","but","can","gulp","實","1","點","高興","不起","來","上","網","找","一下","相關問題","恍如","滿多人","都","遇到","真正","解法","倒是","還沒","找到","希望","有人","來替","指點","迷津","ReferenceVueJS","2.0","升級","小","幫","手","Vue","migration","helper","Migration","from","Vue","1","x"]},{"title":"前端樣板結合Gulp處理流程","url":"https://soarlin.github.io/2016/12/26/frontend-templates-with-gulp/","content":"\n\n\n前端樣板結合Gulp處理流程\n專案位置\n用到的技術\n開發環境\n工具安裝\n目錄架構\n基本概念\n\n\nCommand\ngulp\n\n\n\n\n\n\n\n\n\n前端樣板結合Gulp處理流程由於最近要做個純前端切版的案子，所以慢慢的建立一些規則，把一些處理流程交給gulp來執行，也順便整理一下希望日後還可以重複利用，不過前端技術變化日新月異，我到現在還不是用webpack而是gulp，其實不是不想用，只是試著要建立webpack設定檔時候，一直遇到問題，乾脆還是回來用比較習慣的gulp好了。等日後更有空再來慢慢研究好了\n使用的技術也都不是很新，不過只要可以讓自己在前端切版這個案子方便好用，就會想辦法拿來使用。\n\n專案位置https://github.com/SoarLin/f2e-template\n\n用到的技術\nGulp : 前端自動化流程工具，唯一一個花比較多時間研究與實作的技術，webpack 雖然有研究過，但這次專案開始的時候，一直弄不起來，火大之下就放棄了\nSass : CSS preprocessor，雖然最早學會的是 Less，公司專案因為前人使用 postCSS(CSS後處理器)，但後來學了 Sass 後，暫時跳槽來這個最多人使用的前處理器\nEJS : JavaScript Templates，雖然使用了這個樣版引擎，可是是用來處理滿 low 的事情，單純只是為了把 HTML 的重複區塊獨立抽出來，然後在每個頁面利用 include 的方式載入會重複使用的區塊（其實最習慣的還是 Laravel 內用的 blade 樣板）\nBower : 前端套件管理工具，雖然已經宣告中止開發了，也被很多人詬病，但對於我目前做的前端切版專案而已，其實滿夠用了\n\n\n開發環境紀錄一下當前的開發環境，避免日後工具版本太新潮，現在這些東西又跟不上潮流，不能使用\n\nnode v4.2.2\nnpm 3.9.2\nbower 1.8.0\n工具安裝\n\n基本配備當然就是 node.js 與 npm 了，其他東西也都是透過 npm 在慢慢安裝上去的，如果連 node.js 都還沒安裝，請上官網下載適合自己電腦設備的檔案來安裝\n\nnpm install -g bower gulp 安裝 bower 與 gulp 到全域環境下\nnpm install 安裝此專案所需要套件\nbower install 安裝此專案所需要前端第三方套件\n\n\n目錄架構目錄結構.├── .bowerrc├── .eslintrc.json├── .gitignore├── README.md├── assets/│　　├── css/│　　├── images/│　　├── js/│　　└── sass/│　　　　├── main.scss│　　　　├── modules/│　　　　└── partials/├── bower.json├── bundle-vendor.config.js├── gulpfile.js├── package.json├── public/│　　├── bower/│　　└── img/├── templates/│   ├── index.ejs│   └── partials/└── views/\n\n基本概念\nCSS 前端處理器使用 Sass\nHTML 樣板使用 EJS\n自動化流程使用 Gulp\n基本 stylesheet, javascript, images 檔案先放在 assets 下，編譯後放到 public 目錄下\nhtml檔案先以 ejs 格式存放在 templates 下，編譯後放到 views 目錄下\n前端套件使用 bower 進行管理, 預設目錄放在 public/bower 下\n\nassets 目錄\nsass : scss 樣式檔依據模組 or 區塊再分成兩個資料夾放，透過 main.scss 將所有檔案載入一起編譯\ncss : sass編譯後產生的 css 暫存檔存放區\njs : 頁面內的 javascript 抽離至這裡撰寫, 最後編譯成單一檔案\nimages : 理想中圖片都先丟到這個目錄, 壓縮後才放到 public 目錄下\n\ntemplates 目錄\nindex.ejs : 基本html檔範例, 注意上方變數 title 用來命名每個頁面標題\npartials : HTML檔部分區塊存放處\n\nviews 目錄\nviews : ejs 產生的 html 檔存放處\n\npublic 目錄\njs : assets/js 編譯串接後的檔案存放處\ncss : assets/sass 編譯後檔案存放處\nimg : assets/image 下圖片壓縮後存放處\n\n單一檔案說明\n.bowerrc : bower 設定檔, 指定下載的套件存放目錄\n.eslintrc.json : eslint 設定檔, 用來檢查 js 語法\n.gitignore : git 要忽略的檔案設定\nbower.json : bower 安裝套件與版本\nbundle-vendor.config.js : 指定第三方套件 js 檔編譯成單一檔案，用來減少 request 數量\ngulpfile.js : gulp 指令檔案\npackage.json : npm 安裝套件與版本\n\n\nCommand\ngulp\n\n\n指令\n用途\n\n\n\ngulp clean\n清除文件, 包含js,css,html檔\n\n\ngulp html\n建立html檔, 將ejs檔轉換成html檔案輸出\n\n\ngulp styles\n建立CSS檔, 將Sass檔案轉換為單一CSS檔\n\n\ngulp scripts\n建立JS檔, 將多個js檔案合併成單一JS檔案\n\n\ngulp images\n處理圖片檔, 將圖片檔進行壓縮輸出\n\n\ngulp bundle-vendor\n將前端所用 3rd 套件 JS 整合成單一檔案\n\n\ngulp watch\n自動偵測 scss, js, ejs 檔案變化, 執行對應動作\n\n\ngulp (default)\n預設執行動作, clean -&gt; images, bundle-vendor, styles, scripts, html\n\n\ngulp –env=production\n輸出壓縮過的css與js檔\n\n\n","title_tokenize":["前端","樣板結","合","Gulp","處理","流程"],"content_tokenize":["前端","樣板結","合","Gulp","處理","流程","專案","位置","用到","技術","開發環境","工具","安","裝","目錄架構","基本","概念","Command","gulp","前端","樣板結","合","Gulp","處理","流程","於","最近","做","個純","前端","切版","案子","渐渐","建立","規則","處理","流程","交","給","gulp","來執行","順便","整理","一下","希望","日","後還","重","複","利用","不","過","前端","技術變化","日","新月","異","現","還","不是","webpack","gulp","實","不是","不想","只","試著要","建立","webpack","設","定","檔時候","1","直","遇到","問題","乾脆","還","回來用","較習慣","gulp","好了","日","後","更","有空","再來","渐渐","研究","好了","使用","技術","都","不是","很","新","不","過","讓","前端","切版這個","案子","方便","好","會想辦","法","來","使用","專案","位置","https://github.com/SoarLin/f2e-template","用到","技術","Gulp","前端","動化","流程","工具","唯一一","個花","較多時間","研究","與實","作","技術","webpack","雖然","研究","過","這","次","專案開始","時候","弄","不起","來","火","大","之下","放","棄","Sass","CSS","preprocessor","雖然","最早","學會","Less","公司","專案","為","前人","使用","postCSS","CSS","後處理器","後來學","Sass","後","暫時","跳槽","來這個","最多","人","使用","前","處理器","EJS","JavaScript","Templates","雖然","使用","這個樣版","引擎","用來處理滿","low","事情","單純","只","為","HTML","重","複區塊獨立","抽出","來","然後","個頁","面","利用","include","方式","載","入","會","重","複","使用","區塊","實","最","習慣","還","Laravel","內用","blade","樣板","Bower","前端","套件","管理","工具","雖然","已","經","宣布","中断","開發","很多","人詬","病","對於","目前","做","前端","切版專案","實滿夠用","開發環境紀錄","一下","當","前","開發環境","避免","日","後","工具","版本","太","新潮","現","這些東西","跟不上","潮流","不能","使用","node","v","4.2.2","npm","3.9.2","bower","1.8.0","工具","安","裝","基本","配備當然","node.js","與","npm","東西","都是","透過","npm","渐渐","安","裝","上去","連","node.js","都","還沒","安","裝","請","上官網","下","載適","合","電腦設備","檔案來","安","裝","npm","install","g","bower","gulp","安","裝","bower","與","gulp","全域","環境","下","npm","install","安","裝","專案","需要","套件","bower","install","安","裝","專案","需要","前端","第三方","套件","目錄架構目錄結構","bowerrc","eslintrc","json","gitignore","README","md","assets","css","images","js","sass","main","scss","modules","partials","bower","json","bundle","vendor","config","js","gulpfile","js","package","json","public","bower","img","templates","index","ejs","partials","views","基本","概念","CSS","前端","處理器","使用","Sass","HTML","樣板","使用","EJS","動化","流程","使用","Gulp","基本","stylesheet","javascript","images","檔案","先","放","assets","下","編譯後","放到","public","目錄","下","html","檔案","先","ejs","格式","寄存","templates","下","編譯後","放到","views","目錄","下","前端","套件","使用","bower","進行","管理","預設目錄","放","public","bower","下","assets","目錄","sass","scss","樣式檔依據模組","or","區塊","再分","成","兩個資料夾","放","透過","main","scss","將","所有","檔案載","入","一起","編譯","css","sass","編譯後產生","css","暫","存","檔","寄存","區","js","頁","面","內","javascript","抽離至這裡撰寫","最","後編譯","成","單","1","檔案","images","理想","中","圖","片","都","先","丟","這個目錄","壓縮後","才","放到","public","目錄","下","templates","目錄","index","ejs","基本","html","檔範例","注意","上方","變數","title","用來","命名","個頁","面","標題","partials","HTML","檔","部份","區塊","寄存","處","views","目錄","views","ejs","產生","html","檔","寄存","處","public","目錄","js","assets","js","編譯串接後","檔案","寄存","處","css","assets","sass","編譯後檔案","寄存","處","img","assets","image","下","圖","片","壓縮後","寄存","處","單","1","檔案說明","bowerrc","bower","設","定","檔","指定","下","載","套件","寄存","目錄","eslintrc","json","eslint","設","定","檔","用來檢","查","js","語","法","gitignore","git","忽视","檔案設","定","bower","json","bower","安","裝","套件","與","版本","bundle","vendor","config","js","指定","第三方","套件","js","檔編譯","成","單","1","檔案","用來減","少","request","數","量","gulpfile","js","gulp","指令","檔案","package","json","npm","安","裝","套件","與","版本","Command","gulp","指令","用处","gulp","clean","清除","文件","包括","js","css","html","檔","gulp","html","建立","html","檔","將","ejs","檔轉換","成","html","檔案輸","出","gulp","styles","建立","CSS","檔","將","Sass","檔案轉換為單","1","CSS","檔","gulp","scripts","建立","JS","檔","將多個","js","檔案","合","併","成","單","1","JS","檔案","gulp","images","處理圖","片","檔","將圖","片","檔進行壓縮輸","出","gulp","bundle","vendor","將","前端","所用","3","rd","套件","JS","整合","成","單","1","檔案","gulp","watch","動偵測","scss","js","ejs","檔案變化","執行對應動","作","gulp","default","預設執行動","作","clean","gt","images","bundle","vendor","styles","scripts","html","gulp","–","env","production","輸","出","壓縮過","css","與","js","檔"]},{"title":"Elasticsearch Basic Operation","url":"https://soarlin.github.io/2016/11/13/elasticsearch-note-operation/","content":"\n\n\nElasticsearch 筆記(基本操作)\n基本指令\n檢查 Server 狀態\n列出所有 index\n列出index下所有types\n建立 index\n刪除 index\n建立資料index(基本單筆資料操作)\n取出資料 (使用id)\n更新資料 (使用id)\n刪除資料 (使用id)\n\n\n重要指令\n建立資料index (批次處理資料)\n\n\n搜尋指令\n基本方法\n\n\n後記\n建立 Mapping\n建立 Server 與 API\nRefrence\n\n\n\n\n\n\n\n\n\nElasticsearch 筆記(基本操作)\n基本指令\n檢查 Server 狀態curl localhost:9200------------------------------正常運作的話會返回類似下面的 json&#123;  &quot;name&quot; : &quot;Apalla&quot;,  &quot;cluster_name&quot; : &quot;soar-local-es&quot;,  &quot;cluster_uuid&quot; : &quot;uBfjdJ-kSkCM8F6Bg7VNDg&quot;,  &quot;version&quot; : &#123;    &quot;number&quot; : &quot;2.4.1&quot;,    &quot;build_hash&quot; : &quot;c67dc32e24162035d18d6fe1e952c4cbcbe79d16&quot;,    &quot;build_timestamp&quot; : &quot;2016-09-27T18:57:55Z&quot;,    &quot;build_snapshot&quot; : false,    &quot;lucene_version&quot; : &quot;5.5.2&quot;  &#125;,  &quot;tagline&quot; : &quot;You Know, for Search&quot;&#125;\n\n\n列出所有 index\ncurl localhost:9200/_cat/indices?v類似出現下面的畫面，顯示每個index的狀態跟資料筆數等資訊--------------------------------------health status index   pri rep docs.count docs.deleted store.size pri.store.sizegreen  open   quizfun   1   0       5417          301     11.9mb         11.9mbgreen  open   soarlin   1   0         16            3    502.1kb        502.1kbyellow open   blogs     5   1         17            2      255kb          255kb\n\n\n列出index下所有typescurl -XGET &#x27;http://localhost:9200/myindex/_mapping?pretty&#x27;回傳結果類似下方&#123;  &quot;myindex&quot;: &#123;    &quot;mappings:: &#123;      &quot;type1&quot;: &#123;        &quot;properties&quot; : &#123;          ...        &#125;      &#125;      &quot;type2&quot;: &#123;        &quot;properties&quot; : &#123;          ...        &#125;      &#125;    &#125;  &#125;&#125;\n\n\n建立 indexcurl -XPUT localhost:9200/[IndexName]?pretty----------------------------成功的話，回傳下面訊息&#123;  &quot;acknowledged&quot; : true&#125;----------------------------失敗的話，通常是index已經存在，則是下面訊息&#123;  &quot;error&quot; : &#123;    &quot;root_cause&quot; : [ &#123;      &quot;type&quot; : &quot;index_already_exists_exception&quot;,      &quot;reason&quot; : &quot;already exists&quot;,      &quot;index&quot; : &quot;customer&quot;    &#125; ],    &quot;type&quot; : &quot;index_already_exists_exception&quot;,    &quot;reason&quot; : &quot;already exists&quot;,    &quot;index&quot; : &quot;customer&quot;  &#125;,  &quot;status&quot; : 400&#125;\n\n\n刪除 indexcurl -XDELETE localhost:9200/[IndexName]?pretty----------------------------成功的話，回傳下面訊息&#123;  &quot;acknowledged&quot; : true&#125;\n\n\n建立資料index(基本單筆資料操作)底下範例為官網提供，輸入一筆資料與回傳訊息\n\nindex: customer,\ntype: external,\nid: 1\n\ncurl -XPUT &#x27;localhost:9200/customer/external/1?pretty&#x27; -d &#x27;&#123;  &quot;name&quot;: &quot;John Doe&quot;&#125;&#x27;&#123;  &quot;_index&quot; : &quot;customer&quot;,  &quot;_type&quot; : &quot;external&quot;,  &quot;_id&quot; : &quot;1&quot;,  &quot;_version&quot; : 1,  &quot;created&quot; : true&#125;\n\n\n取出資料 (使用id)curl -XGET &#x27;localhost:9200/customer/external/1?pretty&#x27;&#123;  &quot;_index&quot; : &quot;customer&quot;,  &quot;_type&quot; : &quot;external&quot;,  &quot;_id&quot; : &quot;1&quot;,  &quot;_version&quot; : 1,  &quot;found&quot; : true,  &quot;_source&quot; : &#123; &quot;name&quot;: &quot;John Doe&quot; &#125;&#125;\n\n\n更新資料 (使用id)curl -XPOST &#x27;localhost:9200/customer/external/1/_update?pretty&#x27; -d &#x27;&#123;  &quot;doc&quot;: &#123; &quot;name&quot;: &quot;Jane Doe&quot;, &quot;age&quot;: 20 &#125;&#125;&#x27;# 需要原本資料在更新 ctx._source.xxxx (實測失敗了)curl -XPOST &#x27;localhost:9200/customer/external/1/_update?pretty&#x27; -d &#x27;&#123;  &quot;script&quot; : &quot;ctx._source.age += 5&quot;&#125;&#x27;\n\n\n刪除資料 (使用id)curl -XDELETE &#x27;localhost:9200/customer/external/1?pretty&#x27;\n\n\n重要指令\n建立資料index (批次處理資料)使用 bulk 方法將要處理的資料依次為\n\n操作方法帶id, 如：建立index, 更新資料, 刪除資料\n資料內容(刪除時不需要)\n\n\n\n\n操作方法\n資料內容\n\n\n\n建立index 資料 id\n{“index”:{“_id”:”1”}}\n\n\n建立index 資料內容\n{“name”: “John Doe”}\n\n\n更新資料 依據 id\n{“update”:{“_id”:”1”}}\n\n\n更新資料 資料內容\n{“doc”: {“name”: “Mary Jane”, “age”: 23} }\n\n\n建立index 資料id\n{“index”:{“_id”:”2”}}\n\n\n建立index 資料內容\n{“name”: “John Doe”}\n\n\n刪除資料 資料id\n{“delete”:{“_id”:”2”}}\n\n\ncurl -XPOST &#x27;localhost:9200/customer/external/_bulk?pretty&#x27; -d &#x27;&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;&#123;&quot;name&quot;: &quot;John Doe&quot; &#125;&#123;&quot;update&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;&#123;&quot;doc&quot;: &#123;&quot;name&quot;: &quot;Mary Jane&quot;, &quot;age&quot;: 23&#125; &#125;&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;&#123;&quot;name&quot;: &quot;Jane Doe&quot; &#125;&#123;&quot;delete&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;&#x27;\n\n\n搜尋指令使用搜尋引擎(elasticsearch or solr)的好處就是，搜尋的結果，會將搜尋結果的資料，依據加權後總分列出來，一般關聯式資料庫使用 like %keyword% 的話，只能找出所有含有 keyword 的資料，無法根據搜尋字詞來找出關聯程度從高到低的排序過資料。\n\n基本方法搜尋index下所有資料，回傳資料說明如下：\n\ntook: 在 Elasticsearch 內搜尋所花費的時間(單位: milliseconds, 毫秒, 千分之一秒)\ntimed_out: 這次搜尋是否有超時(需要設定超時時間)\n_shards: 搜尋了多少個片段，成功與失敗個數\nhits: 搜尋結果回傳\nhits.total: 搜尋回傳資料筆數\nhits.max_score: 搜尋結果最高分數\n\ncurl &#x27;localhost:9200/customer/_search?q=*&amp;pretty&#x27;搜尋的結果類似下方資料------------------------&#123;  &quot;took&quot; : 2,  &quot;timed_out&quot; : false,  &quot;_shards&quot; : &#123;    &quot;total&quot; : 5,    &quot;successful&quot; : 5,    &quot;failed&quot; : 0  &#125;,  &quot;hits&quot; : &#123;    &quot;total&quot; : 2,    &quot;max_score&quot; : 1.0,    &quot;hits&quot; : [ &#123;      &quot;_index&quot; : &quot;customer&quot;,      &quot;_type&quot; : &quot;external&quot;,      &quot;_id&quot; : &quot;1&quot;,      &quot;_score&quot; : 1.0,      &quot;_source&quot; : &#123;        &quot;name&quot; : &quot;John Wang&quot;,        &quot;age&quot; : 23      &#125;    &#125;, &#123;      &quot;_index&quot; : &quot;customer&quot;,      &quot;_type&quot; : &quot;external&quot;,      &quot;_id&quot; : &quot;2&quot;,      &quot;_score&quot; : 1.0,      &quot;_source&quot; : &#123;        &quot;name&quot; : &quot;Mary Wang&quot;      &#125;    &#125; ]  &#125;&#125;\n\n針對所有欄位搜尋同一關鍵字\ncurl &#x27;localhost:9200/customer/_search?q=wang&amp;pretty&#x27;\n\n使用 query(Query DSL) 字串做比較精確的搜尋\ncurl -XPOST &#x27;localhost:9200/customer/_search?pretty&#x27; -d &#x27;&#123;  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,  &quot;size&quot;: 1&#125;&#x27;curl -XPOST &#x27;localhost:9200/blog/_search?pretty&#x27; -d &#x27;&#123;  &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;content&quot;: &quot;postcss&quot; &#125; &#125;&#125;&#x27;curl -XPOST &#x27;localhost:9200/blog/_search?pretty&#x27; -d &#x27;&#123;  &quot;query&quot;: &#123;    &quot;bool&quot;: &#123;      &quot;must&quot;: [        &#123; &quot;match&quot;: &#123; &quot;content&quot;: &quot;server&quot; &#125; &#125;,        &#123; &quot;match&quot;: &#123; &quot;tags&quot;: &quot;linux&quot; &#125; &#125;      ]    &#125;  &#125;&#125;&#x27;\n\n\n後記\n建立 Mapping因為在塞資料建立 index 前，還是得先確認一下之後資料的格式，寫好一個比較ＯＫ的資料 mapping，才能再塞資料的時候確保塞進去的資料格式能夠最佳化被處理，底下是之前找到別人針對 hexo blog 資料格式設定給 elasticsearch 的 mapping，分享給有需要的人參考，當然這是有安裝 ik 中文斷詞套件了\n\nindex: blog\ntype: article\n\n&#123;    &quot;settings&quot;: &#123;        &quot;number_of_shards&quot; :   1,        &quot;number_of_replicas&quot; : 0    &#125;,    &quot;_default_&quot;: &#123;&#125;,    &quot;mappings&quot;: &#123;       &quot;article&quot;: &#123;            &quot;dynamic&quot;: false,            &quot;date_detection&quot;: false,            &quot;_all&quot;: &#123;                  &quot;analyzer&quot;: &quot;ik_max_word&quot;,                  &quot;search_analyzer&quot;: &quot;ik_smart&quot;,                  &quot;term_vector&quot;: &quot;no&quot;            &#125;,            &quot;properties&quot;: &#123;                &quot;title&quot;: &#123;                    &quot;type&quot;: &quot;string&quot; ,                    &quot;term_vector&quot;: &quot;with_positions_offsets&quot;,                    &quot;include_in_all&quot;: true,                    &quot;analyzer&quot;: &quot;ik_max_word&quot;,                    &quot;search_analyzer&quot;: &quot;ik_smart&quot;,                    &quot;boost&quot;: 2                &#125;,                &quot;slug&quot;: &#123;                    &quot;type&quot;: &quot;string&quot;,                    &quot;index&quot;: &quot;no&quot;                &#125;,                &quot;date&quot;: &#123;                    &quot;type&quot;: &quot;date&quot;,                    &quot;format&quot;: &quot;epoch_second&quot;                &#125;,                &quot;updated&quot;: &#123;                    &quot;type&quot;: &quot;date&quot;,                    &quot;format&quot;: &quot;epoch_second&quot;                &#125;,                &quot;categories&quot;: &#123;                    &quot;type&quot;: &quot;string&quot;,                    &quot;index&quot;: &quot;not_analyzed&quot;                &#125;,                &quot;tags&quot;: &#123;                    &quot;type&quot;: &quot;string&quot;,                    &quot;index&quot;: &quot;not_analyzed&quot;                &#125;,                &quot;content&quot;: &#123;                    &quot;type&quot;: &quot;string&quot;,                    &quot;term_vector&quot;: &quot;with_positions_offsets&quot;,                    &quot;include_in_all&quot;: true,                    &quot;analyzer&quot;: &quot;ik_max_word&quot;,                    &quot;search_analyzer&quot;: &quot;ik_smart&quot;,                    &quot;norms&quot;: &#123; &quot;enabled&quot;: false &#125;                &#125;           &#125;       &#125;    &#125;&#125;\n\n\n\n建立 Server 與 API一開始摸索 Elasticsearch 只是為了給自己 blog 做文章搜尋，所以還得弄一台 server 出來，然後把環境都弄好後，另外再用 node.js 來開發一個 API 介面，主要是為了避免 9200 這個 port 一直裸露在外，到時候被別人發現拿去玩。但是做個 API 介面，弄的很簡陋，似乎也有可能被別人拿去玩…XD。\n我想一般人用 node.js 來做 RESTful API 介面的話，應該首選再搭配個 Express Framework 就可以很快搞定了吧！但是！！之前被__正豪__花言巧語騙去學 Koa Framework，結果只好硬著頭皮用 koa 來寫，真的快搞死自己了。\n寫的過程才發現原來自己對於 ES6 的 Generator 還是很不熟練，在寫 API 的時候，一度快崩潰，因為有太多 non-blocking callback 要處理，只好還是乖乖地使用 Promise 這方法，雖然可以減少寫出波動拳語法，但還是覺得寫超過三個 promise 後，也是很可怕的事情。\n附上部分自己連續五個 promise 的 code, 覺得慘不忍睹\nyield check_db_json(tmpfile)    .then(check_last_index_file)    .then(get_last_index)    .then(bulkArticles)    .then(update_last_index_file, function(res)&#123;console.log(res.msg);&#125;)    .then(function(res)&#123;        if (res.status === &#x27;ok&#x27; || res.status === &#x27;done&#x27;) &#123;            console.log(res.msg);            RESULT.update = &#x27;success&#x27;;        &#125;    &#125;, function(res)&#123;        console.log(res.msg);    &#125;);\n\n因為 blog 是使用 hexo+github 的方式，所以寫好 markdown 語法後，透過 hexo 的處理可以產生一個 db.json 檔案，所以可以直接使用這個檔案來建立文章 index，還算方便，而且有人寫好 python 的工具來處理\n\nhexo-elasticsearch-tools\n\n但是因為 server 架在雲端，又不開放 9200 port 來直接存取，所以花了很久的時間再將 python 更新文章 index 的行為重新改寫，中間遇到檔案必需上傳，所以還得先弄一個簡單的介面來上傳 db.json，這邊就得再去找 koa 的範例來看\n\nKoa example\n重點套件 co-busboy\n\n\n\n雖然花了好幾天在改寫這兩百行出頭的 ptyhon，但是改寫後還是功能沒人家齊全，但是…我有多一個資料上傳介面，所以多了 form 表單要處理，所以也是做得很辛苦，寫完也是兩百多行…XD\n\nRefrence另外，也可以參考別人寫的教學，但是我道行太淺，有大部分有看沒有懂\n\nElasticsearch 使用示例及 Hexo 集成\n\n","title_tokenize":["Elasticsearch","Basic","Operation"],"content_tokenize":["Elasticsearch","筆記","基本","操作","基本","指令","檢","查","Server","狀態","列出","所有","index","列出","index","下","所有","types","建立","index","刪","index","建立","資料","index","基本","單筆資料","操作","取出","資料","使用","id","更新","資料","使用","id","刪","資料","使用","id","重要","指令","建立","資料","index","批次","處理資料","搜尋","指令","基本","方法","後記","建立","Mapping","建立","Server","與","API","Refrence","Elasticsearch","筆記","基本","操作","基本","指令","檢","查","Server","狀態","curl","localhost","9200","正常","運","作","話會","返回","類似","下面","json","123","quot","name","quot","quot","Apalla","quot","quot","cluster","name","quot","quot","soar","local","es","quot","quot","cluster","uuid","quot","quot","uBfjdJ","kSkCM","8","F","6","Bg","7","VNDg","quot","quot","version","quot","123","quot","number","quot","quot","2.4.1","quot","quot","build","hash","quot","quot","c","67","dc","32","e","24162035","d","18","d","6","fe","1","e","952","c","4","cbcbe","79","d","16","quot","quot","build","timestamp","quot","quot","2016","09","27","T","18","57","55","Z","quot","quot","build","snapshot","quot","false","quot","lucene","version","quot","quot","5.5.2","quot","125","quot","tagline","quot","quot","You","Know","for","Search","quot","125","列出","所有","index","curl","localhost","9200","cat","indices","v","類似","出","現","下面","畫","面","顯示","個","index","狀態","資料筆數","資訊","health","status","index","pri","rep","docs","count","docs","deleted","store","size","pri","store","sizegreen","open","quizfun","1","0","5417","301","11.9","mb","11.9","mbgreen","open","soarlin","1","0","16","3","502.1","kb","502.1","kbyellow","open","blogs","5","1","17","2","255","kb","255","kb","列出","index","下","所有","typescurl","XGET","x","27","http://localhost:9200/myindex/_mapping?pretty&#x27;","回傳結果類似","下方","123","quot","myindex","quot","123","quot","mappings","123","quot","type","1","quot","123","quot","properties","quot","123","125","125","quot","type","2","quot","123","quot","properties","quot","123","125","125","125","125","125","建立","indexcurl","XPUT","localhost","9200","IndexName","pretty","成功","話","回傳","下面","訊息","123","quot","acknowledged","quot","true","125","失敗","話","通常","index","已","經","存","則","下面","訊息","123","quot","error","quot","123","quot","root","cause","quot","123","quot","type","quot","quot","index","already","exists","exception","quot","quot","reason","quot","quot","already","exists","quot","quot","index","quot","quot","customer","quot","125","quot","type","quot","quot","index","already","exists","exception","quot","quot","reason","quot","quot","already","exists","quot","quot","index","quot","quot","customer","quot","125","quot","status","quot","400","125","刪","indexcurl","XDELETE","localhost","9200","IndexName","pretty","成功","話","回傳","下面","訊息","123","quot","acknowledged","quot","true","125","建立","資料","index","基本","單筆資料","操作","底下","範例為官網","提供","輸","入","1","筆資料與回傳訊息","index","customer","type","external","id","1","curl","XPUT","x","27","localhost","9200","customer","external","1","pretty","x","27","d","x","27","123","quot","name","quot","quot","John","Doe","quot","125","x","27","123","quot","index","quot","quot","customer","quot","quot","type","quot","quot","external","quot","quot","id","quot","quot","1","quot","quot","version","quot","1","quot","created","quot","true","125","取出","資料","使用","id","curl","XGET","x","27","localhost","9200","customer","external","1","pretty","x","27","123","quot","index","quot","quot","customer","quot","quot","type","quot","quot","external","quot","quot","id","quot","quot","1","quot","quot","version","quot","1","quot","found","quot","true","quot","source","quot","123","quot","name","quot","quot","John","Doe","quot","125","125","更新","資料","使用","id","curl","XPOST","x","27","localhost","9200","customer","external","1","update","pretty","x","27","d","x","27","123","quot","doc","quot","123","quot","name","quot","quot","Jane","Doe","quot","quot","age","quot","20","125","125","x","27","需要","本来","資料","更新","ctx","source","xxxx","實測失敗","curl","XPOST","x","27","localhost","9200","customer","external","1","update","pretty","x","27","d","x","27","123","quot","script","quot","quot","ctx","source","age","5","quot","125","x","27","刪","資料","使用","id","curl","XDELETE","x","27","localhost","9200","customer","external","1","pretty","x","27","重要","指令","建立","資料","index","批次","處理資料","使用","bulk","方法","將要處理","資料","顺次","為","操作方法","帶","id","建立","index","更新","資料","刪","資料","資料內容","刪","時","不需要","操作方法","資料內容","建立","index","資料","id","index","id","1","建立","index","資料內容","name","John","Doe","更新","資料","依據","id","update","id","1","更新","資料","資料內容","doc","name","Mary","Jane","age","23","建立","index","資料","id","index","id","2","建立","index","資料內容","name","John","Doe","刪","資料","資料","id","delete","id","2","curl","XPOST","x","27","localhost","9200","customer","external","bulk","pretty","x","27","d","x","27","123","quot","index","quot","123","quot","id","quot","quot","1","quot","125","125","123","quot","name","quot","quot","John","Doe","quot","125","123","quot","update","quot","123","quot","id","quot","quot","1","quot","125","125","123","quot","doc","quot","123","quot","name","quot","quot","Mary","Jane","quot","quot","age","quot","23","125","125","123","quot","index","quot","123","quot","id","quot","quot","2","quot","125","125","123","quot","name","quot","quot","Jane","Doe","quot","125","123","quot","delete","quot","123","quot","id","quot","quot","2","quot","125","125","x","27","搜尋","指令","使用","搜尋","引擎","elasticsearch","or","solr","好","處","搜尋","結果","會將搜尋結果","資料","依據","加","權後總","分列","出","來","關聯式資料庫","使用","like","keyword","話","只能","找出","所有","含有","keyword","資料","無","法","根據搜尋字詞來","找出","關聯","程度","從","高","低的","排序","過資料","基本","方法","搜尋","index","下","所有","資料","回傳資料說明","以下","took","Elasticsearch","內搜尋","花費","時間","單","位","milliseconds","毫秒","千分之一秒","timed","out","這","次","搜尋","是否是","超","時","需要","設","定","超","時時間","shards","搜尋","個","片断","成功","與失敗個數","hits","搜尋結果回傳","hits","total","搜尋回傳資料筆數","hits","max","score","搜尋結果","最高分","數","curl","x","27","localhost","9200","customer","search","q","amp","pretty","x","27","搜尋","結果類似","下方","資料","123","quot","took","quot","2","quot","timed","out","quot","false","quot","shards","quot","123","quot","total","quot","5","quot","successful","quot","5","quot","failed","quot","0","125","quot","hits","quot","123","quot","total","quot","2","quot","max","score","quot","1.0","quot","hits","quot","123","quot","index","quot","quot","customer","quot","quot","type","quot","quot","external","quot","quot","id","quot","quot","1","quot","quot","score","quot","1.0","quot","source","quot","123","quot","name","quot","quot","John","Wang","quot","quot","age","quot","23","125","125","123","quot","index","quot","quot","customer","quot","quot","type","quot","quot","external","quot","quot","id","quot","quot","2","quot","quot","score","quot","1.0","quot","source","quot","123","quot","name","quot","quot","Mary","Wang","quot","125","125","125","125","針對","所有","欄","位","搜尋","同一","關鍵字","curl","x","27","localhost","9200","customer","search","q","wang","amp","pretty","x","27","使用","query","Query","DSL","字串","做","較精確","搜尋","curl","XPOST","x","27","localhost","9200","customer","search","pretty","x","27","d","x","27","123","quot","query","quot","123","quot","match","all","quot","123","125","125","quot","size","quot","1","125","x","27","curl","XPOST","x","27","localhost","9200","blog","search","pretty","x","27","d","x","27","123","quot","query","quot","123","quot","match","quot","123","quot","content","quot","quot","postcss","quot","125","125","125","x","27","curl","XPOST","x","27","localhost","9200","blog","search","pretty","x","27","d","x","27","123","quot","query","quot","123","quot","bool","quot","123","quot","must","quot","123","quot","match","quot","123","quot","content","quot","quot","server","quot","125","125","123","quot","match","quot","123","quot","tags","quot","quot","linux","quot","125","125","125","125","125","x","27","後記","建立","Mapping","為","塞資料","建立","index","前","還","先","確認","一下","後資料","格式","寫","好","1","個","較","ＯＫ","資料","mapping","才能","再塞資料","時候確","保","塞進","去","資料","格式","夠","最好","化","處理","底下","之前","找到","別人針對","hexo","blog","資料","格式","設","定","給","elasticsearch","mapping","分享","給","需要","人參","考","當然這","安","裝","ik","中文","斷詞","套件","index","blog","type","article","123","quot","settings","quot","123","quot","number","of","shards","quot","1","quot","number","of","replicas","quot","0","125","quot","default","quot","123","125","quot","mappings","quot","123","quot","article","quot","123","quot","dynamic","quot","false","quot","date","detection","quot","false","quot","all","quot","123","quot","analyzer","quot","quot","ik","max","word","quot","quot","search","analyzer","quot","quot","ik","smart","quot","quot","term","vector","quot","quot","no","quot","125","quot","properties","quot","123","quot","title","quot","123","quot","type","quot","quot","string","quot","quot","term","vector","quot","quot","with","positions","offsets","quot","quot","include","in","all","quot","true","quot","analyzer","quot","quot","ik","max","word","quot","quot","search","analyzer","quot","quot","ik","smart","quot","quot","boost","quot","2","125","quot","slug","quot","123","quot","type","quot","quot","string","quot","quot","index","quot","quot","no","quot","125","quot","date","quot","123","quot","type","quot","quot","date","quot","quot","format","quot","quot","epoch","second","quot","125","quot","updated","quot","123","quot","type","quot","quot","date","quot","quot","format","quot","quot","epoch","second","quot","125","quot","categories","quot","123","quot","type","quot","quot","string","quot","quot","index","quot","quot","not","analyzed","quot","125","quot","tags","quot","123","quot","type","quot","quot","string","quot","quot","index","quot","quot","not","analyzed","quot","125","quot","content","quot","123","quot","type","quot","quot","string","quot","quot","term","vector","quot","quot","with","positions","offsets","quot","quot","include","in","all","quot","true","quot","analyzer","quot","quot","ik","max","word","quot","quot","search","analyzer","quot","quot","ik","smart","quot","quot","norms","quot","123","quot","enabled","quot","false","125","125","125","125","125","125","建立","Server","與","API","1","開始","摸索","Elasticsearch","只","為","給","blog","做文章","搜尋","還","弄","一台","server","出","來","然後","環境","都","弄好","後","再用","node.js","來開發","1","個","API","介面","主要","為","避免","9200","這個","port","袒露","在外","時候","別人發現","拿去","玩","做","個","API","介面","弄","很簡陋","恍如","有可能","別人","拿去","玩","XD","我想","常人","node.js","來","做","RESTful","API","介面","話","應該","首","選再","搭配","個","Express","Framework","很快","搞定","之前","正豪","花言巧語騙","去","學","Koa","Framework","結果","只","好","硬","著頭皮用","koa","來寫","真","快","弄","死","寫","過程","才","發現","原","來","對於","ES","6","Generator","還","很不","熟練","寫","API","時候","一度","快","崩潰","為","太多","non","blocking","callback","要處理","只","好","還","乖乖","使用","Promise","這","方","法","雖然","減","少","寫","出","波動拳語","法","還","覺","寫","超","過","3","個","promise","後","也是","很","可怕的","事情","附上","部份","連續","5","個","promise","code","覺","慘","不忍","睹","yield","check","db","json","tmpfile","then","check","last","index","file","then","get","last","index","then","bulkArticles","then","update","last","index","file","function","res","123","console","log","res","msg","125","then","function","res","123","if","res","status","x","27","ok","x","27","res","status","x","27","done","x","27","123","console","log","res","msg","RESULT","update","x","27","success","x","27","125","125","function","res","123","console","log","res","msg","125","為","blog","使用","hexo","github","方式","寫","好","markdown","語","法","後","透過","hexo","處理","產生","1","個","db","json","檔案","直接","使用","這個檔案來","建立","文章","index","還算","方便","有人","寫","好","python","工具","來處理","hexo","elasticsearch","tools","為","server","架","雲端","不","開","放","9200","port","來","直接","存取","花","很久","時間再將","python","更新","文章","index","行為","重新","改","寫","中","間","遇到","檔案","必须","上","傳","還","先","弄","1","個簡單","介面","來","上","傳","db","json","這邊","再","去找","koa","範例來","看","Koa","example","重","點","套件","co","busboy","雖然花","好","幾天","改","寫這兩","百","行","出","頭","ptyhon","改","寫後還","功能","沒","齊","全","1","個資料","上","傳","介面","form","表單要處理","也是","做","得很","辛苦","寫完","也是","兩","百","多行","XD","Refrence","參","考","別人寫","教學","道行","太","淺","大部分","看","沒","懂","Elasticsearch","使用","示例","Hexo","集成"]},{"title":"Elasticsearch Installation and Setting","url":"https://soarlin.github.io/2016/11/12/elasticsearch-setting/","content":"\n\n\nElasticsearch 筆記(環境設定)\n前言(垃圾話)\nInstallation 安裝\n檢查 Java 版本\n使用整包壓縮檔方式\nAmazon Linux 上安裝方式\n\n\n安裝套件\n安裝 AWS Cloud Plugin\n安裝 IK 分詞套件\n\n\n\n\n\n\n\n\nElasticsearch 筆記(環境設定)\n前言(垃圾話)由於先前接 case 的時候，簡單的碰了一下 solr 這套搜尋引擎，後來又聽鈞元哥提到他正在玩的另一套搜尋引擎 - Elasticsearch，記得之前在臉書上比較常看到 Elasticsearch 的討論或文章，所以後來自己也選擇這套來研究。\n一開始出發點很單純，因為開始在寫 blog，希望 blog 上開始有文章搜尋的功能，雖然現在這技術相關文章的 blog 裡面也才10來篇文章，切個兩頁就差不多了，根本不太需要特別弄個搜尋功能，不過本著好玩的心情開始來鑽研這工具，深深覺得日後工作上肯定會在用到。\n果不其然前陣子收到合作單位發信來問說，他在我們資料庫搜尋題目的時候，想找 “go” 一詞相關的題目，結果我們回傳給他的題目卻是 “good” 的結果…QQ。因為資料庫是MySQL，我們用這種 「%keyword%」 方式來針對題目欄位搜尋，當然會出現這種悲劇…Orz。跟同事討論的解法大概就是使用能夠正確斷詞斷字的搜尋引擎吧！\n不過這套搜尋引擎工具，實在是博大精深，我到現在大概只摸到一點點邊邊角角吧！趕快趁熱來把一些資訊整理記錄下來。造福日後的自己。另外，一點小小哀怨的是，我才研究兩週左右，趕巧遇上版本從 2.4.1 瞬間變成 5.0 … 我還是先乖乖把 2.4.1 的使用弄熟好了。\n\nInstallation 安裝根據官方文件的方式，我先在自己的 Macbook pro 電腦上試著安裝使用，還算簡單，缺點就是得一直開著一個 terminal 的頁面來運行 elasticsearch。\nElasticsearch 仍是需要 Java 環境來運行，而 Java 版本至少需要 1.7 以上，官網推薦使用 Oracle JDK version 1.8.0_73 這版本來安裝(教學請根據各自作業系統環境 google 吧)。\n\n檢查 Java 版本\njava -versionecho $JAVA_HOME\n\n\n使用整包壓縮檔方式下載並解壓縮 Elasticsearch 2.4.1 版本，開始執行curl -L -O https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.4.1/elasticsearch-2.4.1.tar.gztar -xvf elasticsearch-2.4.1.tar.gzcd elasticsearch-2.4.1/bin./elasticsearch\n\n設定調整設定叢集與節點名稱，可以利用再啟動 elasticsearch 指令後面添加參數\n./elasticsearch --cluster.name my_cluster_name --node.name my_node_name\n\n另一個作法是，先把設定檔改好，然後再啟動 elasticsearch\n$ ~/elasticsearch-2.4.1/ cd config/vim elasticsearch.yml// add custom cluster.name and node.name at file last linecluster.name: my_cluster_namenode.name: my_node_name\n\n\nAmazon Linux 上安裝方式會使用 Amazon linux 其實是個美麗的意外，因為某天早上先從 AWS Elasticsearch 服務開始測試，發現無法安裝中文分詞套件，只好放棄這個偷懶的方式，後來只好重新啟動一台 EC2 instance 來用，一開始用 Ubuntu 14.04 版本(自己慣用版本)，但是找到的 教學文(How To Install and Configure Elasticsearch on Ubuntu 14.04) 到最後好像也是在安裝中文分詞遇到狀況\n幾番波折下，找到比較詳細的 安裝教學1 安裝教學2 已經是使用 Amazon Linux 了，只好重新啟動 Amazon Linux 的 EC2 instance 來安裝使用。\nInstall Java 8sudo yum install java-1.8.0\n安裝後檢查一下版本\njava -version--------------------------------------------------------java version &quot;1.8.0_65&quot;Java(TM) SE Runtime Environment (build 1.8.0_65-b17)Java HotSpot(TM) 64-Bit Server VM (build 25.65-b01, mixed mode)\n\n安裝 Elasticsearch 2.4.1sudo rpm -i https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/rpm/elasticsearch/2.4.1/elasticsearch-2.4.1.rpm\n\n另外使用 yum 的安裝方式，可以參考 這篇，底下節錄安裝步驟出來\nElasticsearch 可以透過新增套件倉儲網址到套件管理檔案裡的方式來使用 yum 指令安裝。首先先執行底下指令:\nsudo rpm --import http://packages.elastic.co/GPG-KEY-elasticsearch\n\n接著編輯 yum respository 檔案\nsudo vi /etc/yum.repos.d/elasticsearch.repo// And save the following configuration to it--------------------------------------------[elasticsearch-2.x]name=Elasticsearch repository for 2.x packagesbaseurl=http://packages.elastic.co/elasticsearch/2.x/centosgpgcheck=1gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearchenabled=1\n\n然後再執行安裝指令:\nsudo yum -y install elasticsearch\n\n啟動 elasticsearchsudo service elasticsearch start (stop / restart)\n\n調整設定值設定檔位置 /etc/elasticsearch/elasticsearch.yml\nsudo vi /etc/elasticsearch/elasticsearch.yml\n\n設定讓外部可連入該台主機 elasticsearch，加入 network.host: 0.0.0.0 到設定檔內，不過要注意這樣有點風險，只要有人知道這台主機 IP，就可以拿來使用，所以主機防火牆請在另外設定允許的 IP，來降低主機被拿去當他的搜尋引擎主機使用的風險。\n\n安裝套件\n安裝 AWS Cloud PluginAWS EC2 上要使用 cluster，就必須要安裝此套件\n插件安裝位置 /usr/share/elasticsearch/\ncd /usr/share/elasticsearch/sudo bin/plugin install cloud-aws\n\n\n安裝 IK 分詞套件這個步驟真的比較複雜，根據 IK 在 Github 上的說明，雖然只有短短幾行指令，但是中間有個套件我又需要另外安裝，那就是 mvn (Apache Maven:Java 自動化編譯工具)，因為我跟 Java 很不熟，所以真的是頭一次聽過這東西，不過好在有好心的老蕭學長講解，才讓我不會花太久時間摸索。\n安裝 mvn在 Mac 上我使用偷懶的方式，透過 Homebrew 來安裝，教學影片，另外使用手動的方式安裝，因為太複雜了，我就僅提供 教學連結 就好\nbrew install maven\n\n在 Amazon Linux 上的安裝方式，可以參考這篇 (不過我沒裝，我直接把自己電腦編譯出來的檔案透過SFTP上傳而已)\ninsatll ik analyze先 clone github 上的 code 下來，然後根據 Elasticsearch 版本，切換到對應的 ik 版本，然後編譯出檔案後，再解壓縮放到 elasticsearch plugin 目錄下\ngit clone https://github.com/medcl/elasticsearch-analysis-ik.git# 因為 elasticsearch 使用 2.4.1 版，所以 ik 選用 1.10.1 版git checkout tags/1.10.1# 使用maven編譯mvn package\n\nunzip to plugin foldercopy and unzip target/releases/elasticsearch-analysis-ik-1.10.1.zip   to elasticsearch-2.4.1/plugins/ik(解壓縮方式) or /usr/share/elasticsearch/plugins/ik(Amazon Linux上安裝)\nunzip target/releases/elasticsearch-analysis-ik-1.10.1.zip==&gt; /usr/share/elasticsearch/plugins/ik# unzip 指令可能要再查一下，這裡只是示意\n\n以上步驟都完成後，大概算是環境基本設定都搞定了，剩下的路途依然漫長，接著還要學習如何建立 index/type 設定 index 的 mapping，這已經可以花很久時間摸索了，等 Mapping 都搞定，開始寫入資料後，搜尋的方式也需要在另外花時間慢慢學習。\n","title_tokenize":["Elasticsearch","Installation","and","Setting"],"content_tokenize":["Elasticsearch","筆記","環境設","定","前言","垃圾","話","Installation","安","裝","檢","查","Java","版本","使用","整","包","壓縮檔","方式","Amazon","Linux","上","安","裝","方式","安","裝","套件","安","裝","AWS","Cloud","Plugin","安","裝","IK","分","詞","套件","Elasticsearch","筆記","環境設","定","前言","垃圾","話","於","先前","接","case","時候","簡單","碰","一下","solr","這","套","搜尋","引擎","後來","聽鈞","元","哥","提到","正","玩","另一套","搜尋","引擎","Elasticsearch","記","之前","臉書","上","較","常","看到","Elasticsearch","討論","文章","後來","選擇這","套","來","研究","1","開始","出","發點很單純","為開始","寫","blog","希望","blog","上","開始","文章","搜尋","功能","雖然現","這技術相關","文章","blog","裡","面","才","10","來","篇文章","切個兩頁","差不多","根本","不","太","需要","特","別弄個搜尋","功能","不","過","著","好","玩","心情","開始來鑽研這","工具","深深","覺","日","後","工作","上","肯定","會","用到","果不其然","前","陣","子","收到","合作","單","位","發","信","來問說","們資料庫搜尋題","目的","時候","想","找","go","1","詞相關","題目","結果","們回傳給","題目卻","good","結果","QQ","為資料庫","MySQL","們用這種","keyword","方式","來針對題目欄","位","搜尋","當然會","出","現這種悲劇","Orz","同事","討論","解法","大概","使用","夠","正","確斷詞斷字","搜尋","引擎","不","過這","套","搜尋","引擎","工具","實","博大精深","現","大概","只","摸","1","點點邊邊角角吧","趕","快","趁熱來","資訊","整理","記錄","下","來","造福","日","後","1","點","小小","哀怨的","才","研究","兩週","左右","趕","巧遇","上","版本","從","2.4.1","瞬間變","成","5.0","還","先","乖乖","2.4.1","使用","弄熟","好了","Installation","安","裝根據","官方","文件","方式","先在","Macbook","pro","電腦","上","試著","安","裝","使用","還算簡單","缺點","開著","1","個","terminal","頁","面","來運行","elasticsearch","Elasticsearch","仍","需要","Java","環境來運行","Java","版本","最少","需要","1.7","以上","官網","推","薦","使用","Oracle","JDK","version","1.8.0","73","這","版本","來","安","裝","教學請根據","作","業系統環境","google","檢","查","Java","版本","java","versionecho","JAVA","HOME","使用","整","包","壓縮檔","方式","下","載並解壓縮","Elasticsearch","2.4.1","版本","開始執行","curl","L","O","https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.4.1/elasticsearch-2.4.1.tar.gztar","xvf","elasticsearch","2.4.1","tar","gzcd","elasticsearch","2.4.1","bin","elasticsearch","設","定","調整設","定","叢集與節點","名","稱","利用","再啟動","elasticsearch","指令","後","面","添加","參數","elasticsearch","cluster","name","my","cluster","name","node","name","my","node","name","另外一","個","作法","先","設","定","檔","改","好","然後再啟動","elasticsearch","elasticsearch","2.4.1","cd","config","vim","elasticsearch","yml","add","custom","cluster","name","and","node","name","at","file","last","linecluster","name","my","cluster","name","node","name","my","node","name","Amazon","Linux","上","安","裝","方式","會","使用","Amazon","linux","實","個","美","麗","意外","為某天","早上","先","從","AWS","Elasticsearch","服務開始測試","發現無","法","安","裝","中文","分","詞","套件","只","好","放","棄這個","偷","懶","方式","後來","只好","重新","啟動","一台","EC","2","instance","來用","1","開始用","Ubuntu","14.04","版本","慣用","版本","找到","教學文","How","To","Install","and","Configure","Elasticsearch","on","Ubuntu","14.04","最","後","好像","也是","安","裝","中文","分","詞","遇到","狀況","幾番","波折","下","找到","較詳細","安","裝教學","1","安","裝教學","2","已","經","使用","Amazon","Linux","只好","重新","啟動","Amazon","Linux","EC","2","instance","來","安","裝","使用","Install","Java","8","sudo","yum","install","java","1.8.0","安","裝後檢","查","一下","版本","java","version","java","version","quot","1.8.0","65","quot","Java","TM","SE","Runtime","Environment","build","1.8.0","65","b","17","Java","HotSpot","TM","64","Bit","Server","VM","build","25.65","b","01","mixed","mode","安","裝","Elasticsearch","2.4.1","sudo","rpm","i","https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/rpm/elasticsearch/2.4.1/elasticsearch-2.4.1.rpm","使用","yum","安","裝","方式","參","考","這篇","底下","節錄","安","裝","步","驟","出","來","Elasticsearch","透過","新增","套件","倉儲網址","套件","管理","檔案裡","方式","來","使用","yum","指令","安","裝","先","執行","底下","指令","sudo","rpm","import","http://packages.elastic.co/GPG-KEY-elasticsearch","接著編輯","yum","respository","檔案","sudo","vi","etc","yum","repos","d","elasticsearch","repo","And","save","the","following","configuration","to","it","elasticsearch","2","x","name","Elasticsearch","repository","for","2","x","packagesbaseurl","http://packages.elastic.co/elasticsearch/2.x/centosgpgcheck=1gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearchenabled=1","然後再執行","安","裝","指令","sudo","yum","y","install","elasticsearch","啟動","elasticsearchsudo","service","elasticsearch","start","stop","restart","調整設","定","值設","定","檔","位置","etc","elasticsearch","elasticsearch","yml","sudo","vi","etc","elasticsearch","elasticsearch","yml","設","定","讓","外部","連","入","該","台","主機","elasticsearch","加入","network","host","0.0.0.0","設","定","檔內","不","過要","注意","這樣","點風險","有人","知道","這","台","主機","IP","來","使用","主機","防火","牆請","設","定","允許","IP","來","着落","主機","拿去","當","搜尋","引擎","主機","使用","風險","安","裝","套件","安","裝","AWS","Cloud","PluginAWS","EC","2","上","使用","cluster","必","須要","安","裝","套件","插件","安","裝","位置","usr","share","elasticsearch","cd","usr","share","elasticsearch","sudo","bin","plugin","install","cloud","aws","安","裝","IK","分","詞","套件","這個","步","驟","真","較複雜","根據","IK","Github","上","說明","雖然","只","短短","幾行","指令","中","間","個","套件","需要","安","裝","那就是","mvn","Apache","Maven","Java","動化編譯","工具","為","Java","很不","熟","真","頭","一次","聽過這東西","不","過","好在","好心","老","蕭學長講解","才","讓","不","會花","太","久","時間","摸索","安","裝","mvn","Mac","上","使用","偷","懶","方式","透過","Homebrew","來","安","裝","教學","影片","使用","手","動","方式","安","裝","為","太","複雜","僅","提供","教學連結","好","brew","install","maven","Amazon","Linux","上","安","裝","方式","參","考","這篇","不","過","沒裝","直接","電腦編譯","出","來","檔案透過","SFTP","上","傳","insatll","ik","analyze","先","clone","github","上","code","下","來","然後根據","Elasticsearch","版本","切換","對應","ik","版本","然後編譯","出","檔案後","再解壓縮","放到","elasticsearch","plugin","目錄","下","git","clone","https://github.com/medcl/elasticsearch-analysis-ik.git#","為","elasticsearch","使用","2.4.1","版","ik","選用","1.10.1","版","git","checkout","tags","1.10.1","使用","maven","編譯","mvn","package","unzip","to","plugin","foldercopy","and","unzip","target","releases","elasticsearch","analysis","ik","1.10.1","zip","to","elasticsearch","2.4.1","plugins","ik","解壓縮","方式","or","usr","share","elasticsearch","plugins","ik","Amazon","Linux","上","安","裝","unzip","target","releases","elasticsearch","analysis","ik","1.10.1","zip","gt","usr","share","elasticsearch","plugins","ik","unzip","指令","可能","要再","查","一下","這裡","只","示意","以上","步","驟","都","完成","後","大","概算","環境","基本","設","定都","搞定","剩下","路途","依然","漫長","接著還要學習","建立","index","type","設","定","index","mapping","這","已","經","花","很久","時間","摸索","Mapping","都","搞定","開始寫","入","資料後","搜尋","方式","需要","花時間","渐渐","學習"]},{"title":"Build a Serverless Facebook Messenger Chatbot","url":"https://soarlin.github.io/2016/10/07/serverless-facebook-messenger-bot/","content":"\n\n\nBuild a Serverless Facebook Messenger Chatbot\n準備工具與服務\n安裝 Serverless Framework\nAWS 前置作業 - IAM\nFacebook 前置作業\n\n\n建立 Serverless 專案\nServerless 環境設定\nFunctoin 參考\nAWS 上服務檢查\nAPI Gateway 設定確認\nLambda 確認\n\n\nFB Page Webhook Setting\n\n\nRefrence\n\n\n\n\n\nBuild a Serverless Facebook Messenger Chatbot\n準備工具與服務\nServerless Framework (I use v1.0-rc1)\nAWS Account\nFacebook Page\nFacebook Developer\n\n\n安裝 Serverless Frameworkserverless 目前(2016/10/06)的版本是 v1.0 rc1，過去在網路上找到的教學文都是 v.0.5.許多，從 JSON 格式轉換成 YAML 格式，這部份搞了我很久，加上一些變數設定等，花了一兩天在摸索。\nServerless Framework 安裝指令如下：\nnpm install -g serverless\n這裡說明一下 Serverless framework 大致上需要以及會使用到的 AWS 服務項目\n\nIAM : 權限管理，讓本機端寫好的東西可以部屬到 AWS 各項資源與服務上的權限\nCloudFormation : AWS 資源與各項服務配置的模版，目前 v1.0 版改用 YAML 格式\nS3 : 資料儲存空間，存放 coludformation 模板與發布的 function + libraries zip檔的地方\nLambda : 在接收某些觸發條件後執行邏輯運算功能的服務，也就是用來執行聊天機器人的功能\nAPI Gateway : 用來管理後台 Server or Lambda 等的 API 接口服務，這裡是用來觸發 Lambda function 執行運算\nCloudWatch : 可以檢視 Lambda 上 Function 執行時所留下的 log，協助開發中 Debug 使用\n\n\n\nAWS 前置作業 - IAM如果已經有安裝 AWS 提供的 command line tool (aws-cli)，可能會方便一點？沒有也沒關係，因為我也是到 aws console 介面上慢慢做的\n建立 IAM user 並給予權限 (教學)\n在 AWS Console 介面，在進入 IAM 介面\n建立使用者，命名 serverless-admin\n記下 Access Key Id 與 Secret Access Key，或把檔案也下載下來\n添加 AdministratorAccess 權限\n\n\n在本機設定 AWS API Key &amp; Secretexport AWS_ACCESS_KEY_ID=&lt;key&gt;export AWS_SECRET_ACCESS_KEY=&lt;secret&gt;\n或者使用 aws-cli 來設定 aws config\n$ aws configureAWS Access Key ID [None]: &lt;key&gt;AWS Secret Access Key [None]: &lt;secret&gt;Default region name [None]: ap-northeast-1Default output format [None]: ENTER\n\n\nFacebook 前置作業建立 facebook 粉絲專頁為了測試聊天機器人，在臉書建立一個粉絲專業吧！所以這邊就不在針對這部份寫教學了\n\n建立 facevook application\n進入 Facebook Developer 建立一個新的 APP\n替這個 APP 加入 Messenger 這項產品\n\n\n\n建立 Serverless 專案因為使用到 Lambda，所以有 Node.js, Python, Java 等樣板可以選擇，這裡使用 Node.js 來做示範(小弟不才，雖然 nodejs 也不熟，但另外兩種語言更是悲劇)\n建立專案指令：(使用 Node.js 樣板)\n# 採用 nodejs 基本模板, 並將專案建立在 sls-fb-msg-bot 目錄下serverless create --template aws-nodejs --path sls-fb-msg-bot\n\n完成這建立專案指令後，應該會建立好指定的目錄名稱，並且在裡面產生三個檔案，結構如下：\nsls-fb-msg-bot├── event.json├── handler.js└── serverless.yml\n\n\nServerless 環境設定可以參考我的範例 (github)，這裡需要安裝一些必要的套件\nnpm 套件安裝npm init# 經過一連串的 enter，產生 package.json 後，繼續安裝套件npm install --save lodash request serverless-plugin-stage-variables\n\n而 serverless 的環境設定 yml 檔，參考如下：\nservice: sls-fb-msg-botprovider:  name: aws  runtime: nodejs4.3  # You can change your stage and aws region  stage: dev  region: ap-northeast-1functions:  webhook:    handler: handler.webhook    events:      - http:          path: webhook          method: GET      - http:          path: webhook          method: POST          response:            template: &#x27;&#123; &quot;body&quot;: &quot;$input.json(&#x27;&#x27;$&#x27;&#x27;)&quot; &#125;&#x27;custom:  stageVariables:    # Remeber to setting your variables    pageAccessToken: &#x27;FB_Page_Access_Token&#x27;    validationToken: &#x27;Your_Validation_Token&#x27;plugins:  - serverless-plugin-stage-variables\n\n注意1: stage 與 region 請改成自己需要的內容，這邊設定是發佈到日本東京的機房\n注意2: FB_Page_Access_Token 請開啟 fb developer app，在 Messenger 的 Setting 中的 「Token Generation」內選好粉絲專頁來產生\n\n注意3: Your_Validation_Token 是 FB 要與 webhook API 溝通時的驗證碼，設定一個自己喜歡的密碼，這裡會與 FB_Page_Access_Token 都寫入 API Gateway Stages 內的 Stage Variables，之後再透過 Lambda 撈出來\n\n\nFunctoin 參考serverless.yml 的設定都搞定後，剩下的就是 handle.js 這個用來執行邏輯運算的功能程式了，我得先承認我是到處參考東拼西湊出來的程式碼，所以真的就參考就好。\n想了解更詳細 Messenger API，麻煩還是到 Facebook 所提供的文件去研究吧！這裡僅節錄部分程式碼並在稍微精簡一些(有可能無法實行)，正確完成內容還是請到我的 github 上去參考\n&#x27;use strict&#x27;;const request = require(&#x27;request&#x27;);function sendTextMessage(recipientId, messageText) &#123;    return &#123;        recipient: &#123; id: recipientId &#125;,        message: &#123; text: messageText &#125;    &#125;;&#125;function display(object) &#123;    return JSON.stringify(object, null, 2);&#125;module.exports.webhook = (event, context, callback) =&gt; &#123;    console.log(&#x27;Event: &#x27;, display(event));    // FB Page access token    const PAGE_ACCESS_TOKEN = event.stageVariables.pageAccessToken;    // FB webhook validation token    const VALIDATION_TOKEN = event.stageVariables.validationToken;    if (!VALIDATION_TOKEN) &#123;        console.error(&quot;Missing validation token&quot;);        context.fail(new Error(&#x27;Missing validation token&#x27;));    &#125;    function callSendAPI(messageData) &#123;        request(&#123;            uri: &#x27;https://graph.facebook.com/v2.6/me/messages&#x27;,            qs: &#123; access_token: PAGE_ACCESS_TOKEN &#125;,            method: &#x27;POST&#x27;,            json: messageData        &#125;, (error, response, body) =&gt; &#123;            if (!error &amp;&amp; response.statusCode == 200) &#123;                context.succeed(&quot;Successfully&quot;);            &#125; else &#123;                context.fail(new Error(&#x27;Failed Send API&#x27;));            &#125;        &#125;);    &#125;    if (event.method === &quot;GET&quot;) &#123;        let query = event.query;        if (query[&#x27;hub.mode&#x27;] === &#x27;subscribe&#x27; &amp;&amp;            query[&#x27;hub.verify_token&#x27;] === VALIDATION_TOKEN) &#123;            console.log(&quot;Validating webhook&quot;);            context.succeed(parseInt(query[&#x27;hub.challenge&#x27;]));        &#125; else &#123;            context.fail(new Error(&#x27;[403] Failed validation.&#x27;));        &#125;    &#125;    else if (event.method === &quot;POST&quot;) &#123;        var data = event.body;        if (data.object == &#x27;page&#x27;) &#123;            var messagingList = data.entry[0].messaging;            var messageData;            messagingList.forEach(function(messagingEvent) &#123;                var senderId = messagingEvent.sender.id;                if (messagingEvent.message) &#123;                    // Received user message                    messageData = sendTextMessage(senderId, &quot;Hello, I am messenger bot&quot;);                &#125; else &#123;                    messageData = sendTextMessage(senderId, &quot;Webhook received other messagingEvent&quot;);                &#125;                callSendAPI(messageData);            &#125;);        &#125;    &#125; else &#123;        context.fail(new Error(&#x27;Unrecognized method &quot;&#x27; + event.method + &#x27;&quot;&#x27;))    &#125;&#125;;\n\n到了這邊，大致上 serverless 的設置都完成了，總算可以發佈到 AWS 上啦！\nserverless deploy\n\n\nAWS 上服務檢查\nAPI Gateway 設定確認首先檢查一下設定檔內寫的 State Variables 有沒有正確的被設定好\n\n接著檢查 Get Method 中的 request template，這邊原本沒有設定，但應該會有圖中的預設樣板 code\n\n然後再檢查 Post Method 中的 response template 是否有設定檔內寫的內容，如下圖\n\n\nLambda 確認應該可以順利產生一組 function 命名格式為 &lt;service_name&gt;-&lt;stage&gt;-&lt;function_name&gt;，這裡的例子是 sls-fb-msg-bot-dev-webhook\n\nFB 連結 Webhook 測試(GET)可以參考下面範例:\n\nhub.verify_token 與 validationToken 記得設成一樣\nhub.challenge 是由 FB 驗證時傳過來的一組數值，自行測試時隨便打都可以\npageAccessToken 記得填入 FB 產生的粉絲專頁存取權杖\n\n&#123;  &quot;body&quot;: &#123;&#125;,  &quot;method&quot;: &quot;GET&quot;,  &quot;stage&quot;: &quot;dev&quot;,  &quot;query&quot;: &#123;        &quot;hub.mode&quot;: &quot;subscribe&quot;,        &quot;hub.challenge&quot;: &quot;29606336&quot;,        &quot;hub.verify_token&quot;: &quot;Your_Validation_Token&quot;  &#125;,  &quot;stageVariables&quot;: &#123;    &quot;validationToken&quot;: &quot;Your_Validation_Token&quot;,    &quot;pageAccessToken&quot;: &quot;FB_Page_Access_Token&quot;  &#125;&#125;\n\nMessenger Bot 接收訊息測試(POST)一樣參考下方的範例：\n&#123;    &quot;body&quot;: &#123;        &quot;object&quot;: &quot;page&quot;,        &quot;entry&quot;: [            &#123;                &quot;messaging&quot;: [                    &#123;                        &quot;sender&quot;: &#123;                            &quot;id&quot;: &quot;&lt;Your_Facebook_Id&gt;&quot;                        &#125;,                        &quot;message&quot;: &#123;                            &quot;text&quot;: &quot;test&quot;                        &#125;                    &#125;                ]            &#125;        ]    &#125;,    &quot;method&quot;: &quot;POST&quot;,    &quot;stage&quot;: &quot;dev&quot;,    &quot;stageVariables&quot;: &#123;        &quot;validationToken&quot;: &quot;FB_Page_Access_Token&quot;,        &quot;pageAccessToken&quot;: &quot;Your_Validation_Token&quot;    &#125;&#125;\n\n\nYour_Facebook_Id : 這個比較麻煩，可能得自己去 FB Developer 提供的 Graph API Explorer 上面查詢\n先點下 Get Token, 然後直接確定\n接著預設應該會取出用 user name 與 id，就可以得到自己的 id 了，參考下圖\n\n\n\n\n\nFB Page Webhook Setting總算快大功告成了，還記得之前一直有提到的 Your_Validation_Token 吧！在設定 webhook 時就會派上用場啦！\n\n進入 facebook developer app 頁面\n切換到 Messenger 產品分頁\n點選 Setup Webhooks\n接著填入 API Gateway endpoints 的 GET 網址與要跟程式驗證的內容\nendpoints 網址在發佈時，會顯示在 terminal 上\n或是使用serverless info來檢視資訊\n\n\n驗證通過後，記得在下方訂閱要執行 bot 的粉絲專頁\n\n\n如果順利驗證通過，就可以開始跟機器人對話啦！\n\n\nRefrenceServerless FramerowkServerless Github實作 Serverless 的 facebook messenger botBuilding a Serverless Facebook messenger chatbot\n","title_tokenize":["Build","a","Serverless","Facebook","Messenger","Chatbot"],"content_tokenize":["Build","a","Serverless","Facebook","Messenger","Chatbot","準備","工具","與服務","安","裝","Serverless","Framework","AWS","前置","作","業","IAM","Facebook","前置","作","業","建立","Serverless","專案","Serverless","環境設","定","Functoin","參","考","AWS","上","服務檢","查","API","Gateway","設","定","確認","Lambda","確認","FB","Page","Webhook","Setting","Refrence","Build","a","Serverless","Facebook","Messenger","Chatbot","準備","工具","與服務","Serverless","Framework","I","use","v","1.0","rc","1","AWS","Account","Facebook","Page","Facebook","Developer","安","裝","Serverless","Frameworkserverless","目前","2016","10","06","版本","v","1.0","rc","1","過","去","網","路上","找到","教學文","都是","v","0.5","許多","從","JSON","格式","轉換","成","YAML","格式","這","部","份","弄","很久","加上","變數設","定","花","1","兩天","摸索","Serverless","Framework","安","裝","指令","以下","npm","install","g","serverless","這裡說明","一下","Serverless","framework","大致上","需要","會","使用","AWS","服務項目","IAM","權限","管理","讓","機端寫","好的","東西","部","屬","AWS","各項資源與服務","上","權限","CloudFormation","AWS","資源與各項服務","配置","模版","目前","v","1.0","版","改用","YAML","格式","S","3","資料儲","存","空","間","寄存","coludformation","模板","與發布","function","libraries","zip","檔","地方","Lambda","接收","觸發條","件","後執行邏輯運算","功能","服務","也就是","用來執行","聊天","機器人","功能","API","Gateway","用來","管理","後","台","Server","or","Lambda","API","接口","服務","這裡","用來觸發","Lambda","function","執行運算","CloudWatch","檢視","Lambda","上","Function","執行時","留下","log","協助開發","中","Debug","使用","AWS","前置","作","業","IAM","已","經","安","裝","AWS","提供","command","line","tool","aws","cli","可能","會","方便","1","點","沒","沒關係","為","也是","aws","console","介面","上","渐渐","做","建立","IAM","user","並給予權限","教學","AWS","Console","介面","進","入","IAM","介面","建立","使用者","命名","serverless","admin","記","下","Access","Key","Id","與","Secret","Access","Key","檔案","下","載","下","來","添加","AdministratorAccess","權限","機設","定","AWS","API","Key","amp","Secretexport","AWS","ACCESS","KEY","ID","lt","key","gt","export","AWS","SECRET","ACCESS","KEY","lt","secret","gt","使用","aws","cli","來設","定","aws","config","aws","configureAWS","Access","Key","ID","None","lt","key","gt","AWS","Secret","Access","Key","None","lt","secret","gt","Default","region","name","None","ap","northeast","1","Default","output","format","None","ENTER","Facebook","前置","作","業","建立","facebook","粉絲專頁為","測試","聊天","機器人","臉書","建立","1","個粉絲專業吧","這邊","不在","針對這","部份","寫教學","建立","facevook","application","進","入","Facebook","Developer","建立","1","個","新的","APP","替這個","APP","加入","Messenger","這項產品","建立","Serverless","專案","為","使用","Lambda","Node.js","Python","Java","樣板","選擇","這裡","使用","Node.js","來","做","示範","小弟","不才","雖然","nodejs","不熟","兩種語言","更是","悲劇","建立","專案","指令","使用","Node.js","樣板","採用","nodejs","基本","模板","並將專案","建立","sls","fb","msg","bot","目錄","下","serverless","create","template","aws","nodejs","path","sls","fb","msg","bot","完成","這","建立","專案","指令","後","應該會","建立","好","指定","目錄","名","稱","並","裡","面","產生","3","個檔案","結構","以下","sls","fb","msg","bot","event","json","handler","js","serverless","yml","Serverless","環境設","定","參","考","範例","github","這裡","需要","安","裝","必要的","套件","npm","套件","安","裝","npm","init","經過","1","連串","enter","產生","package","json","後","繼續","安","裝","套件","npm","install","save","lodash","request","serverless","plugin","stage","variables","serverless","環境設","定","yml","檔","參","考","以下","service","sls","fb","msg","botprovider","name","aws","runtime","nodejs","4.3","You","can","change","your","stage","and","aws","region","stage","dev","region","ap","northeast","1","functions","webhook","handler","handler","webhook","events","http","path","webhook","method","GET","http","path","webhook","method","POST","response","template","x","27","123","quot","body","quot","quot","input","json","x","27","x","27","x","27","x","27","quot","125","x","27","custom","stageVariables","Remeber","to","setting","your","variables","pageAccessToken","x","27","FB","Page","Access","Token","x","27","validationToken","x","27","Your","Validation","Token","x","27","plugins","serverless","plugin","stage","variables","注意","1","stage","與","region","請","改成","需要","內容","這邊設","定","發佈","日","東京","機房","注意","2","FB","Page","Access","Token","請開啟","fb","developer","app","Messenger","Setting","中的","Token","Generation","內選","好","粉絲專頁來產生","注意","3","Your","Validation","Token","FB","要與","webhook","API","溝通時","驗證碼","設","定","1","個","喜歡","密碼","這裡會與","FB","Page","Access","Token","都","寫","入","API","Gateway","Stages","內","Stage","Variables","後再透過","Lambda","撈","出","來","Functoin","參","考","serverless","yml","設","定都","搞定","後","剩下","handle","js","這個用來執行邏輯運算","功能","程式","先","承認","我是","處參","考","東","拼","西湊","出","來","程式","碼","真","參","考","好","想","了解","更","詳細","Messenger","API","麻煩還","Facebook","提供","文件","去","研究","這裡僅節錄","部份","程式","碼並","稍微","精簡","有可能","無","法","實行","正","確","完成","內容還","請","github","上去","參","考","x","27","use","strict","x","27","const","request","require","x","27","request","x","27","function","sendTextMessage","recipientId","messageText","123","return","123","recipient","123","id","recipientId","125","message","123","text","messageText","125","125","125","function","display","object","123","return","JSON","stringify","object","null","2","125","module","exports","webhook","event","context","callback","gt","123","console","log","x","27","Event","x","27","display","event","FB","Page","access","token","const","PAGE","ACCESS","TOKEN","event","stageVariables","pageAccessToken","FB","webhook","validation","token","const","VALIDATION","TOKEN","event","stageVariables","validationToken","if","VALIDATION","TOKEN","123","console","error","quot","Missing","validation","token","quot","context","fail","new","Error","x","27","Missing","validation","token","x","27","125","function","callSendAPI","messageData","123","request","123","uri","x","27","https://graph.facebook.com/v2.6/me/messages&#x27;,","qs","123","access","token","PAGE","ACCESS","TOKEN","125","method","x","27","POST","x","27","json","messageData","125","error","response","body","gt","123","if","error","amp","amp","response","statusCode","200","123","context","succeed","quot","Successfully","quot","125","else","123","context","fail","new","Error","x","27","Failed","Send","API","x","27","125","125","125","if","event","method","quot","GET","quot","123","let","query","event","query","if","query","x","27","hub","mode","x","27","x","27","subscribe","x","27","amp","amp","query","x","27","hub","verify","token","x","27","VALIDATION","TOKEN","123","console","log","quot","Validating","webhook","quot","context","succeed","parseInt","query","x","27","hub","challenge","x","27","125","else","123","context","fail","new","Error","x","27","403","Failed","validation","x","27","125","125","else","if","event","method","quot","POST","quot","123","var","data","event","body","if","data","object","x","27","page","x","27","123","var","messagingList","data","entry","0","messaging","var","messageData","messagingList","forEach","function","messagingEvent","123","var","senderId","messagingEvent","sender","id","if","messagingEvent","message","123","Received","user","message","messageData","sendTextMessage","senderId","quot","Hello","I","am","messenger","bot","quot","125","else","123","messageData","sendTextMessage","senderId","quot","Webhook","received","other","messagingEvent","quot","125","callSendAPI","messageData","125","125","125","else","123","context","fail","new","Error","x","27","Unrecognized","method","quot","x","27","event","method","x","27","quot","x","27","125","125","到了","這邊","大致上","serverless","設置","都","完成","總算","發佈","AWS","上","serverless","deploy","AWS","上","服務檢","查","API","Gateway","設","定","確認","檢","查","一下","設","定","檔內寫","State","Variables","沒","正","確","設","定","好","接著檢","查","Get","Method","中的","request","template","這邊","本来","沒","設","定","應該會","圖","中的","預設樣板","code","然後再檢","查","Post","Method","中的","response","template","是否是","設","定","檔內寫","內容","以下","圖","Lambda","確認應該","順利產生","1","組","function","命名","格式","為","lt","service","name","gt","lt","stage","gt","lt","function","name","gt","這裡","例子","sls","fb","msg","bot","dev","webhook","FB","連結","Webhook","測試","GET","參","考","下面","範例","hub","verify","token","與","validationToken","記","設","成","1","樣","hub","challenge","FB","驗證時傳過來","1","組數值","自行","測試時隨便","都","pageAccessToken","記","填","入","FB","產生","粉絲專頁","存取","權杖","123","quot","body","quot","123","125","quot","method","quot","quot","GET","quot","quot","stage","quot","quot","dev","quot","quot","query","quot","123","quot","hub","mode","quot","quot","subscribe","quot","quot","hub","challenge","quot","quot","29606336","quot","quot","hub","verify","token","quot","quot","Your","Validation","Token","quot","125","quot","stageVariables","quot","123","quot","validationToken","quot","quot","Your","Validation","Token","quot","quot","pageAccessToken","quot","quot","FB","Page","Access","Token","quot","125","125","Messenger","Bot","接收","訊息測試","POST","1","樣參","考","下方","範例","123","quot","body","quot","123","quot","object","quot","quot","page","quot","quot","entry","quot","123","quot","messaging","quot","123","quot","sender","quot","123","quot","id","quot","quot","lt","Your","Facebook","Id","gt","quot","125","quot","message","quot","123","quot","text","quot","quot","test","quot","125","125","125","125","quot","method","quot","quot","POST","quot","quot","stage","quot","quot","dev","quot","quot","stageVariables","quot","123","quot","validationToken","quot","quot","FB","Page","Access","Token","quot","quot","pageAccessToken","quot","quot","Your","Validation","Token","quot","125","125","Your","Facebook","Id","這個","較麻煩","可能","去","FB","Developer","提供","Graph","API","Explorer","上面","查詢","先","點","下","Get","Token","然後","直接","確","定","接著預設應該會","取出","user","name","與","id","得到","id","參","考","下","圖","FB","Page","Webhook","Setting","總算","快","大功告成","還記","之前","提到","Your","Validation","Token","設","定","webhook","時","會","派","上","用場","進","入","facebook","developer","app","頁","面","切換","Messenger","產品","分","頁","點選","Setup","Webhooks","接著","填","入","API","Gateway","endpoints","GET","網址與要","程式","驗證","內容","endpoints","網址","發佈時","會顯示","terminal","上","使用","serverless","info","來檢視資訊","驗證通過後","記","下方","訂閱要執行","bot","粉絲專頁","順利驗證通過","開始","機器人對話","RefrenceServerless","FramerowkServerless","Github","實","作","Serverless","facebook","messenger","botBuilding","a","Serverless","Facebook","messenger","chatbot"]},{"title":"SPRINT衝刺計畫 - Part3","url":"https://soarlin.github.io/2016/09/16/SPRINT%E8%A1%9D%E5%88%BA%E8%A8%88%E7%95%AB-Part3/","content":"\n\n\nSPRINT衝刺計畫\n星期四 Thursday\n原型心態\n原型\n\n\n星期五 Friday\n小數據\n五幕式訪談\n集體做訪談筆記\n\n\n檢查表\n做好準備\n關鍵概念\n衝刺計畫用品\n\n\n\n\n\n\n\n\n\nSPRINT衝刺計畫\n星期四 Thursday你們在週三創造出一個分鏡腳本。週四你們將基於「模擬」原則，根據這個腳本做出一個逼真的方案原型。在接下來幾章，我們將說明可以幫助你們只用七個小時便做出原型的心態、策略和工具。\n\n花在某件東西上的時間越久，對它的依戀性往往卻強，而認真看待負面測試結果的可能性就越低。如果只花一天時間，你將能接受意見回饋。如果已經投入三個月，很可能已經決心撐到底。\n\n\n原型心態\n無論是什麼方案，都可以做原型\n原型是可以捨棄的\n做到剛好能滿足測試需求即可\n原型看起來必須夠真實\n\n理想的原型品質是剛剛好，品質太差，顧客會不相信這個產品，如果追求太高，又太花時間。\n範例: FITSTAR問題: 我們可以如何說明一種新的健身應用程式？形式: 模擬App Store與iPad應用程式工具: Keynote、真人演出、iPhone影片、iPad\n範例: SLACK問題: 要向非科技業的用戶說明Slack這個軟體，最好的方法是什麼？形式: 兩個相互競爭的網站，包括一些有互動功能的軟體工具: Keynote, InVision, 真實的Slack軟體, 真人演出\n範例: FOUNDATION MEDICINE問題: 腫瘤科醫師做治療決定時，需要哪些必要的資料?形式: 紙本醫學報告，只有第一頁的實質內容工具: Keynote, 逼真的檢驗數據, 印表機\n範例: SAVIOKE問題: 飯店房客對有個性的機器人會有什麼反應？形式: 真實的機器人加iPad觸控螢幕工具: Keynote, 音效樣本庫, iPad, 機器人, 遙控工具, 飯店客戶, 真人演出\n範例: ONE MEDICAL GROUP問題: 主要替專業人士看診的診所，可以轉型為適合有孩子的家庭嗎？形式: 一家診所，只做一晚的測試工具: 診所, 診所職員, 香蕉, 蠟筆\n\n\n原型每一個原型都是獨特的，因此沒有精確地逐步程序可以分享給大家。不過有四項作業總是可以幫助我們走對路：\n選對工具\n如果原型在螢幕上(網站、應用程式、軟體等等)，請使用Keynote、PowerPoint，或做網站的工具Squarespace\n如果原型是紙本(報告、宣傳冊、傳單等等)，請使用Keynote、PowerPoint，或文字處理軟體如Microsoft Word\n如果原型是某種服務(顧客支援、客戶服務、醫療等等)，請寫腳本，然後安排衝刺計畫團隊成員當演員。\n如果是實體空間(商店、辦公樓大廳等等)，請找一個既有空間加以改裝\n如果是某種物件(實體產品、機器等等)，請找某個既有物件加以改裝、用3D印表機印出原型，或是用Keynote、PowerPoint，配合該物件照片或示意圖，做出行銷材料的原型\n\n分工解決促進者應該幫忙衝刺團隊分配以下工作：\n\n製作者(Maker)，至少2名\n整合者(Stitcher)，1名\n寫作者(Writer)，1名\n文字對原型的重要性，需具備相關背景知識\n\n\n資料搜集者(Asset Collector)，至少1名\n四處搜集製作原型所需的素材\n\n\n採訪者(Interviewer)，1名\n先寫好採訪腳本，最好不要參與原型製作，避免投入感情\n\n\n\n整合整合者確保原型中的日期、時間、名字和其他內容並無矛盾。\n試運轉最好能在下午三點左右做原型的試運轉，以便有足夠的時間來糾正錯誤和修補漏洞。讓所有人暫停工作聚在一起，請整合者排演整個原型，邊演邊解釋。試運轉主要觀眾，是週五要採訪顧客的採訪者。採訪者必須先熟悉原型和衝刺計畫問題，以便從訪問中得到最多有用的資料。\n\n星期五 Friday衝刺計畫始於一項大挑戰和一個傑出的團隊─沒有很多其他東西。當衝刺計畫週來到週五時，你們已經研擬出有希望的方案，選出當中的最佳方案，並且做出了逼真的原型。光是這樣已經是收穫豐富的一週。但你們將在週五再進一步，訪問顧客，並觀察他們對原型的反應，從中吸取教訓。週五的測試確立整個衝刺計畫過程的價值：測試完成後，你們將知道自己還有多遠的路要走，以及下一步該做什麼。\n\n\n小數據找5個顧客來訪問，5是神奇數字，同一個研究裡，訪問五個人之後，做更多的訪問產生的貢獻很紹，投資報酬率像石頭一樣快速下降。\n\n\n五幕式訪談訪問分兩個房間進行，衝刺計畫團隊成員觀看直播，採訪人員在另一間小房間\n\n友善地歡迎受訪顧客，開個好頭\n藉由連串的開放式、一般背景問題瞭解客戶\n介紹原型\n一些具體操作，藉此瞭解顧客對原型的反應\n快速的總結討論，藉此紀錄顧客整體想法和印象\n\n\n友善的歡迎\n\n讓採訪者感到輕鬆自在，並事先告知且得到顧客同意後進行(務必簽署公司律師堅持使用的法律文件許可和發明轉讓條款)。必須要讓受訪的顧客感到自在，誠實的回答問題。\n\n背景問題\n\n藉由開始發問一些跟顧客背景有關的問題，來漸漸引導到一些相關的問題上\n\n介紹原型\n\n採訪者應該提醒顧客，你們在測試的是原型，而不是顧客：\n「你提供的意見，無所謂對錯。因為這原型不是我設計的，你批評他不會讓我受傷，你稱讚他也不會讓我開心。事實上，坦率、真誠的回饋對我們最有幫助」\n時時提醒顧客隨時說出心中所想\n\n提示和操作\n\n適當的操作指示，顧客最好能自行摸索出如何使用原型。顧客做這些事情時，採訪者應適時提問，幫助他說出自己的想法：\n那是什麼？有什麼用處？你對那東西有什麼想法？你估計那可以產生什麼作用？你看著這裡時，想到什麼？你在找什麼？你接下來將做什麼？為什麼？\n\n\n快速的總結討論\n\n一些總結問題：\n比起你在使用的東西，你覺得這產品如何？這產品有哪些方面是你喜歡的？哪些方面是你不喜歡的？你會怎麼向朋友描述這產品？如果你可以許三個願改善這產品，你的願望是什麼？\n\n如果測試兩款或更多原型，再多問一些比較類的問題，訪問結束後，感謝顧客且送出禮券，然後送他離開。過成功應該多鼓勵顧客講話，同時保持中立。不需要做筆記，讓衝刺計畫室裡的成員來做筆記。\n\n集體做訪談筆記在衝刺計畫室裡的一塊大白板上畫一個表格，要有五欄(每個受訪者一欄)，以及數列(每個原型一列 or 原型每一部分一列又或者一條衝刺計畫問題一列)\n\n發便利貼與白板筆給每一個人，正面的用綠色，負面的用紅色，中性用黑色。或是在便利貼左上用加號表示正面筆記，減號表示負面筆記。記住，如果顧客使用原型上遇到問題，不是他的問題，是你們的問題。最後把整理好的便利貼，貼到表格相關位置。\n尋找型態成員靠近白板與便利貼，從中找尋自己看到的型態，把它記下。個別尋找五分鐘後，每個人分享自己看到的型態。\n回到未來回顧週一所訂下的衝刺計畫問題，並看看目前的原型是否能解決這個問題。\n每次都是贏家衝刺計畫最好的一點，就是不可能毫無收穫。不論邀請顧客來測試的結果是好是壞，都對接下來要做的東西有幫助。\n\n檢查表\n做好準備\n選個大難題: 適用三種情況：事情攸關重大利益、時間緊迫，或者陷入了僵局\n找一位(或兩位)決策者: 如果決策者無法全程參與，請他派一名代表\n組織衝刺計畫團隊: 人數應該控制在七人以內，並確保團隊成員具備多元技能\n安排專家客串: 安排重要的專家在週一下午受訪\n選一位促進者: 負責管理時間、對話和整個衝刺計畫的過程，必須有信心引導會議，包括眾人的討論\n在日程表上空出五個整天\n預定一間房間，準備兩大塊白板\n\n\n關鍵概念\n避免干擾: 不要使用筆電、手機、iPad等平板電腦\n計時器: 緊湊的時間安排，可以增強人們對衝刺計畫流程的信心、專注力和急迫感\n晚一點吃午餐: 上午11:30休息一下吃點零食，下午一點在吃午餐，避開午餐尖峰時段\n\n\n衝刺計畫用品\n大量的白板\n3吋乘5吋的黃色便利貼\n黑色白板筆\n綠色和紅色白板筆\n黑色氈尖筆: 中等筆頭\n列印用紙\n膠帶\n小圓點貼紙\n大圓點貼紙\nTime Timer計時器\n健康的零食\n\n","title_tokenize":["SPRINT","衝刺計畫","Part","3"],"content_tokenize":["SPRINT","衝刺計畫","星期四","Thursday","原型","心態","原型","星期五","Friday","小","數據","5","幕式訪談","集體","做","訪談筆記","檢","查表","做","好","準備","關鍵","概念","衝刺計畫","用品","SPRINT","衝刺計畫","星期四","Thursday","們","週","3","創造","出","1","個","分","鏡腳","週","4","們將基於","模擬","原","則","根據這個腳","做出","1","個","逼真的","方案","原型","接下","來幾章","們將說明","幫助","們","只用","7","個","小","時便","做出","原型","心態","策略","工具","花","件","東西","上","時間越","久","對","依戀性","常常","卻強","認","真","看待","負","面","測試結果","可能性","就越","低","只","花","一天","時間","將","接受","意見回饋","已","經","投入","3","個","月","很可能","已","經決心撐","到底","原型","心態","無論","什麼","方案","都","做","原型","原型","捨棄","做到","剛","好","滿足測試","需求","即可","原型","看","來","必","須夠","真","實","理想","原型","品質","剛剛","好","品質","太","差","顧客會","不相信","這個產品","寻求","太","高","太","花時間","範例","FITSTAR","問題","們","說明","1","種","新的","健身","應用","程式","情势","模擬","App","Store","與","iPad","應用","程式","工具","Keynote","真人","演出","iPhone","影片","iPad","範例","SLACK","問題","非","科技","業","用戶說明","Slack","這個軟體","最好","方法","什麼","情势","兩個","相互","競爭","網站","包括","互動","功能","軟體","工具","Keynote","InVision","真","實","Slack","軟體","真人","演出","範例","FOUNDATION","MEDICINE","問題","腫瘤科醫師","做","治療決","定","時","需要","必要的","資料","情势","紙","醫學報","告","只","第一","頁","實質內容","工具","Keynote","逼真的","檢驗數據","印表機","範例","SAVIOKE","問題","飯店","房客","對","個性","機器人會","什麼","反","應","情势","真","實","機器人","加","iPad","觸控螢幕","工具","Keynote","音效","樣","庫","iPad","機器人","遙控","工具","飯店客戶","真人","演出","範例","ONE","MEDICAL","GROUP","問題","主要","替專業","人士","看","診","診","轉型為適","合","孩子","家庭","嗎","情势","一家","診","只","做","1","晚","測試","工具","診","診","職員","香蕉","蠟筆","原型","個","原型","都是","獨","特","沒","精確","逐渐","程序","分享","給","大家","不","過","4","項","作","業總","幫助","們","走","對路","選對","工具","原型","螢幕","上","網站","應用","程式","軟體","請","使用","Keynote","PowerPoint","做","網站","工具","Squarespace","原型","紙","報","告","宣傳冊","傳單","請","使用","Keynote","PowerPoint","文字","處理軟體","Microsoft","Word","原型","某種服務","顧客","支援","客戶服務","醫療","請寫腳","然後","安排","衝刺計畫團隊","成","員當演員","實體","空","間","商店","辦公樓","大","廳","請","找","1","個","既有","空","間","加以","改","裝","某種","物件","實體產品","機器","請","找","某個","既有","物件","加以","改","裝","3","D","印表機印","出","原型","Keynote","PowerPoint","配合","該","物件","照片","示意","圖","做","出行","銷","材料","原型","分工","解決","促","進者應該幫忙衝刺團隊","分配","以下","工作","製","作者","Maker","最少","2名","整合","Stitcher","1名","寫","作者","Writer","1名","文字","對","原型","重要性","需","具","備相關","背景","知識","資料","搜集","Asset","Collector","最少","1名","4","處","搜集","製","作","原型","需","素材","採訪者","Interviewer","1名","先","寫","好","採訪腳","最好","不要","參與","原型","製","作","避免","投入","感情","整合","整合","者確","保","原型","中的","日期","時間","名字","內容並無","矛盾","試運轉","最好","下午","3","點","左右","做","原型","試運轉","足夠","時間來糾","正","錯誤","修補","漏洞","讓","所有人","暫","停工","作","聚在一起","請","整合","排演","整個","原型","邊演邊解釋","試運轉","主要","觀眾","週","5","要採訪顧客","採訪者","採訪者","必","須","先","熟习","原型","衝刺計畫問題","從訪問","中","得到","最多","有用","資料","星期五","Friday","衝刺計畫始於","1","項","大","挑戰","1","個傑","出","團隊","沒","很多","東西","當衝刺計畫週來","週","5","時","們","已","經研擬","出","有希望","方案","選","出","當","中的","最好","方案","並","做出","逼真的","原型","光是","這樣","已","經","收穫豐","富的","1","週","們將","週","5","再進","一步","訪問顧客","並觀察","們對","原型","反","應","從","中","吸取","教訓","週","5","測試確立整個衝刺計畫過程","價值","測試","完成","後","們將","知道","還","多遠","路要","走","下一步","該","做","什麼","小","數據","找","5","個顧客來訪問","5","奇特","數字","同一","個","研究","裡","訪問","5","個人","後","做","更多","訪問產生","貢獻很紹","投資報酬率","石頭","1","樣","快速","着落","5","幕式訪談訪問","分","兩個房間進行","衝刺計畫團隊","成","員觀","看","直播","採訪人員","另外一","間","小房","間","友善地","歡迎受訪顧客","開個","好","頭","藉由","連串","開","放","式","背景","問題瞭解客戶","介紹","原型","具","體","操作","藉此","瞭解顧客對","原型","反","應","快速的","總結討論","藉此","紀錄顧客整體","想法","印象","友善的","歡迎","讓採訪者","感到","輕鬆","自在","並","事前","告知","得到","顧客","同意","後進行","務","必","簽署","公司","律師堅","持","使用","法律","文件","許","發明轉讓條款","必","須要讓受訪","顧客","感到","自在","誠實","回答","問題","背景","問題","藉由","開始發問","顧客","背景","關","問題","來漸漸引導","相關","問題","上","介紹","原型","採訪者應該","提示","顧客","們","測試","原型","而不是","顧客","提供","意見","無","謂對錯","為這","原型","不是","設計","批評","不","會讓","受傷","稱讚","也不","會讓","開心","事實","上","坦率","真","誠","回饋對","們","最","幫助","時時","提示","顧客隨時說","出","心中","所想","提示","操作","適當","操作","指导","顧客","最好","自行","摸索","出","使用","原型","顧客","做","這些","事情","時","採訪者應適時提問","幫助","說","出自","想法","那是","什麼","什麼用處","對","東西","什麼","想法","估","計","產生什麼","作用","看","著這裡時","想到","什麼","找","什麼","接下","來將","做","什麼","為什麼","快速的","總結討論","總結問題","比起","使用","東西","覺","這產品","這產品","哪些方面","喜歡","哪些方面","不","喜歡","會怎麼","朋友","描写","這產品","許","3","個願","改进","這產品","願望","什麼","測試兩款","更多","原型","再多問","較類","問題","訪問結束後","感謝顧客","送出","禮券","然後送","離開","過","成功","應該多鼓勵顧客講話","時","保持","中立","不需要","做","筆記","讓衝刺計畫","室","裡","成","員來","做","筆記","集體","做","訪談筆記","衝刺計畫","室","裡","1","塊","大","白板","上","畫","1","個","表格","要有","5","欄","個受訪者","1","欄","數","列","個","原型","一列","or","原型","每一部","分","一列","1","條衝刺計畫問題","一列","發","便利","貼與","白板","筆給","個人","正","面","用綠色","負","面","用紅色","中性","黑色","便利","貼","左上","加","號","表示","正面","筆記","減號","表示","負","面","筆記","記住","顧客","使用","原型","上","遇到","問題","不是","問題","們","問題","最","後","整理","好的","便利","貼","貼","表格","相關","位置","尋","找","型態","成","員","靠近","白板","與","便利","貼","從","中","找","尋","看到","型態","記","下","個別尋","找","五分","鐘後","個人","分享","看到","型態","回到","未","來回顧週","1","訂","下","衝刺計畫問題","並","看看","目前","原型","是否是","解決這個問題","每次","都是","贏家衝刺計畫","最好","1","點","不可能","毫無收穫","不","論邀請顧客來測試","結果","好","壞","都","對","接下","來要","做","東西","幫助","檢","查表","做","好","準備","選個","大","難題","適用","3","種情況","事情","攸關","重大","利益","時間緊迫","堕入","僵局","找","一位","兩","位","決策者","決策者無","法","全程","參與","請","派","一位","代表","組織衝刺計畫團隊","人數應該","控制","七人","內","並確","保","團隊","成","員","具","備","多元","技能","安排","專家","客串","安排","重要的","專家","週","1","下午","受訪","選","一位","促","進者","負責","管理","時間","對話","整個衝刺計畫","過程","必","須","信心","引導會議","包括","眾人","討論","日程表","上空","出","5","個","整天","預","定","1","間房間","準備兩","大","塊","白板","關鍵","概念","避免","干","擾","不要","使用","筆電","手","機","iPad","平板","電腦","計時器","緊湊","時間","安排","增強人們對衝刺計畫","流程","信心","專注力","急迫","感","晚","1","點","吃","午饭","上午","11","30","休息","一下","吃","點","零食","下午","1","點","吃","午饭","避","開","午饭","尖峰","時","段","衝刺計畫","用品","大量","白板","3","吋","5","吋","黃色","便利","貼","黑色","白板","筆","綠色","紅色","白板","筆","黑色","氈尖筆","中等","筆頭","列印","用紙","膠帶","小","圓點貼紙","大","圓點貼紙","Time","Timer","計時器","健康的","零食"]},{"title":"SPRINT衝刺計畫 - Part2","url":"https://soarlin.github.io/2016/09/15/SPRINT%E8%A1%9D%E5%88%BA%E8%A8%88%E7%95%AB-Part2/","content":"\n\n\nSPRINT衝刺計畫\n星期二 Tuesday\n重新組合，加以改良\n畫出方案草圖\n\n\n促進者筆記\n星期三 Wednesday\n黏貼決策\n比拼\n分鏡腳本\n\n\n促進者筆記\n\n\n\n\n\n\nSPRINT衝刺計畫\n星期二 Tuesday衝刺計畫團隊在週一界定了難題，並選擇了目標。週二你們將提出解決方案。這一天你們將先尋找靈感，也就是檢視一些既有的概念，想想可以如何重新組合並加以改良。然後在下午，每一個人將遵循一個強調批判思考而非藝術技巧的四步驟程序，畫出方案早圖。衝刺計畫週稍後，最好的一些草圖將成為方案圓形和測試計畫的基礎。週一晚上你們應該好好休息，早上起來吃個均衡的早餐，因為週二這一天非常重要。\n\n\n重新組合，加以改良\n找尋「材料」，可能來自其他領域、競爭對手、自己的公司\n\n例子：藍瓶團隊參考一家巧克力廠商，每一條Tcho巧可力棒包裝紙上，都印有一個簡單的「風味輪」(flavor wheel)，上面只有印六個字 : Bright, Fruity, Floral, Earthy, Nutty和Chocolatey因此藍瓶團隊藉由這個概念，創造一組用來描述藍瓶咖啡豆的簡單風味詞彙：Rich, Chocolatey, comforting....\n\n閃電型示範\n\n列出清單: 要求團隊每一個人想想哪些產品或服務可以提供有用的靈感，列出一份清單。\n3分鐘的示範: 團隊成員逐一介紹自己推薦的產品，向所有人說明該產品的優點。\n記錄重點: 持續記錄有用的概念、示意圖，寫下簡單的標題與資料來源\n\n\n記錄下來的概念，應該足以提供每一個人的靈感，在檢視原本的示意圖，看看是否需要將問題區分來分工，或是全體集中在一個重要的目標上，可以要求每個人寫下自己有興趣的部份，加以分工。\n\n畫出方案草圖不用擔心不會畫圖，只要能畫出示意圖就好，基本上就是一些框框與文字的組合。重要的是方案的素質，而不是示意圖畫的多漂亮。\n\n畫圖的力量: 把抽想概念轉化為具體方案最快、最容易的方法；藉由畫出方案草圖來具體化自己的點子，才能讓團隊成員公平的評斷它。\n一起獨自努力: 獨自努力讓人有時間去做研究、尋找靈感，以及思考問題。獨自努力產生的責任壓力，促使我們發揮潛能，交出好成果。\n\n四步驟畫圖法\n接下來的四個步驟，都不會有人去看別人的筆記、草圖，所以請放心大膽的自由發揮。\n\n[筆記] 搜集關鍵資料 (20分鐘): 把長期目標抄下，瀏覽示意圖、HMW筆記以及閃電型示範的筆記，給成員20分鐘整理筆記、上網找資料\n[構想] 畫出粗略方案 (20分鐘): 將手上的一疊筆記，整理出粗略構想，在紙上塗鴉、畫草圖，以及寫上一些標題，20分鐘後再花三分鐘檢視草稿，圈出自己喜歡的部份，在下一階段加以發揮\n[瘋狂八] 快速擬出八個方案變體 (8分鐘): 瘋狂指的是這項作業的節奏，拿出一張A4大小的紙張，對折三次產生八格。每隔花個一分鐘，再八分鐘內畫出八個簡略的草圖。根據同一個方案，畫出多個方案變體，重點是強迫自己考慮替代方案\n[畫出方案草圖] 擬定一個具體方案 (30分鐘+): 方案草圖會讓成員檢視，所以必須是深思熟慮後的具體結果，且必須是容易理解的。方案草圖應像分鏡腳本，畫出顧客和你的產品或服務互動時，會看到什麼。謹記幾條重要規則：\n 做到不言自明: 週三早上會將草圖貼出給所有人看，所以必須讓人看得懂\n 匿名發表\n 別怕畫的醜: 一些框框、文字、火材人就很夠了\n 文字很重要: 選擇正確的用詞非常重要，不要用無意義的文字來填版，也不要畫波浪線來代表「這裡有文字」，應該好好創造出逼真的效果\n 取個吸引人的名字: 請給草圖一個名字，方便之後的評論。也可以藉由草圖的名字，吸引人注意方案背後的概念\n\n\n\n\n每個人負責一份方案草圖，如果靈感充沛，想多畫幾份也是可以的，但每多一份草圖，週三的檢視就會負擔重一些。\n\n促進者筆記\n找人參加週五的測試: 週一或週二就應該開始為週五的測試找人\n透過Craigslist找人: 貼出可以吸引大眾的通用型廣告，利用問卷來篩選有意參加的人，給予小額報酬\n撰寫篩選問卷: 先寫下希望的測試顧客特徵，轉化為適當的問題，針對希望排除的特徵做一樣的事情。問題不能洩漏答案\n利用你的人脈網路找人\n\n\n星期三 Wednesday到了週三早上，衝刺計畫團隊將有一疊解決方案。這很好，但也是一個問題。你們無法替全部方案做原型，然後一一測試。你們需要一個可靠的計畫。週三早上，你們將評論每一個方案，然後決定哪些方案最有機會達成你們的長期目標。在下午，你們將把方案草圖中的最佳場景編排成一個分鏡腳本，也就是方案原型的逐步說明。\n\n\n黏貼決策\n美術館: 用膠帶把方案草圖貼到牆上\n熱點圖: 靜靜瀏覽分析所有方案，用圓點標出有意思的部分\n不說話\n好好看一份方案草圖\n在喜歡的旁邊貼上圓點貼紙\n方案中覺得極有意思的點子，可貼上二或三張圓點貼紙\n如果對方案有疑慮，寫在便利貼上，貼在草圖下方\n轉到下一份草圖，重複上述步驟\n\n\n\n\n\n快速評論: 快速討論每個方案中有意思的部份，用便利貼記下大概念\n衝刺計畫成員聚集在一份草圖前\n設定三分鐘倒數\n促進者敘述方案\n促進者喊出突出的構想，也就是比較多圓點貼紙的部分\n促進者漏掉突出構想，由其他成員喊出來\n抄寫員把突出構想寫在便利貼，貼在草圖上方。替每一個構想取一個名字\n檢視疑慮和問題\n方案作者請保持沈默，直到獲邀發言(自行公開身份，說說我們遺漏的部分)\n由方案作者說明成員們沒注意到的部份，並回答問題\n轉到下一份草圖，重複上述流程\n\n\n\n\n\n稻草民調: 每個人選一個方案，用圓點貼紙表達自己的意見\n發給每人一票\n提醒所有人長期目標和衝刺計畫問題\n提醒所有人，最好選擇有巨大潛力的大膽構想\n設定時間，倒數十分鐘\n每個人私下寫下自己的選擇，可以是整個方案，也可以是方案中的某一個構想\n時間一到或所有人都準備好的時候，把代表選票的大圓點貼到方案草圖上\n每個人扼要解釋自己的選擇(1 min)\n\n\n\n\n\n超級票: 決策者用更多圓點貼紙投出「超級票」\n目的是替團隊做出最終決定。每一個決策者可獲得三張特別票，而無論他們把票投給哪些方案或構想，衝刺計畫團隊都將依據此做原型和測試\n可以選擇受歡迎的構想，也可以隨自己喜歡來投票\n投票前，一樣提醒他長期目標與問題\n\n\n\n\n得到超級票的方案為贏家，其他留待日後參考。\n\n比拼有時候有兩個以上的方案都獲得了超級票而勝出，如果資源充足，可以都將方案做出原型來星期五的使用者測試驗證，但如果可以融合兩個方案，也有機會做出一個更棒的原型來進入測試。\n如果決定要比拼，請替原型取個感覺真實的品牌名稱，營造原型的真實性，也避免顧客不把它當一回事。\n\n記下後表決\n發給每個成員一張紙和一支筆\n每個人花3分鐘，靜靜地寫下自己的構想\n每個人花2分鐘做編輯，選出自己最滿意的2-3個構想\n把各人的最佳構想寫在白板上。如果團隊有七個人，總共大概會有15~20個構想\n每個人花2分鐘，從白板上靜靜地選出自己最喜歡的構想\n各人逐一喊出自己最喜歡的構想。白板上的構想每得一票，旁邊就畫一個圓點\n決策者做出最終決定。他一樣可以尊重多數人決定，也可以堅持自己獨特的想法\n\n\n\n\n\n分鏡腳本\n\n畫網格，大概需要15個框格，從顧客接觸到產品的開場開始設計 e.g. APP 從 App Store開始，虛擬的媒體報導也是個好的開場\n選擇一個開場\n網路搜尋\n雜誌\n商店貨架\n應用程式商店\n媒體報導\n臉書或推特\n\n\n填入腳本內容，團隊成員一起完成每一步，盡可能用方案上的便利貼，忽略一些無法運作的「死胡同」(實際測試時，顧客可能也會忽略這些)。若要填補缺口，盡量從「日後參考方案」中挑選可用材料，避免當場創造新構想，請遵循以下指引：\n利用既有材料\n不要集體撰文: 不該試圖集體把文字改到理想狀態，容易浪費時間\n細節夠用就好: 不要過度仔細，不必想好所有的細節，標上「週四負責人決定」\n讓決策者決定: 因為大多精力在上午耗盡，這裡可多仰賴決策者決定\n有疑問時，大膽一點: 衝刺計畫最好用來測試潛在報酬很高、相當冒險的方案。\n把故事控制在15分鐘以內\n\n\n\n\n\n促進者筆記\n避免耗盡力氣週三是必須接連做出很多決定的一天，因此容易耗盡決策電力。需保持警惕，留意看來無法快速得出結論的討論。出現這種情況，應該請出決策者來做決定。\n小細節: 等到週四在處理\n新點子: 先記下來，等到衝刺計畫結束再去探索\n\n\n\n","title_tokenize":["SPRINT","衝刺計畫","Part","2"],"content_tokenize":["SPRINT","衝刺計畫","星期二","Tuesday","重新","組","合","加以","改进","畫","出","方案","草圖","促","進者筆記","星期三","Wednesday","黏貼決策","拼","分","鏡腳","促","進者筆記","SPRINT","衝刺計畫","星期二","Tuesday","衝刺計畫團隊","週","1","界定","難題","並選擇","目標","週","2","們將","提出","解決","方案","這","一天","們將","先","尋","找","靈感","也就是","檢視","既有","概念","想想","重新","組","合","並","加以","改进","然後","下午","個人將","1","個強調","批评","思考","非","藝術","技能","四步","驟","程序","畫","出","方案","早圖","衝刺計畫週稍後","最好","草圖將","成","為","方案","圓形","測試計畫","基礎","週","1","晚上","們應該","好好","休息","早上","來","吃","個","均衡","早餐","為週","2","這","一天","非常重要","重新","組","合","加以","改进","找","尋","材料","可能","來","領域","競爭對","手","公司","例子","藍瓶團隊參","考","一家","巧克力","廠商","條","Tcho","巧","力棒","包","裝紙","上","都","印有","1","個簡單","風味輪","flavor","wheel","上面","只","印","6","個字","Bright","Fruity","Floral","Earthy","Nutty","Chocolatey","藍瓶團隊","藉由","這個","概念","創造","1","組用來","描写","藍瓶","咖啡豆","簡單風味詞彙","Rich","Chocolatey","comforting","閃電型示範","列","出清","單","要求","團隊","個人","想想","產品","服務","提供","有用","靈感","列出","一份","清","單","3分","鐘","示範","團隊","成","員","逐一","介紹","推","薦","產品","所有人","說明該產品","優點","記錄","重","點","持","續記錄","有用","概念","示意","圖","寫","下","簡單","標題與資料來源","記錄","下","來","概念","應該","足以","提供","個人","靈感","檢視","本来","示意","圖","看看","是否是","需要","將問題區","分","來","分工","全","體","集中","1","個","重要的","目標","上","要求","個人寫","下","興趣","部份","加以","分工","畫","出","方案","草圖","不用","擔心","不","會畫圖","畫","出","示意","圖","好","基本上","框框","與","文字","組","合","重要的","方案","素質","而不是","示意","圖畫","漂亮","畫圖","气力","抽想","概念","轉化為","具","體","方案","最快","最","容易的","方法","藉由","畫","出","方案","草圖來","具","體化","點","子","才能","讓團隊","成","員","公平的","評斷","一起","獨","努力","獨","努力","讓人","時間","去做","研究","尋","找","靈感","思考","問題","獨","努力","產生","責任壓力","促使","們發揮潛","交出","好","成果","四步","驟畫圖","法","接下","來","4","個","步","驟","都","不","會","有人","去","看","別人","筆記","草圖","請","放心","大","膽","自由","發揮","筆記","搜集","關鍵資料","20分","鐘","長","期","目標","抄","下","瀏覽","示意","圖","HMW","筆記","閃電型示範","筆記","給","成","員","20分","鐘","整理","筆記","上","網","找","資料","構想","畫","出","粗略","方案","20分","鐘","將","手上","1","疊筆記","整理","出","粗略","構想","紙","上","塗鴉","畫草圖","寫","上","標題","20分","鐘後再花","三分","鐘檢視","草稿","圈","出自","喜歡","部份","1","階","段","加以","發揮","瘋狂","8","快速","擬","出","8","個","方案","變體","8分","鐘","瘋狂指","這項","作","業","節奏","拿出","1","張","A","4","大小","紙張","對折","三次","產生","8","格","每隔","花個","一分","鐘","再","八分","鐘內畫","出","8","個簡","略","草圖","根據","同一","個","方案","畫","出","多個","方案","變體","重","點","強迫","考","慮","替换","方案","畫","出","方案","草圖","擬","定","1","個","具","體","方案","30分","鐘","方案","草圖會讓","成","員檢視","必","須","寻思","熟慮後","具","體結果","必","須","容易","理解","方案","草圖應","分","鏡腳","畫","出","顧客","產品","服務互動時","會","看到","什麼","謹記幾條","重要","規則","做到","不言自明","週","3","早上","會將草圖貼","出","給","所有人","看","必","須讓人","看","懂","匿名","發表","別","怕","畫","醜","框框","文字","火材人","很夠","文字","很重要","選擇","正","確","用詞","非常重要","不要","用無意義","文字","來","填","版","不要","畫","波浪","線來","代表","這裡","文字","應該","好好","創造","出","逼真的","效果","取","個","吸引","人","名字","請給草圖","1","個","名字","方便之","後","評論","藉由","草圖","名字","吸引","人","注意","方案","背","後","概念","個人負責","一份","方案","草圖","靈感","充分","想多畫幾","份","也是","一份","草圖","週","3","檢視","會負擔","重","促","進者筆記","找","人參","加","週","5","測試","週","1","週","2","應該開始為週","5","測試","找","人","透過","Craigslist","找","人","貼","出","吸引","大","眾","通用型","廣","告","利用","問","卷","來篩選","故意","參","加","人","給予","小","額報酬","撰寫篩選問","卷","先","寫","下","希望","測試顧客","特徵","轉化為適當","問題","針對","希望","排除","特徵","做","1","樣","事情","問題","不能","洩漏","答案","利用","人脈網路","找","人","星期三","Wednesday","到了","週","3","早上","衝刺計畫團隊將","1","疊解決","方案","這","很好","也是","1","個問題","們無","法","全部","方案","做","原型","然後","逐一","測試","們","需要","1","個","可靠的","計畫","週","3","早上","們將評論","個","方案","然後決","定","方案","最","機會達","成","們","長","期","目標","下午","們將","方案","草圖","中的","最好","場景編","排成","1","個","分","鏡腳","也就是","方案","原型","逐渐","說明","黏貼決策","美","術館","用膠帶","方案","草圖貼","牆","上","熱點圖","靜靜瀏覽","分析","所有","方案","用圓點標","出","有意思","部份","不","說話","好好","看","一份","方案","草圖","喜歡","旁","邊貼","上","圓點貼紙","方案","中","覺","極","有意思","點","子","貼","上","2","3","張圓點貼紙","對","方案","疑慮","寫","便利","貼","上","貼","草圖","下方","轉","下","一份","草圖","重","複","上述","步","驟","快速","評論","快速","討論","個","方案","中","有意思","部份","便利","貼記","下","大","概念","衝刺計畫","成","員","聚集","一份","草圖","前","設","定","三分","鐘","倒","數","促","進者敘述","方案","促","進者","喊","出","突出的","構想","也就是","較多圓點貼紙","部份","促","進者","漏掉","突出","構想","成","員","喊","出","來","抄","寫員","突出","構想寫","便利","貼","貼","草圖","上方","個構想","取","1","個","名字","檢視疑慮","問題","方案","作者","請","保持","沈默","直到","獲邀發言","自行","公開","身份","說說","們遺漏","部","分","方案","作者","說明","成","員們沒","注意到","部份","並","回答","問題","轉","下","一份","草圖","重","複","上述","流程","稻草","民調","個人選","1","個","方案","用圓點貼紙表達","意見","發給","每人","1","票","提示","所有人","長","期","目標","衝刺計畫問題","提示","所有人","最好","選擇","巨大","潛力","大","膽構想","設","定","時間","倒","數","十分","鐘","個人","私下","寫","下","選擇","整個","方案","方案","中的","某一","個構想","時間","1","所有人","都","準備","好的","時候","代表","選票","大","圓點貼","方案","草圖","上","個人","扼要","解釋","選擇","1","min","超","級票","決策者用","更多","圓點貼紙","投出","超","級票","目的","替團隊","做出","最","終決","定","個決策者","獲","3","張","特","別票","無論","們","票投給","方案","構想","衝刺計畫團隊","都","將依據","做","原型","測試","選擇受歡迎","構想","隨","喜歡來","投票","投票","前","1","樣","提示","長","期","目標與問題","得到","超","級票","方案","為贏家","留待","日","後參","考","比拼","時候","兩個","以上","方案","都","獲","得了","超","級票","勝","出","資源","充足","都","將","方案","做出","原型","來","星期五","使用者","測試驗證","融会","兩個","方案","機會","做出","1","個","更","棒","原型","來進","入","測試","決","定","比拼","請替","原型","取","個感覺","真","實","品牌","名","稱","營造","原型","真","實性","避免","顧客","不","當","一回事","記","下","後表決","發給","個","成","員","1","張紙","一支","筆","個人花","3分","鐘","靜靜","寫","下","構想","個人花","2分","鐘","做","編輯","選","出自","最","滿意","2","3","個構想","各人","最好","構想寫","白板","上","團隊","7","個人","總","共","大概","會","15","20","個構想","個人花","2分","鐘","從","白板","上","靜靜","選","出自","最","喜歡","構想","各人","逐一","喊","出自","最","喜歡","構想","白板","上","構想","1","票","旁","邊","畫","1","個圓點","決策者","做出","最","終決","定","1","樣","尊重","多數人決","定","堅","持","獨","特","想法","分","鏡腳","畫網格","大概","需要","15","個框格","從顧客接觸","產品","開場開始設計","e","g","APP","從","App","Store","開始","虛擬","媒體報導","也是","個","好的","開場","選擇","1","個開場","網路搜尋","雜誌","商店","貨架","應用","程式","商店","媒體報導","臉書","推","特","填","入","腳","內容","團隊","成","員","一起","完成","每一步","盡","能用","方案","上","便利","貼","忽视","無","法","運","作","死胡同","實際測試時","顧客","可能","會","忽视","這些","若要","填","補","缺口","盡","量","從","日","後參","考","方案","中","挑選","可用","材料","避免","當場創造","新","構想","請","以下","指引","利用","既有","材料","不要","集體","撰文","不","該試圖集體","文字","改","理想","狀態","容易","浪費時間","細節夠用","好","不要","過度仔細","没必要","想","好","所有","細節","標","上","週","4","負責人決","定","讓決策者決","定","為","大多","精力","上午","耗","盡","這裡","多仰賴決策者決","定","疑問時","大","膽","1","點","衝刺計畫","最好","用來測試潛","報酬很","高","相當冒險","方案","故事","控制","15分","鐘","內","促","進者筆記","避免","耗","盡力氣週","3","必","須接連","做出","很多","決","定","一天","容易","耗","盡決策電力","需","保持","警惕","留意","看","來無","法","快速","得出","結論","討論","出","現這種情況","應該請","出","決策者來","做","決","定","小","細節","等到","週","4","處理","新","點","子","先","記","下","來","等到","衝刺計畫結束再","去","探索"]},{"title":"SPRINT衝刺計畫 - Part1","url":"https://soarlin.github.io/2016/09/15/SPRINT%E8%A1%9D%E5%88%BA%E8%A8%88%E7%95%AB-Part1/","content":"\n\n\nSPRINT衝刺計畫\n做好準備 Set the Stage\n先搞定外觀\n團隊人選\n時間與空間\n\n\n星期一 Monday\n列出衝刺計畫的問題\n示意圖\n請教專家\n決定目標\n\n\n促進者筆記\n\n\n\n\n\n\nSPRINT衝刺計畫期望能夠讓團隊成員完整的空出五天的時間，密集的討論、規劃，來做出產品的原型 (Prototype)，及早透過使用者測試來決定方案是否可行。\n\n星期一 : 界定問題 –&gt; 畫出示意圖 –&gt; 選出重點做為努力目標\n星期二 : 擬出多個相互競爭的潛在方案\n星期三 : 將做一些艱難的決定，並把自己的構想轉化成一個可測試的假說\n星期四 : 將做出一個實際的原型 (Prototype)\n星期五 : 找真實的人，來替原型實地測試\n\n\n做好準備 Set the Stage\n衝刺計畫能幫上忙的三種狀況：\n\n攸關重大利益: 解決方案會投入大量時間與金錢時，需確保方向正確，在全速前進\n時間緊迫: 面對一個急迫的期限，為了迅速找到解決問題的方法\n陷入僵局: 有些專案不知如何入手，或失去動力時，它可提供一種解決問題的新方法，產生繼續前進的動力\n\n\n先搞定外觀顧客先看到的就是產品或服務的外觀，確定合適的外觀後，才能讓用戶較為專心來理解新方案\n\n\n團隊人選組建一個七個人以內的團隊\n\n決策者: 對問題有深入了解，抱持強烈意見和有力標準，幫助團隊找到正確解決方案\n財務專家: 解釋錢的流向\n行銷專家: 設計傳播公司/產品訊息\n顧客專家: 經常面對客戶\n技術/物流專家: 了解產品製作/提供什麼\n設計專家: 產品設計者\n麻煩製造者: 持有反對意見 or 有關解決問題的瘋狂想法，能促使團隊提升表現\n\n專家客串: 可以分享所知相關資訊給衝刺團隊促進者:  管控時間、對話、整個衝刺計畫的過程\n\n時間與空間\n上午10點 ~ 下午5點，每天六個小時\n中場休息一下 11:30, 15:30\n中午13:00，休息一小時，午餐不要吃太飽\n不要使用電子裝置\n休息時間除外\n請走出去使用，不要干擾他人\n\n\n準備夠大的白板\n計時器\n\n\n星期一 Monday週一的結構化討論將為衝刺計畫週開創道路。週一早上，你們將以終為始，擬定一個長期目標。接著你們要畫出目標難題的示意圖。下午你們則邀請公司的專家來分享他們掌握的資訊。最後你們要選擇一個目標，也就是一週之內可以解決、具有挑戰性的部分問題。\n\n設定長期目標目標應該反映團隊的原則和抱負，確定目標後，將它寫在白板頂部，確保所有人往同一方向前進。\n\n列出衝刺計畫的問題以下幾個問題，可以刺激衝刺計畫團隊思考架設和問題：\n\n我們希望在這次衝刺計畫中回答什麼問題？\n達成我們的長期目標需要哪些條件？\n如果我們坐時光機飛到未來，發現我們的專案失敗了，失敗的原因可能會是什麼？\n\n以藍瓶咖啡為例\nQ: 接觸新客戶需要什麼條件？A: 他們必須信任我們的專業知識。Q: 我們可以如何把這個假設轉化為一個問題？A: 顧客會信任我們的專業知識嗎？\n\n\n\n示意圖每張圖都以顧客為中心，左邊列出關鍵角色。每張圖都是一個故事，有開頭、中間部分與結局。\n\n列出重要角色(在左邊)\n寫下結局(在右邊)\n中間是文字和箭頭\n簡單為上: 中間步驟應該介於5~15個左右\n尋求協助: 繪製過程中，應不時詢問成員「這個圖看起來對嗎」\n\n示意圖原圖\n示意圖可能會持續修改調整，不用太意外\n週一剩下的時間，訪問團對中的專家，搜集問題空間的更多資訊。來加入更多問題、更新示意圖，甚至調整長期目標的措辭。\n\n請教專家\n策略，先訪問決策者，「這個專案需要什麼條件才能成功？」、「我們有什麼獨特的優勢或機會？」、「最大的風險是什麼？」\n顧客的意見，銷售、顧客支援、研究或其他部門\n事物的運作方式，設計師、工程師、行銷人員等\n之前的努力，檢視一些已經有的方案或半成品，來充實目前構想\n\n訪問流程，每位專家約半小時\n\n介紹衝刺計畫，如果非團隊成員，請向他說明這次衝刺計畫所為何事\n重溫白板上的重點，花兩分鐘向專家介紹長期目標，衝刺計畫問題和示意圖\n打開話題，請專家告訴大家他所知道的，有關目標難題的一切\n問問題，請專家在他額外專長領域提供更多資訊，請他重複認為你們已經知道的東西。他是否能找到示意圖上的缺漏，有在看到什麼機會？「為什麼？」和「請詳述」要求專家提供更多資訊\n更新白板上的內容，增列衝刺計畫問題。修改示意圖甚至是長期目標。\n\n在訪問的過程中，團隊成員寫下「HMW(How Might We)」的筆記，「我們可以如何…?」，準備好便利貼。\n\n便利貼左上角寫著「我們可以如何」(HMW)\n等待\n聽到有意思的話時，靜靜地把它轉化為一條問題\n在便利貼寫下這問題\n撕下便利貼，放在一邊，之後再整理\n\n組織HMW筆記\n替筆記分類，不用要求完美，先將幾個類別分出來\n投票選出重要的HMW\n每個人給兩張大圓點\n決策者給四張，因為決策者意見比較重要\n要求每個人重溫目標和衝刺計畫問題\n要求每個人選出最有用的HMW問題\n可以投給自己的筆記，也可兩票都投給同一個筆記\n\n\n表決結束後，將票數高的筆記貼到示意圖合適的位置\n\n\n決定目標衝刺計畫的決策者必須要在示意圖上，選定一個目標顧客和一個目標事件。讓衝刺計畫接下來的活動焦點：研擬解決方案、製作和測試原型，全都是基於這個決定。\n\n要求決策者決定目標\n民意調查(如果決策者需要協助時): 由每一位團員選出自認為最重要的來投票，幫助決策者選定目標\n\n選定目標好，回頭看看衝刺計畫的問題，至少會有一個問題與這目標有關，之後將找這目標顧客來測試解決方案。\n\n促進者筆記\n尋求許可\n持續記錄\n明知故問\n照顧隊員\n經常休息\n晚一點吃午餐\n午餐別吃太飽\n\n\n果斷決定，保持進度\n\n","title_tokenize":["SPRINT","衝刺計畫","Part","1"],"content_tokenize":["SPRINT","衝刺計畫","做","好","準備","Set","the","Stage","先","搞定","外觀","團隊人選","時間與","空","間","星期一","Monday","列出","衝刺計畫","問題","示意","圖","請教專家","決","定","目標","促","進者筆記","SPRINT","衝刺計畫","期望","夠讓團隊","成","員","完整的","空出","五天","時間","密集的","討論","規劃","來","做出","產品","原型","Prototype","尽早","透過","使用者","測試來決","定","方案","是否是","可行","星期一","界定","問題","–","gt","畫","出","示意","圖","–","gt","選","出","重","點","做","為","努力","目標","星期二","擬","出","多個","相互","競爭","潛","方案","星期三","將","做","艱難","決","定","並","構想轉","化成","1","個","測試","假說","星期四","將","做出","1","個實際","原型","Prototype","星期五","找","真","實","人","來替","原型","實","測試","做","好","準備","Set","the","Stage","衝刺計畫","幫","上","忙","3","種狀況","攸關","重大","利益","解決","方案","會","投入","大量","時間與金錢時","需確","保","方向","正","確","全速","前","進","時間緊迫","面","對","1","個","急迫的","期限","為","迅速","找到","解決問題","方法","陷入僵局","專案","不知","入手","失去","動力時","提供","1","種解決問題","新方法","產生繼續","前","進","動力","先","搞定","外觀顧客","先","看到","產品","服務","外觀","確","定","合","適","外觀後","才能","讓用戶較為專心來","理解","新","方案","團隊人選組建","1","個","7","個人","內","團隊","決策者","對問題","深入","了解","抱持","強烈意見","有力","標準","幫助團隊","找到","正","確解決","方案","財務專家","解釋錢","流向","行銷專家","設計傳","播","公司","產品訊息","顧客專家","經","常","面","對客戶","技術","物流","專家","了解","產品製","作","提供","什麼","設計專家","產品設計者","麻煩製造者","持有","反","對意見","or","關解決問題","瘋","狂想","法","促使","團隊","提升","表現","專家","客串","分享","所知","相關資訊給衝刺團隊","促","進者","控時間","對話","整個衝刺計畫","過程","時間與","空","間","上午","10","點","下午","5","點","每天","6","個","小","時","中","場","休息","一下","11","30","15","30","中午","13","00","休息","1","小","時","午饭","不要","吃","太","飽","不要","使用","電","子","裝置","休息","時間","除外","請","走出去","使用","不要","干","擾","準備夠","大的","白板","計時器","星期一","Monday","週","1","結構化討論將為衝刺計畫週開創","道路","週","一早","上","們將","終為始","擬","定","1","個長","期","目標","接著","們要畫","出","目標難題","示意","圖","下午","們則邀請","公司","專家來","分享","們","掌握","資訊","最","後","們要選擇","1","個目標","也就是","1","週","內","解決","具有","挑戰性","部份","問題","設","定","長","期","目標目標應該","反应","團隊","原","則","抱負","確","定","目標後","將","寫","白板","頂","部","確","保","所有人","一方","向前","進","列出","衝刺計畫","問題","以下","幾個問題","刺激","衝刺計畫團隊","思考","架設","問題","們","希望","這","次","衝刺計畫","中","回答","什麼問題","達","成","們","長","期","目標","需要","條","件","們","坐","時","光","機飛","未","來","發現","們","專案失敗","失敗","缘由","可能","會","什麼","藍瓶","咖啡","為例","Q","接觸","新","客戶","需要","什麼條","件","A","們","必","須","信任","們","專業知識","Q","們","這個假設轉化為","1","個問題","A","顧客會","信任","們","專業知識嗎","示意","圖","張圖","都","顧客為","中心","左","邊","列出","關鍵","角色","張圖","都是","1","個","故事","開頭","中","間","部","分","與結局","列出","重要","角色","左","邊","寫","下","結局","右","邊","中","間","文字","箭頭","簡單為","上","中","間","步","驟應該介於","5","15","個","左右","尋","求","協助","繪製過程","中","應","不","時詢問","成","員","這個圖","看","來對嗎","示意","圖","原","圖","示意","圖","可能","會","持","續","修改","調整","不用","太","意外","週","1","剩下","時間","訪問團對","中的","專家","搜集","問題","空","間","更多","資訊","來","加入","更多","問題","更新","示意","圖","調整長","期","目標","措辭","請教專家","策略","先","訪問決策者","這個專案","需要","什麼條","件","才能","成功","們","什麼獨","特","優勢","機會","最大","風險","什麼","顧客","意見","銷售","顧客","支援","研究","部","門","事物","運","作","方式","設計師","工程","師","行銷人員","之前","努力","檢視","已","經","方案","半成品","來充實","目前","構想","訪問","流程","每位","專家約半","小","時","介紹衝刺計畫","非","團隊","成","員","請","說明這","次","衝刺計畫","為","何事","重","溫","白板","上","重","點","花兩","分","鐘","專家介紹長","期","目標","衝刺計畫問題","示意","圖","開話題","請專家","告","訴","大家","知道","關目標難題","問問題","請專家","額外專長領域","提供","更多","資訊","請","重","複認為","們","已","經","知道","東西","他是","否","找到","示意","圖","上","罅漏","看到","什麼機會","為什麼","請詳述","要求","專家","提供","更多","資訊","更","新","白板","上","內容","增","列","衝刺計畫問題","修改","示意","圖","長","期","目標","訪問","過程","中","團隊","成","員寫","下","HMW","How","Might","We","筆記","們","準備","好","便利","貼","便利","貼","左上角","寫著","們","HMW","聽","有意思","話時","靜靜","轉化為","1","條問題","便利","貼寫","下","這問題","撕下","便利","貼","放","1","邊","後再","整理","組織","HMW","筆記","替筆記","分","類","不用","要求","完善","先","將幾個類別","分出","來","投票","選","出","重要的","HMW","個人給兩張","大","圓點","決策者給","4","張","為決策者意見","較","重要","要求","個人","重","溫目標","衝刺計畫問題","要求","個人選","出","最","有用","HMW","問題","投給","筆記","兩票","都","投給","同一","個筆記","表決結束後","將票數","高的","筆記貼","示意","圖","合","適","位置","決","定","目標衝刺計畫","決策者","必","須要","示意","圖","上","選","定","1","個目標顧客","1","個目標","事件","讓衝刺計畫","接下","來","活動焦點","研擬解決","方案","製","作","測試","原型","全都","基於這個決","定","要求","決策者決","定","目標","民意","調","查","決策者","需要","協助時","每一位","團員選","出自","認為","最重要","來","投票","幫助決策者選","定","目標","選","定","目標","好","回頭","看看","衝刺計畫","問題","最少","會","1","個問題與這目標","關","後將","找","這目標顧客來測試解決","方案","促","進者筆記","尋","求","許","持","續記錄","明知","問","顧隊員","經","常","休息","晚","1","點","吃","午饭","午饭","別","吃","太","飽","果斷決","定","保持","進度"]},{"title":"Transcoding AWS S3 media files using AWS Lambda","url":"https://soarlin.github.io/2016/09/11/Transcoding-AWS-S3-media-files-using-AWS-Lambda/","content":"\n\n\n需要工具\n參考文獻\n操作步驟\nStep 1. Create Lambda function\nStep 2. Use example code\nStep 3. Setting event trigger\nStep 4. Naming and setting role authority\nStep 5. Check setting\n\n\nLambda 使用方法\n\n\n\n最近因為工作上的需求，需要把影片檔案轉換成串流的格式，還好有想到去年似乎有參加一場 AWS 開發者大會聽到類似這樣的技術，這樣就不用自己很辛苦的架設一台 Streaming Server 了，但是缺點就是當 AWS 的服務用的越爽，就會被 AWS 給綁架，以後沒 AWS 可以用怎麼辦！！！\n\n需要工具整個作法其實不算很複雜，但是必須先理解滿多服務如何使用，這裡大致上會使用到的 AWS 服務項目有：S3, Elastic Transcoder, Lambda。\n\nS3 : 儲存空間\nElastic Transcoder : 轉檔服務，可將 S3 上的影音檔轉成各種格式\nLambda : 類似可自行撰寫的 API，來完成一些制式的工作項目\n\n首先，需自行花點時間了解 Elastic Transcoder 的操作與使用，這部份可自行上網找尋相關資訊，或參考這篇。\n如果 Elastic Transcoder 都已經了解怎麼操作，就算是已經理解這像轉檔服務的使用方式，接著就是透過 Lambda 的方式將這些工作自動化，所以接下來的重頭戲就是如何撰寫 Lambda 的 function 了，沒記錯的話，目前提供三種語法來撰寫，有 Python、Node.js、Java 三種，就請大家找個自己最熟悉或擅長的程式語言吧！\n底下我會以 Node.js 的語法來當範例，因為 Python 跟 Java 都很不熟，node.js 至少算是 javascript 的好親戚，平時多少有再寫。\n\n\n參考文獻先附上個人參考文獻，其實能力好的，看完這兩篇，大概也不用我多廢話了\n\nUsing AWS Lambda for Web Video Transcoding\nAutomating Transcoding using AWS service (Elastic Transcoder , Lambda, S3 notifications)\n\n\n操作步驟底下先來看圖說故事，先到 AWS Lambda 內去建立一個 function，內容是由 S3 bucket 內特定資料夾(video/)內，建立(新增/上傳)了一個 mp4 檔案時，所觸發的條件。\n\nStep 1. Create Lambda function\n\nStep 2. Use example code有範例程式就選來用吧！不然就得自己從頭寫，挺麻煩的\n\nStep 3. Setting event trigger確定好觸發 Lambda 的條件設定\n\nStep 4. Naming and setting role authority命名以及設定執行 Lambda 的角色權限 \n在此提供該角色權限的 Policy\n&#123;    &quot;Version&quot;: &quot;2012-10-17&quot;,    &quot;Statement&quot;: [        &#123;            &quot;Effect&quot;: &quot;Allow&quot;,            &quot;Action&quot;: [                &quot;logs:CreateLogGroup&quot;,                &quot;logs:CreateLogStream&quot;,                &quot;logs:PutLogEvents&quot;            ],            &quot;Resource&quot;: &quot;arn:aws:logs:*:*:*&quot;        &#125;,        &#123;            &quot;Effect&quot;: &quot;Allow&quot;,            &quot;Action&quot;: [                &quot;s3:GetObject&quot;,                &quot;s3:PutObject&quot;            ],            &quot;Resource&quot;: [                &quot;arn:aws:s3:::*&quot;            ]        &#125;,        &#123;            &quot;Sid&quot;: &quot;Stmt1441234334958&quot;,            &quot;Action&quot;: [                &quot;elastictranscoder:CreateJob&quot;            ],            &quot;Effect&quot;: &quot;Allow&quot;,            &quot;Resource&quot;: &quot;*&quot;        &#125;    ]&#125;\n\n\nStep 5. Check setting檢查一下所有的設定，沒問題就繼續了！\n\nLambda 使用方法畫面截圖後簡單說明\n測試檔的用法\n\n左上角的 Action -&gt; Configure test event\n然後選澤 S3 Put 的範例來修改，進行測試\n請到 S3 上找個檔案來比對修改測試檔範例，改好後測試的結果應該如上一張圖。\n\n \n再熟悉 lambda 的使用方式後，就可以開始撰寫轉檔的部份了，其實就是再 S3 上傳 mp4 檔後，建立一個 Elastic Transcoder 的工作來進行轉檔\nconsole.log(&#x27;Loading function&#x27;);var AWS = require(&#x27;aws-sdk&#x27;);var s3 = new AWS.S3(&#123; apiVersion: &#x27;2006-03-01&#x27; &#125;);var eltr = new AWS.ElasticTranscoder(&#123;    apiVersion: &#x27;2012-09-25&#x27;,    region: &#x27;ap-northeast-1&#x27;&#125;);var pipelineId = &#x27;1453215075XXX-XXXXXX&#x27;;  // please use your pipeline id// System preset: HLS 1.5Mvar preset_HLS_15M  = &#x27;1351620000001-200020&#x27;;// return basename without extensionfunction basename(path) &#123;   return path.split(&#x27;/&#x27;).reverse()[0].split(&#x27;.&#x27;)[0];&#125;exports.handler = function(event, context) &#123;    var bucket = event.Records[0].s3.bucket.name;    var key    = event.Records[0].s3.object.key;    var params = &#123;        Bucket: bucket,        Key: key    &#125;;    s3.getObject(params, function(err, data) &#123;        if (err) &#123;            console.log(err);            var message = &quot;Error getting object &quot; + key + &quot; from bucket &quot; + bucket +                &quot;. Make sure they exist and your bucket is in the same region as this function.&quot;;            console.log(message);            context.fail(message);        &#125; else &#123;            /* Below section can be used if you want to put any check based on metadata */            if (data.ContentType == &#x27;video/mp4&#x27;) &#123;                console.log(&#x27;Found new video: &#x27; + key + &#x27;, sending to ET&#x27;);                sendVideoToET(key, context);            &#125; else &#123;                console.log(&#x27;Upload &#x27; + key + &#x27;was not video&#x27;);                console.log(JSON.stringify(data.Metadata));                context.fail();            &#125;        &#125;    &#125;);&#125;;function sendVideoToET(key, context) &#123;    var params = &#123;        PipelineId: pipelineId,        OutputKeyPrefix: null,        Input: &#123;            Key: key,            FrameRate: &#x27;auto&#x27;,            Resolution: &#x27;auto&#x27;,            AspectRatio: &#x27;auto&#x27;,            Interlaced: &#x27;auto&#x27;,            Container: &#x27;auto&#x27;        &#125;,        Output: &#123;            Key: &#x27;stream/&#x27; + basename(key),            ThumbnailPattern: &#x27;stream-thumb/&#x27; + basename(key) + &#x27;-thumb-&#123;count&#125;&#x27;,            PresetId: preset_HLS_15M,            Rotate: &#x27;auto&#x27;,            SegmentDuration: &quot;10&quot;        &#125;    &#125;;    eltr.createJob(params, function(err, data) &#123;        if (err) &#123;            console.log(err, err.stack); // an error occurred            context.fail();        &#125;else &#123;            console.log(&quot;Create Job Success&quot;);            context.succeed();        &#125;    &#125;);&#125;\n\n先到自己 S3 bucket 上建立 video 目錄，然後傳個 mp4 擋上去，接著修改一下 test configure 的內容，使用剛剛傳上去的 mp4 檔來測試，當測試成功後，再回到 S3 bucket 內，應該就可以看到轉出來的檔案在 stream 目錄下，以及縮圖在 stream-thumb 下\n","title_tokenize":["Transcoding","AWS","S","3","media","files","using","AWS","Lambda"],"content_tokenize":["需要","工具","參","考","文獻","操作","步","驟","Step","1","Create","Lambda","function","Step","2","Use","example","code","Step","3","Setting","event","trigger","Step","4","Naming","and","setting","role","authority","Step","5","Check","setting","Lambda","使用方法","最","近因","為","工作","上","需求","需要","影片","檔案轉換","成","串流","格式","還","好","想到","去年","恍如","參","加","1","場","AWS","開發者","大","會聽","類似這樣","技術","這樣","不用","很","辛苦的","架設","一台","Streaming","Server","缺點","當","AWS","服務用","越爽","會","AWS","給綁架","後沒","AWS","用怎麼辦","需要","工具","整個","作法","實","不算","很複雜","必","須","先","理解","滿多服務","使用","這裡","大致上","會","使用","AWS","服務項目","S","3","Elastic","Transcoder","Lambda","S","3","儲","存","空","間","Elastic","Transcoder","轉檔服務","將","S","3","上","影音","檔轉","成","各種","格式","Lambda","類似","自行","撰寫","API","來","完成","制式","工作","項目","需","自行","花點時間","了解","Elastic","Transcoder","操作","與","使用","這","部份","自行","上","網","找","尋相關資訊","參","考","這篇","Elastic","Transcoder","都","已","經","了解","怎麼","操作","就算","已","經","理解","這","轉檔服務","使用","方式","接著","透過","Lambda","方式","將這些","工作","動化","接下","來","重","頭戲","撰寫","Lambda","function","沒記錯","話","目前","提供","3","種語","法","來撰寫","Python","Node.js","Java","3","種","請","大家","找","個","最","熟习","擅長","程式","語言吧","底下","會","Node.js","語","法","來當範例","為","Python","Java","都","很不","熟","node.js","最少","算是","javascript","好","親戚","平時","再寫","參","考","文獻","先","附上","個人參","考","文獻","實","能力","好的","看","完這兩篇","大概","不用","多廢話","Using","AWS","Lambda","for","Web","Video","Transcoding","Automating","Transcoding","using","AWS","service","Elastic","Transcoder","Lambda","S","3","notifications","操作","步","驟","底下","先","來","看","圖說","故事","先","AWS","Lambda","內","去","建立","1","個","function","內容","S","3","bucket","內","特定","資料夾","video","內","建立","新增","上","傳","1","個","mp","4","檔案時","觸發","條","件","Step","1","Create","Lambda","function","Step","2","Use","example","code","範","例程","式","選來用吧","從頭寫","挺麻煩","Step","3","Setting","event","trigger","確","定","好","觸發","Lambda","條","件","設","定","Step","4","Naming","and","setting","role","authority","命名","設","定","執行","Lambda","角色","權限","提供","該","角色","權限","Policy","123","quot","Version","quot","quot","2012","10","17","quot","quot","Statement","quot","123","quot","Effect","quot","quot","Allow","quot","quot","Action","quot","quot","logs","CreateLogGroup","quot","quot","logs","CreateLogStream","quot","quot","logs","PutLogEvents","quot","quot","Resource","quot","quot","arn","aws","logs","quot","125","123","quot","Effect","quot","quot","Allow","quot","quot","Action","quot","quot","s","3","GetObject","quot","quot","s","3","PutObject","quot","quot","Resource","quot","quot","arn","aws","s","3","quot","125","123","quot","Sid","quot","quot","Stmt","1441234334958","quot","quot","Action","quot","quot","elastictranscoder","CreateJob","quot","quot","Effect","quot","quot","Allow","quot","quot","Resource","quot","quot","quot","125","125","Step","5","Check","setting","檢","查","一下","設","定","沒問題","繼續","Lambda","使用","方","法","畫","面","截圖後簡單說明","測試檔","用法","左上角","Action","gt","Configure","test","event","然後選澤","S","3","Put","範例來","修改","進行測試","請","S","3","上","找","個檔案來","對","修改","測試檔範例","改","好","後測試","結果應該","如上","1","張圖","再","熟习","lambda","使用","方式","後","開始撰寫轉檔","部份","實","再","S","3","上","傳","mp","4","檔後","建立","1","個","Elastic","Transcoder","工作","來進行轉檔","console","log","x","27","Loading","function","x","27","var","AWS","require","x","27","aws","sdk","x","27","var","s","3","new","AWS","S","3","123","apiVersion","x","27","2006","03","01","x","27","125","var","eltr","new","AWS","ElasticTranscoder","123","apiVersion","x","27","2012","09","25","x","27","region","x","27","ap","northeast","1","x","27","125","var","pipelineId","x","27","1453215075","XXX","XXXXXX","x","27","please","use","your","pipeline","id","System","preset","HLS","1.5","Mvar","preset","HLS","15","M","x","27","1351620000001","200020","x","27","return","basename","without","extensionfunction","basename","path","123","return","path","split","x","27","x","27","reverse","0","split","x","27","x","27","0","125","exports","handler","function","event","context","123","var","bucket","event","Records","0","s","3","bucket","name","var","key","event","Records","0","s","3","object","key","var","params","123","Bucket","bucket","Key","key","125","s","3","getObject","params","function","err","data","123","if","err","123","console","log","err","var","message","quot","Error","getting","object","quot","key","quot","from","bucket","quot","bucket","quot","Make","sure","they","exist","and","your","bucket","is","in","the","same","region","as","this","function","quot","console","log","message","context","fail","message","125","else","123","Below","section","can","be","used","if","you","want","to","put","any","check","based","on","metadata","if","data","ContentType","x","27","video","mp","4","x","27","123","console","log","x","27","Found","new","video","x","27","key","x","27","sending","to","ET","x","27","sendVideoToET","key","context","125","else","123","console","log","x","27","Upload","x","27","key","x","27","was","not","video","x","27","console","log","JSON","stringify","data","Metadata","context","fail","125","125","125","125","function","sendVideoToET","key","context","123","var","params","123","PipelineId","pipelineId","OutputKeyPrefix","null","Input","123","Key","key","FrameRate","x","27","auto","x","27","Resolution","x","27","auto","x","27","AspectRatio","x","27","auto","x","27","Interlaced","x","27","auto","x","27","Container","x","27","auto","x","27","125","Output","123","Key","x","27","stream","x","27","basename","key","ThumbnailPattern","x","27","stream","thumb","x","27","basename","key","x","27","thumb","123","count","125","x","27","PresetId","preset","HLS","15","M","Rotate","x","27","auto","x","27","SegmentDuration","quot","10","quot","125","125","eltr","createJob","params","function","err","data","123","if","err","123","console","log","err","err","stack","an","error","occurred","context","fail","125","else","123","console","log","quot","Create","Job","Success","quot","context","succeed","125","125","125","先","S","3","bucket","上","建立","video","目錄","然後傳個","mp","4","擋","上去","接著","修改","一下","test","configure","內容","使用","剛剛傳","上去","mp","4","檔來測試","當測試","成功","後","再","回到","S","3","bucket","內","應該","看到","轉","出","來","檔案","stream","目錄","下","縮圖","stream","thumb","下"]},{"title":"Webpack Note","url":"https://soarlin.github.io/2016/09/04/Webpack-Note/","content":"\n\n\nWebpack Note\nnpm 安裝套件\nnpm 的 packages.json\nwebpack.confing.js\nwebpack Product vs Developer\nConfig 檔內使用 path 套件\n多個 bundles 檔案封裝\n載入 CSS\n分離出 CSS 檔案\nAuto Prefixer\n\n\n加入圖片\nWebpack build with React\n\n\n\n\n\n\n\nWebpack Note\nnpm 安裝套件\nwebpack, webpack-dev-server\nbabel-core, babel-loader\njshint, jshint-loader : JS 語法檢查，後續再研究如何替換成 eslint\nnode-libs-browser : unknow\nstrip-loader : 可用於 production 情況下，將 console.log 的訊息忽略掉\ncss-loader, style-loader, (sass-loader), less-loader\n\n\nnpm 的 packages.json\n\n修改 scripts 內容\n&quot;start&quot;: &quot;webpack-dev-server&quot;\n接著回到 command line\n輸入 npm start, 開始執行 webpack-dev-server 的指令\n\n\n\n\nwebpack.confing.js\ndevtool : 產生 source-map 方便開發中除錯\nentry 可以用陣列傳入多個js檔\n也可以用 object 得方式建立多個 key: value\n\n\noutput is objects\nmodule is objects\nloaders is object array, each loader setting is object\ntest 是正規表示式\nexclude 略過不處理的目錄(以設定檔為起始路徑)\nloader 使用的 loader\n搭配 resolve 來擴充讀取的副檔名\nextensions is 副檔名陣列\n\n\n\n\npreLoaders is object array, each pre-loader setting is object\ntest 正規表示式\nexclude 略過不處理的目錄(以設定檔為起始路徑)\nloader loader名稱\n\n\n\n\n\nmodule.exports = &#123;  devtool: &#x27;eval-source-map&#x27;,  entry: [&#x27;./utils&#x27;, &#x27;/app.js&#x27;],  output: &#123;    filename: &quot;bundle.js&quot;  &#125;,  module: &#123;    preLoaders: [      &#123;        test: /\\.js$/,        exclude: &#x27;node_modules&#x27;,        loader: &#x27;jshint-loader&#x27;      &#125;    ],    loaders: [      &#123;        test: /\\.es6$/,        exclude: /node_moduel/,        loader: &quot;babel-loader&quot;      &#125;    ]  &#125;  resolve: &#123;    extensions: [&#x27;&#x27;, &#x27;.js&#x27;, &#x27;.jsx&#x27;, &#x27;.es6&#x27;]  &#125;&#125;\n\n\n\nwebpack Product vs Developer\nwebpack -p : product 模式，輸出檔案壓縮最佳化\n可使用另一個 config 檔案, webpack-production.config.js\nwebpack --config webpack-production.config.js -p\n\n\n\nvar WebpackStrip = require(&#x27;strip-loader&#x27;);var devConfig = require(&#x27;./webpack.config.js&#x27;);var stripLoader = &#123;  test: [/\\.js$/, /\\.es6$/],  exclude: /node_modules/,  loader: WebpackStrip.loader(&#x27;console.log&#x27;);&#125;devConfig.module.loaders.push(stripLoader);module.exports = devConfig;\n\n\nConfig 檔內使用 path 套件\n修改過得目錄結構\n\nvar path = require(&#x27;path&#x27;);module.exports = &#123;  context: path.resolve(&#x27;js&#x27;);  entry: [&#x27;./utils&#x27;, &#x27;/app.js&#x27;],  output: &#123;    path: path.resolve(&#x27;build/js/&#x27;),    publicPath: &#x27;/public/assets/js/&#x27;,    filename: &quot;bundle.js&quot;  &#125;,  devServer: &#123;    contentBase: &#x27;public&#x27;  &#125;  module: &#123;    preLoaders: [      &#123;        test: /\\.js$/,        exclude: &#x27;node_modules&#x27;,        loader: &#x27;jshint-loader&#x27;      &#125;    ],    loaders: [      &#123;        test: /\\.es6$/,        exclude: /node_moduel/,        loader: &quot;babel-loader&quot;      &#125;    ]  &#125;  resolve: &#123;    extensions: [&#x27;&#x27;, &#x27;.js&#x27;, &#x27;.jsx&#x27;, &#x27;.es6&#x27;]  &#125;&#125;\n\n\n多個 bundles 檔案封裝\n多個 js 檔與多個 html 頁面\n\n在 config 檔內使用 webpack 套件來載入共用 js 區塊\nvar commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&#39;shared.js&#39;);\n\n\nentry 由原本陣列換成 objects 方式撰寫\n使用 key : value 方式撰寫每個 html 頁面 entry 的 key\noutput 的部分在 filename 將改成 [name] 的方式來依據 entry 內的 key 做輸出\n\n\n\nvar path = require(&#x27;path&#x27;);var webpack = require(&#x27;wabpack&#x27;);var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&#x27;shared.js&#x27;);module.exports = &#123;    context: path.resolve(&#x27;js&#x27;);    entry: &#123;        about: &#x27;./about_page.js&#x27;,        home: &#x27;./home_page.js&#x27;,        contact: &#x27;./contact_page.js&#x27;    &#125;,    output: &#123;        path: path.resolve(&#x27;build/js/&#x27;),        publicPath: &#x27;public/assets/js/&#x27;,        filename: &quot;[name].js&quot;    &#125;,    plugins: [commonsPlugin,    devServer: &#123;        contentBase: &#x27;public&#x27;    &#125;,    ......&#125;\n\n\n載入 CSS\nloader 載入順序：由右往左，以 less 那組為例\nless-loader -&gt; css-loader -&gt; style-loader 來處理\n\n\n需安裝 css-loader, style-loader 兩套件\n使用 SASS，需要再安裝 sass-loader\n使用 Less，需要再安裝 less-loader\n\n\n在 config 檔裡面，利用! 來將兩個 loader 連接\njs 檔內使用require(&#39;css-file-path&#39;);的方式來載入 CSS (scss or less) 檔案\n原本 html 頁面內的 head 裡面不需要另外寫 css 載入\n可透過 html 頁面引入的 js 檔案內 require css 檔案自動在頁面載入時加載\n\n\n\nmodule.exports = &#123;    module: &#123;        loaders: [            &#123;                test: /\\.css$/,                exclude: /node_modules/,                loader: &quot;style-loader!css-loader&quot;            &#125;,            &#123;                test: /\\.less$/,                exclude: /node_modules/,                loader: &quot;style-loader!css-loader!less-loader&quot;            &#125;        ]    &#125;&#125;\n\n\n分離出 CSS 檔案\n讓 CSS 可放置在 head 標籤間被 include\nnpm install extract-text-webpack-plugin --save-dev\nhtml 檔的 head tag 內加入\n&lt;link rel=&quot;stylesheet&quot; href=&quot;/public/assets/styles.css&quot;&gt;\n\n\nconfig 檔內需要引入 extract-text-webpack-plugin 套件\n改寫 loaders 的內容\n\nvar ExtractTextPlugin = require(&#x27;extract-text-webpack-plugin&#x27;);module.exports = &#123;    context: path.resolve(&#x27;js&#x27;);    entry: [&quot;./app&quot;];    output: &#123;        path: path.resolve(&#x27;build/&#x27;),        publicPath: &#x27;public/assets/&#x27;,        filename: &quot;bundle.js&quot;    &#125;    plugins: [        new ExtractTextPlugin(&quot;styles.css&quot;)    ],    devServer: &#123;        contentBase: &#x27;public&#x27;    &#125;,    module: &#123;        loaders: [            &#123;                test: /\\.css$/,                exclude: /node_modules/,                loader: ExtractTextPlugin.extract(&quot;style-loader&quot;, &quot;css-loader&quot;)            &#125;,            &#123;                test: /\\.less$/,                exclude: /node_modules/,                loader: ExtractTextPlugin.extract&quot;style-loader&quot;, &quot;css-loader!less-loader&quot;)            &#125;        ]    &#125;&#125;\n\n\nAuto Prefixer\nnpm install autoprefixer-loader --save-dev\nconfig 檔內的 loader 中，增加 autoprefixer-loader 在 css-loader 之後，less-loader 之前\n\nmodule.exports = &#123;    module: &#123;        loaders: [            &#123;                test: /\\.css$/,                exclude: /node_modules/,                loader: &quot;style-loader!css-loader!autoprefixer-loader&quot;            &#125;,            &#123;                test: /\\.less$/,                exclude: /node_modules/,                loader: &quot;style-loader!css-loader!autoprefixer-loader!less-loader&quot;            &#125;        ]    &#125;&#125;\n\n\n加入圖片\nnpm 安裝 url-loader 套件\nnpm install url-loader --save-dev\npackages.json 內會增加 url-loader 與 file-loader 兩個套件\n\n\nconfig 中增加 loader 設定至 loaders 內\nurl-loader 加入 limit 限制圖片大小，限制內圖片被轉為 base64 編碼 inline 載入，超過限制以原本圖片載入\n\n\n\nmodule.exports = &#123;    module: &#123;        loaders: [            &#123;                test: /\\.css$/,                exclude: /node_modules/,                loader: &quot;style-loader!css-loader&quot;            &#125;,            &#123;                test: /\\.(png|jpg)$/,                exclude: /node_modules/,                loader: &quot;url-loader?limit=100000&quot;            &#125;        ]    &#125;&#125;\n\napp.jsvar img = document.createElement(&#x27;img&#x27;);img.style.height = &quot;25%&quot;;img.style.width = &quot;25%&quot;;img.src = require(&#x27;../images/webpack_logo.png&#x27;);document.getElelentById(&#x27;img_container&#x27;).appendChild(img);\n\n\nWebpack build with React\n安裝套件\nreact, babel-preset-es2015, babel-preset-react\n\n\n增加 .babelrc 設定檔\n\n &#123;    &quot;presets&quot; : [&quot;es2015&quot;, &quot;react&quot;]&#125;\n\n或直接寫在原本得 config.js 檔裡面\n\n  module.exports = &#123;  entry: [&#x27;/app&#x27;],  output: &#123;    filename: &quot;bundle.js&quot;  &#125;,  module: &#123;    loaders: [      &#123;        test: /\\.es6$/,        exclude: /node_moduel/,        loader: &quot;babel-loader&quot;,        query: &#123;          &quot;presets&quot; : [&quot;es2015&quot;, &quot;react&quot;]        &#125;      &#125;    ]  &#125;  resolve: &#123;    extensions: [&#x27;&#x27;, &#x27;.js&#x27;, &#x27;.jsx&#x27;, &#x27;.es6&#x27;]  &#125;&#125;","title_tokenize":["Webpack","Note"],"content_tokenize":["Webpack","Note","npm","安","裝","套件","npm","packages","json","webpack","confing","js","webpack","Product","vs","Developer","Config","檔內","使用","path","套件","多個","bundles","檔案","封","裝","載","入","CSS","分","離","出","CSS","檔案","Auto","Prefixer","加入","圖","片","Webpack","build","with","React","Webpack","Note","npm","安","裝","套件","webpack","webpack","dev","server","babel","core","babel","loader","jshint","jshint","loader","JS","語","法","檢","查","後續再","研究","何替換","成","eslint","node","libs","browser","unknow","strip","loader","可用","於","production","情況","下","將","console","log","訊息","忽视","掉","css","loader","style","loader","sass","loader","less","loader","npm","packages","json","修改","scripts","內容","quot","start","quot","quot","webpack","dev","server","quot","接著","回到","command","line","輸","入","npm","start","開始執行","webpack","dev","server","指令","webpack","confing","js","devtool","產生","source","map","方便","開發","中","錯","entry","用陣","列","傳","入","多個","js","檔","object","方式","建立","多個","key","value","output","is","objects","module","is","objects","loaders","is","object","array","each","loader","setting","is","object","test","正","規","表示","式","exclude","略","過","不","處理","目錄","設","定","檔為","起始","路徑","loader","使用","loader","搭配","resolve","來擴充讀","取","副","檔","名","extensions","is","副","檔","名","陣","列","preLoaders","is","object","array","each","pre","loader","setting","is","object","test","正","規","表示","式","exclude","略","過","不","處理","目錄","設","定","檔為","起始","路徑","loader","loader","名","稱","module","exports","123","devtool","x","27","eval","source","map","x","27","entry","x","27","utils","x","27","x","27","app","js","x","27","output","123","filename","quot","bundle","js","quot","125","module","123","preLoaders","123","test","js","exclude","x","27","node","modules","x","27","loader","x","27","jshint","loader","x","27","125","loaders","123","test","es","6","exclude","node","moduel","loader","quot","babel","loader","quot","125","125","resolve","123","extensions","x","27","x","27","x","27","js","x","27","x","27","jsx","x","27","x","27","es","6","x","27","125","125","webpack","Product","vs","Developer","webpack","p","product","模式","輸","出","檔案壓縮","最好","化","使用","另外一","個","config","檔案","webpack","production","config","js","webpack","config","webpack","production","config","js","p","var","WebpackStrip","require","x","27","strip","loader","x","27","var","devConfig","require","x","27","webpack","config","js","x","27","var","stripLoader","123","test","js","es","6","exclude","node","modules","loader","WebpackStrip","loader","x","27","console","log","x","27","125","devConfig","module","loaders","push","stripLoader","module","exports","devConfig","Config","檔內","使用","path","套件","修改","過","目錄結構","var","path","require","x","27","path","x","27","module","exports","123","context","path","resolve","x","27","js","x","27","entry","x","27","utils","x","27","x","27","app","js","x","27","output","123","path","path","resolve","x","27","build","js","x","27","publicPath","x","27","public","assets","js","x","27","filename","quot","bundle","js","quot","125","devServer","123","contentBase","x","27","public","x","27","125","module","123","preLoaders","123","test","js","exclude","x","27","node","modules","x","27","loader","x","27","jshint","loader","x","27","125","loaders","123","test","es","6","exclude","node","moduel","loader","quot","babel","loader","quot","125","125","resolve","123","extensions","x","27","x","27","x","27","js","x","27","x","27","jsx","x","27","x","27","es","6","x","27","125","125","多個","bundles","檔案","封","裝","多個","js","檔與多個","html","頁","面","config","檔內","使用","webpack","套件","來載","入","共用","js","區塊","var","commonsPlugin","new","webpack","optimize","CommonsChunkPlugin","39","shared","js","39","entry","本来","陣","列","換","成","objects","方式","撰寫","使用","key","value","方式","撰寫","個","html","頁","面","entry","key","output","部","分","filename","將","改成","name","方式","來依據","entry","內","key","做","輸","出","var","path","require","x","27","path","x","27","var","webpack","require","x","27","wabpack","x","27","var","commonsPlugin","new","webpack","optimize","CommonsChunkPlugin","x","27","shared","js","x","27","module","exports","123","context","path","resolve","x","27","js","x","27","entry","123","about","x","27","about","page","js","x","27","home","x","27","home","page","js","x","27","contact","x","27","contact","page","js","x","27","125","output","123","path","path","resolve","x","27","build","js","x","27","publicPath","x","27","public","assets","js","x","27","filename","quot","name","js","quot","125","plugins","commonsPlugin","devServer","123","contentBase","x","27","public","x","27","125","125","載","入","CSS","loader","載","入","順序","右","左","less","組為例","less","loader","gt","css","loader","gt","style","loader","來處理","需","安","裝","css","loader","style","loader","兩","套件","使用","SASS","需要","再","安","裝","sass","loader","使用","Less","需要","再","安","裝","less","loader","config","檔裡","面","利用","來將兩個","loader","連接","js","檔內","使用","require","39","css","file","path","39","方式","來載","入","CSS","scss","or","less","檔案","本来","html","頁","面","內","head","裡","面","不需要","寫","css","載","入","透過","html","頁","面","引入","js","檔案內","require","css","檔案","動","頁","面","載","入","時","加","載","module","exports","123","module","123","loaders","123","test","css","exclude","node","modules","loader","quot","style","loader","css","loader","quot","125","123","test","less","exclude","node","modules","loader","quot","style","loader","css","loader","less","loader","quot","125","125","125","分","離","出","CSS","檔案","讓","CSS","放置","head","標籤間","include","npm","install","extract","text","webpack","plugin","save","dev","html","檔","head","tag","內","加入","lt","link","rel","quot","stylesheet","quot","href","quot","public","assets","styles","css","quot","gt","config","檔內","需要","引入","extract","text","webpack","plugin","套件","改","寫","loaders","內容","var","ExtractTextPlugin","require","x","27","extract","text","webpack","plugin","x","27","module","exports","123","context","path","resolve","x","27","js","x","27","entry","quot","app","quot","output","123","path","path","resolve","x","27","build","x","27","publicPath","x","27","public","assets","x","27","filename","quot","bundle","js","quot","125","plugins","new","ExtractTextPlugin","quot","styles","css","quot","devServer","123","contentBase","x","27","public","x","27","125","module","123","loaders","123","test","css","exclude","node","modules","loader","ExtractTextPlugin","extract","quot","style","loader","quot","quot","css","loader","quot","125","123","test","less","exclude","node","modules","loader","ExtractTextPlugin","extract","quot","style","loader","quot","quot","css","loader","less","loader","quot","125","125","125","Auto","Prefixer","npm","install","autoprefixer","loader","save","dev","config","檔內","loader","中","增加","autoprefixer","loader","css","loader","後","less","loader","之前","module","exports","123","module","123","loaders","123","test","css","exclude","node","modules","loader","quot","style","loader","css","loader","autoprefixer","loader","quot","125","123","test","less","exclude","node","modules","loader","quot","style","loader","css","loader","autoprefixer","loader","less","loader","quot","125","125","125","加入","圖","片","npm","安","裝","url","loader","套件","npm","install","url","loader","save","dev","packages","json","內會","增加","url","loader","與","file","loader","兩個","套件","config","中","增加","loader","設","定","loaders","內","url","loader","加入","limit","限制","圖","片","大小","限制","內圖","片","轉為","base","64","編碼","inline","載","入","超","過","限制","本来","圖","片","載","入","module","exports","123","module","123","loaders","123","test","css","exclude","node","modules","loader","quot","style","loader","css","loader","quot","125","123","test","png","jpg","exclude","node","modules","loader","quot","url","loader","limit","100000","quot","125","125","125","app","jsvar","img","document","createElement","x","27","img","x","27","img","style","height","quot","25%","quot","img","style","width","quot","25%","quot","img","src","require","x","27","images","webpack","logo","png","x","27","document","getElelentById","x","27","img","container","x","27","appendChild","img","Webpack","build","with","React","安","裝","套件","react","babel","preset","es","2015","babel","preset","react","增加","babelrc","設","定","檔","123","quot","presets","quot","quot","es","2015","quot","quot","react","quot","125","直接","寫","本来","config","js","檔裡","面","module","exports","123","entry","x","27","app","x","27","output","123","filename","quot","bundle","js","quot","125","module","123","loaders","123","test","es","6","exclude","node","moduel","loader","quot","babel","loader","quot","query","123","quot","presets","quot","quot","es","2015","quot","quot","react","quot","125","125","125","resolve","123","extensions","x","27","x","27","x","27","js","x","27","x","27","jsx","x","27","x","27","es","6","x","27","125","125"]},{"title":"Using Gitolite to setup Git Server and install Gitweb","url":"https://soarlin.github.io/2016/09/04/Using-Gitolite-to-setup-Git-Server-and-install-Gitweb/","content":"\n\n\n在 Linux 環境下架設 Git Server\n系統套件安裝\n協同開發人員產生 SSH public key\nGit Server 的設定\n建立 Git Repository\n開發人員 clone 程式碼\n\n\n使用 Gitolite 管理 Git Server\n系統套件安裝\n產生/收集 SSH Public Key\nGitolite Server 架設\n建立專案\n加入開發人員\n\n\n\n\n安裝 Gitweb 並整合 Gitolite\n系統套件安裝\nApache 2.4 與 Gitweb 設定\n修正 Gitweb conf\n修正 Gitolite 部分\n建立專案設定檔修改部分\n\n\n\n\n\n\n\n在 Linux 環境下架設 Git Server參考資料\n系統套件安裝sudo -s (切換帳號為root)apt-get install git git-core\n\n\n協同開發人員產生 SSH public keymkdir .sshcd .sshssh-keygencat ~/.ssh/id_rsa.pub#或上傳到 Server /tmp/目錄下統一保存\n\n\nGit Server 的設定\nssh 連線到 Server 上\n\nsudo -s (切換帳號為root)\n\nuseradd -s /bin/bash -m -d /home/git git (建立名為 git 的使用者)\n\npasswd git (替 git 建立密碼，與開啟 sudoer 權限)\n\nvisudo\n\nsu - git (切換到 git user，以下動作以 git 權限操作)\n\n將開發人員的 public key 加入認證檔\n  cat /tmp/user1.pub &gt;&gt; ~/.ssh/authorized_keyscat /tmp/user2.pub &gt;&gt; ~/.ssh/authorized_keys\n\n\n建立 Git Repository\nssh 連線到 Server 上\n切換到 git user，以下動作以 git 權限操作\n\nsu gitmkdir -p ~/project_name.gitcd ~/project_name.gitgit init --bare --shared\n\n\n開發人員 clone 程式碼git clone git@&lt;網址 or IP&gt;:/home/git/project_name.git\n\n以上作法是最基本的以 git 帳號來建立 Git Server，優點是適合人少的專案，架設步驟簡單快速；缺點是無法針對不同專案給予不同開發者存取權限，所以需要往下一步\n\n使用 Gitolite 管理 Git Server參考資料一　參考資料二\n\n系統套件安裝apt-get install gitolite\n\n\n產生/收集 SSH Public Key\nssh 連線到 Server 上\nsu - git (切換到 git user，以下動作以 git 權限操作)\ncd .ssh (若沒有該目錄，請先自行建立)\nssh-keygen -t rsa -f admin (產生名為 admin 的 public key)\n請所有人將各自的 public key 放到 /tmp/ 下，並且已各自名稱命名 (e.g. alex.pub, ben.pub, john.pub …)\n\n\nGitolite Server 架設\nssh 連線到 Server 上\nsu - git (切換到 git user，以下動作以 git 權限操作)\ngl-setup ~/.ssh/admin.pub (匯入管理者的Public key)\n\n目錄結構如下：\n.├── .gitolite/├── .gitolite.rc├── repositories/│   ├── gitolite-admin.git│   └── testing.git├── .ssh├── .vim└── .vimrc\n\n這時 git 帳號的 $HOME(家目錄)下，會產生\n\n.gitolite/ 目錄\n.gitolite.rc 設定檔\nrepositories/ 目錄\n\nrepositories 目錄下，有兩個專案\n\ngitolite-admin.git (用來管理所有專案的主要專案)\ntesting.git (測試用專案)\n\n\n建立專案因為gitolite的專案管理，是透過在主專案(gitolite-admin.git)裡，改寫 config 檔案來設定，所以需要以管理者帳號\n(剛剛使用 git 帳號，因為產生的 admin.pub，被設定為 gitolite 管理者的認證)\n\nssh 連線到 Server 上\nsu - git (切換到 git user，以下動作以 git 權限操作)\n抓主專案來修改設定\n\ngit clone git@localhost:gitolite-admin.gitcd gitolite-admin/vim conf/gitolite.conf# sample：增加一個名為 ios_test 的專案,# 並設定 esu 為可存取的使用者# soar 為可讀，加入以下幾行到conf 檔中repo    ios_test        RW      =   esu        R       =   soar\n\n\n修改完畢後，以一般 git 上 code 的流程處理\n\ngit add .git commit -m &quot;add new project&quot;git push\n\n\n順利的話，可以看到畫面上出現，建立 project 的訊息\n\nCounting objects: 7, done.Delta compression using up to 4 threads.Compressing objects: 100% (3/3), done.Writing objects: 100% (4/4), 423 bytes | 0 bytes/s, done.Total 4 (delta 1), reused 0 (delta 0)remote: creating ios_test...remote: Initialized empty Git repository in /home/git/repositories/ios_test.git/remote:To git@localhost:gitolite-admin.git   a37d282..62dffa9  master -&gt; master\n\n\n加入開發人員在主專案中，加入開發人員的 public key 檔\nssh 連線到 Server 上# 切換到 git usersu - gitcd gitolite-admin/# 將之前收集的 pub 檔，複製到 keydir 目錄下cp -r /tmp/*.pub keydir/git add -Agit commit -m &quot;add developer public key&quot;git push\n\n\n安裝 Gitweb 並整合 Gitolite參考資料\n\n系統套件安裝sudo apt-get install gitweb apache2sudo usermod -a G git www-data# 將 www-data 使用者加入 git group\n\n\nApache 2.4 與 Gitweb 設定gitweb 安裝後，產生的設定是 Apache 2.2 的設定寫法，所以在2.4版需要做些修正\n\n調整 gitweb 設定檔位置\n\nsudo cp /etc/apache2/conf.d/gitweb /etc/apache2/conf-available/gitweb.confcd /etc/apache2/conf-enabledsudo ln -s ../conf-available/gitweb.conf\n\n\n修正 gitweb conf 內容\n\nsudo vim /etc/apache2/conf-enabled/gitweb.confAlias /gitweb /usr/share/gitweb&lt;Directory /usr/share/gitweb&gt;  Options +FollowSymLinks +ExecCGI  AddHandler cgi-script .cgi&lt;/Directory&gt;\n\n\nApache 載入 cgi model sudo a2enmod cgi\n重啟 Apache Server sudo service apache2 restart\n\n\n修正 Gitweb confsudo vim /etc/gitweb.conf$projectroot = &quot;/home/git/repositories&quot;;# Syntax highlighting$feature&#123;&#x27;highlight&#x27;&#125;&#123;&#x27;default&#x27;&#125; = [1];# 提供系統 loadavg check，若系統繁忙，逛 gitweb 只會看到 503 - The load average on the server is too high 訊息$masload = 500;$projects_list = $projectroot; # unmark this line\n\n\n修正 Gitolite 部分\nssh 連線到 Server 上\nsu - git (切換到 git user)\nvim .gitolite.rc\n\n$REPO_UMASK = 0027; # change this value$WEB_INTERFACE = &quot;gitweb”;  # unmark this line$GL_GITCONFIG_KEYS = &quot;gitweb.owner gitweb.description .*”;   # change this value\n\n\n建立專案設定檔修改部分gitolite-admin/conf/gitolite.conf\n\n將所有專案加入 gitweb 與 daemon 兩個帳戶的讀取權限，才能讓 gitweb 讀取到專案資料\n原有的專案可以添加一些資訊，來透過 gitweb 顯示出來\n\n# 加入部分repo    @all        R       =   gitweb daemon# 專案描述部份repo    testing        RW+     =   @all    config gitweb.owner         = &quot;Sagacity Tech. Co., Ltd.&quot;    config gitweb.description   = &quot;This is test repository&quot;    config gitweb.url           = git@&lt;IP or 網址&gt;:testing.git\n\n\n檢查 repositories 目錄權限可被讀取\nsudo service apache2 restart (重啟 Apache)\n連線到 http://IP or 網址/gitweb\n\n","title_tokenize":["Using","Gitolite","to","setup","Git","Server","and","install","Gitweb"],"content_tokenize":["Linux","環境","下","架設","Git","Server","系統","套件","安","裝","協","開發人員產生","SSH","public","key","Git","Server","設","定","建立","Git","Repository","開發人員","clone","程式","碼","使用","Gitolite","管理","Git","Server","系統","套件","安","裝","產生","搜集","SSH","Public","Key","Gitolite","Server","架設","建立","專案","加入","開發人員","安","裝","Gitweb","並","整合","Gitolite","系統","套件","安","裝","Apache","2.4","與","Gitweb","設","定","修正","Gitweb","conf","修正","Gitolite","部份","建立","專案設","定","檔","修改","部","分","Linux","環境","下","架設","Git","Server","參","考","資料","系統","套件","安","裝","sudo","s","切換帳號為","root","apt","get","install","git","git","core","協","開發人員產生","SSH","public","keymkdir","sshcd","sshssh","keygencat","ssh","id","rsa","pub","上","傳","Server","tmp","目錄","下","統","1","保存","Git","Server","設","定","ssh","連線","Server","上","sudo","s","切換帳號為","root","useradd","s","bin","bash","m","d","home","git","git","建立","名","為","git","使用者","passwd","git","git","建立","密碼","與開啟","sudoer","權限","visudo","su","git","切換","git","user","以下","動","作","git","權限","操作","將開發人員","public","key","加入","認證檔","cat","tmp","user","1","pub","gt","gt","ssh","authorized","keyscat","tmp","user","2","pub","gt","gt","ssh","authorized","keys","建立","Git","Repository","ssh","連線","Server","上","切換","git","user","以下","動","作","git","權限","操作","su","gitmkdir","p","project","name","gitcd","project","name","gitgit","init","bare","shared","開發人員","clone","程式","碼","git","clone","git@&lt","網址","or","IP","gt","home","git","project","name","git","以上","作法","最","基本的","git","帳號來","建立","Git","Server","優點","適","合","人","少的","專案","架設","步","驟簡單","快速","缺點","無","法","針對","不同","專案給予","不同","開發者","存取","權限","需要","往下","一步","使用","Gitolite","管理","Git","Server","參","考","資料","1","參","考","資料","2","系統","套件","安","裝","apt","get","install","gitolite","產生","搜集","SSH","Public","Key","ssh","連線","Server","上","su","git","切換","git","user","以下","動","作","git","權限","操作","cd","ssh","若沒","該目錄","請","先","自行","建立","ssh","keygen","t","rsa","f","admin","產生","名","為","admin","public","key","請","所有人","將","public","key","放到","tmp","下","並","已","名","稱","命名","e","g","alex","pub","ben","pub","john","pub","Gitolite","Server","架設","ssh","連線","Server","上","su","git","切換","git","user","以下","動","作","git","權限","操作","gl","setup","ssh","admin","pub","匯","入","管理者","Public","key","目錄結構","以下","gitolite","gitolite","rc","repositories","gitolite","admin","git","testing","git","ssh","vim","vimrc","這時","git","帳號","HOME","家目錄","下","會產生","gitolite","目錄","gitolite","rc","設","定","檔","repositories","目錄","repositories","目錄","下","兩個專案","gitolite","admin","git","用來","管理","所有","專案","主要","專案","testing","git","測試用專案","建立","專案","為","gitolite","專案","管理","透過","主專案","gitolite","admin","git","裡","改","寫","config","檔案來設","定","需要","管理者","帳號","剛剛","使用","git","帳號","為產生","admin","pub","設","定","為","gitolite","管理者","認證","ssh","連線","Server","上","su","git","切換","git","user","以下","動","作","git","權限","操作","抓","主專案來","修改","設","定","git","clone","git@localhost","gitolite","admin","gitcd","gitolite","admin","vim","conf","gitolite","conf","sample","增加","1","個","名","為","ios","test","專案","並設","定","esu","為","存取","使用者","soar","為","讀","加入","以下","幾行","conf","檔","中","repo","ios","test","RW","esu","R","soar","修改","完畢後","git","上","code","流程","處理","git","add","git","commit","m","quot","add","new","project","quot","git","push","順利","話","看到","畫","面上","出","現","建立","project","訊息","Counting","objects","7","done","Delta","compression","using","up","to","4","threads","Compressing","objects","100%","3","3","done","Writing","objects","100%","4","4","423","bytes","0","bytes","s","done","Total","4","delta","1","reused","0","delta","0","remote","creating","ios","test","remote","Initialized","empty","Git","repository","in","home","git","repositories","ios","test","git","remote","To","git@localhost","gitolite","admin","git","a","37","d","282","62","dffa","9","master","gt","master","加入","開發人員","主專案","中","加入","開發人員","public","key","檔","ssh","連線","Server","上","切換","git","usersu","gitcd","gitolite","admin","將","之前","搜集","pub","檔","複製","keydir","目錄","下","cp","r","tmp","pub","keydir","git","add","Agit","commit","m","quot","add","developer","public","key","quot","git","push","安","裝","Gitweb","並","整合","Gitolite","參","考","資料","系統","套件","安","裝","sudo","apt","get","install","gitweb","apache","2","sudo","usermod","a","G","git","www","data","將","www","data","使用者","加入","git","group","Apache","2.4","與","Gitweb","設","定","gitweb","安","裝後","產生","設","定","Apache","2.2","設","定","寫","法","2.4","版","需要","做","些","修正","調整","gitweb","設","定","檔","位置","sudo","cp","etc","apache","2","conf","d","gitweb","etc","apache","2","conf","available","gitweb","confcd","etc","apache","2","conf","enabledsudo","ln","s","conf","available","gitweb","conf","修正","gitweb","conf","內容","sudo","vim","etc","apache","2","conf","enabled","gitweb","confAlias","gitweb","usr","share","gitweb","lt","Directory","usr","share","gitweb","gt","Options","FollowSymLinks","ExecCGI","AddHandler","cgi","script","cgi","lt","Directory","gt","Apache","載","入","cgi","model","sudo","a","2","enmod","cgi","重","啟","Apache","Server","sudo","service","apache","2","restart","修正","Gitweb","confsudo","vim","etc","gitweb","conf","projectroot","quot","home","git","repositories","quot","Syntax","highlighting","feature","123","x","27","highlight","x","27","125","123","x","27","default","x","27","125","1","提供","系統","loadavg","check","若系統","繁忙","逛","gitweb","只","會","看到","503","The","load","average","on","the","server","is","too","high","訊息","masload","500","projects","list","projectroot","unmark","this","line","修正","Gitolite","部份","ssh","連線","Server","上","su","git","切換","git","user","vim","gitolite","rc","REPO","UMASK","0027","change","this","value","WEB","INTERFACE","quot","gitweb","unmark","this","line","GL","GITCONFIG","KEYS","quot","gitweb","owner","gitweb","description","change","this","value","建立","專案設","定","檔","修改","部","分","gitolite","admin","conf","gitolite","conf","將","所有","專案","加入","gitweb","與","daemon","兩個帳戶","讀","取","權限","才能","讓","gitweb","讀","取","專案資料","原有","專案","添加","資訊","來透過","gitweb","顯示","出","來","加入","部份","repo","all","R","gitweb","daemon","專案","描写","部份","repo","testing","RW","all","config","gitweb","owner","quot","Sagacity","Tech","Co","Ltd","quot","config","gitweb","description","quot","This","is","test","repository","quot","config","gitweb","url","git@&lt","IP","or","網址","gt","testing","git","檢","查","repositories","目錄權限","讀","取","sudo","service","apache","2","restart","重","啟","Apache","連線","http://IP","or","網址","gitweb"]},{"title":"兩台Server雙向同步","url":"https://soarlin.github.io/2016/08/28/%E5%85%A9%E5%8F%B0Server%E9%9B%99%E5%90%91%E5%90%8C%E6%AD%A5/","content":"\n\n\n兩台 Server 雙向同步\n使用排程來同步\n偵測檔案變化來同步\n停止偵測\n\n\n\n\n\n\n\n\n兩台 Server 雙向同步\n同步工具 - unison (參考連結)\n排程工具 - crontab\n目錄偵測工具 - inotifywait ( inotify-tools )\n\n\n請先安裝 unison\n\nsudo apt-get install unison\n\n撰寫副檔名為 .prf 的設定檔(e.g. sync.prf)，請在自己的家目錄下新增 .unison 資料夾來放設定檔 ($HOME/.unison)\n下面是網站上提供的範例，感覺很夠用了\n\n# Two root directories to sync.# You can use ssh:// to sync over SSHroot = /home/alice/sync_folderroot = ssh://dev@192.168.1.10//home/alice/sync_folder# If you want one-way mirroring from one replica to the other, specify the source replica using &quot;force&quot; as follows.# force = /home/alice/sync_folder# If you want Unison to run without any user input, try &quot;batch&quot; mode.batch = true# If you don&#x27;t want to be prompted, and just accept Unison&#x27;s recommendation:auto = true# Optionally, you can sync specific sub directories only (under the root).# path = dir1# path = dir2# Optionally, you can ignore specific files or directories that are matched with regular expressions.# ignore = Name *.o# ignore = Name *~# ignore = Path */temp/archive_*# If you want to ignore difference in file props:perms = 0\n\n\n確定兩台主機都可以使用 SSH 連到對方，中間牽涉到一些問題，比如：\n登入帳號是否具備有同步目錄以及子目錄的操作權限\n若要排程同步就要注意帳號登入問題，最好是都將對方的 SSH public key 加到 authorize_keys，免密碼登入\n\n\n執行雙向同步測試，檢查結果\n\nunison sync\n\n正常的結果如下：\nContacting server...Connected [//local//home/alice/sync_folder -&gt; //remote_host//home/alice/sync_folder]Looking for changes  Waiting for changes from serverReconciling changesnew file --&gt;            document1.pdf         &lt;-- new file   my.jpgPropagating updatesUNISON 2.40.63 started propagating changes at 21:19:13.65 on 20 Sep 2013[BGN] Copying document1.pdf from /home/alice/sync_folder to //remote_host//home/alice/sync_folder[BGN] Copying my.jpg from //remote_host//home/alice/sync_folder to /home/alice/sync_folder[END] Copying my.jpg[END] Copying document1.pdfUNISON 2.40.63 finished propagating changes at 21:19:13.68 on 20 Sep 2013Saving synchronizer stateSynchronization complete at 21:19:13  (2 items transferred, 0 skipped, 0 failed)\n\n\n如果出現一些什麼 Permission denied 的訊息，應該就是資料夾權限問題，因為我一直遇到，所以才會一直寫出來，希望別再犯傻\n\n\n使用排程來同步\n若要排程同步，可以使用 crontab，編輯排程工作\n\ncrontab -e# 然後加上指令(下面範例為，每15分鐘同步一次)*/15 * * * * /usr/bin/unison sync\n\n\n\n偵測檔案變化來同步\n覺得排程同步不夠直接，改用事件觸發，當目錄下有新增檔案，就觸發同步指令\n監測目錄內檔案是否有新增，使用 inotifywait 指令，需要先安裝 inotify-tools\n\nsudo apt-get install inotify-tools\n\n\n撰寫偵測指令的 script 檔\n\nvim watch.sh# 檔案內容如下#!/bin/bashwhile true; do inotifywait -e create -e moved_to -r 監測目錄 &amp;&amp; /usr/bin/unison sync; done\n\n\n更改 script 檔權限為可執行 chmod a+x watch.sh\n背景執行 script 來常駐偵測動作 ./watch.sh &amp;\n\n\n停止偵測\n注意事項，要停止偵測動作的時候，先停止 script 的執行，然後在停止偵測指令\n先查詢 script 的 process id ps aux | grep watch.sh\n\nubuntu   29247  0.0  0.2  11028  1384 pts/0    S    10:13   0:00 /bin/bash ./watch.sh\n\n刪除 script 的 process kill 29247\n在查詢 inotifywait 的 process id ps aux | grep inotifywait\n\nubuntu   29466  0.0  0.1   6596   704 pts/0    S    10:15   0:00 inotifywait -e crea…\n\n刪除偵測的 process kill 29466\n\n","title_tokenize":["兩","台","Server","雙","同步"],"content_tokenize":["兩","台","Server","雙","同步","使用","排","程來","同步","偵測檔案變化來","同步","停止","偵測","兩","台","Server","雙","同步","同步","工具","unison","參","考","連結","排","程工具","crontab","目錄偵測","工具","inotifywait","inotify","tools","請","先","安","裝","unison","sudo","apt","get","install","unison","撰寫","副","檔","名","為","prf","設","定","檔","e","g","sync","prf","請","家目錄","下","新增","unison","資料夾來","放","設","定","檔","HOME","unison","下面","網","站上","提供","範例","感覺很夠用","Two","root","directories","to","sync","You","can","use","ssh","to","sync","over","SSHroot","home","alice","sync","folderroot","ssh","dev","192.168.1.10","home","alice","sync","folder","If","you","want","one","way","mirroring","from","one","replica","to","the","other","specify","the","source","replica","using","quot","force","quot","as","follows","force","home","alice","sync","folder","If","you","want","Unison","to","run","without","any","user","input","try","quot","batch","quot","mode","batch","true","If","you","don","x","27","t","want","to","be","prompted","and","just","accept","Unison","x","27","s","recommendation","auto","true","Optionally","you","can","sync","specific","sub","directories","only","under","the","root","path","dir","1","path","dir","2","Optionally","you","can","ignore","specific","files","or","directories","that","are","matched","with","regular","expressions","ignore","Name","o","ignore","Name","ignore","Path","temp","archive","If","you","want","to","ignore","difference","in","file","props","perms","0","確","定","兩","台","主機","都","使用","SSH","連","對","方","中","間牽涉","問題","登","入","帳號","是否是","具","備","同步","目錄","子目","錄","操作","權限","若要","排","程同步","就要","注意","帳號","登","入","問題","最好","都","將對","方","SSH","public","key","加","authorize","keys","免","密碼","登","入","執行雙","同步","測試","檢","查結果","unison","sync","正常的","結果","以下","Contacting","server","Connected","local","home","alice","sync","folder","gt","remote","host","home","alice","sync","folder","Looking","for","changes","Waiting","for","changes","from","serverReconciling","changesnew","file","gt","document","1","pdf","lt","new","file","my","jpgPropagating","updatesUNISON","2.40.63","started","propagating","changes","at","21","19","13.65","on","20","Sep","2013","BGN","Copying","document","1","pdf","from","home","alice","sync","folder","to","remote","host","home","alice","sync","folder","BGN","Copying","my","jpg","from","remote","host","home","alice","sync","folder","to","home","alice","sync","folder","END","Copying","my","jpg","END","Copying","document","1","pdfUNISON","2.40.63","finished","propagating","changes","at","21","19","13.68","on","20","Sep","2013","Saving","synchronizer","stateSynchronization","complete","at","21","19","13","2","items","transferred","0","skipped","0","failed","出","現","什麼","Permission","denied","訊息","應該","資料夾權限問題","為","1","直","遇到","才","會","寫","出","來","希望","別","再犯","傻","使用","排","程來","同步","若要","排","程同步","使用","crontab","編輯","排","程工作","crontab","e","然後","加上","指令","下面","範例為","15分","鐘","同步","一次","15","usr","bin","unison","sync","偵測檔案變化來","同步","覺","排","程同步","不","夠","直接","改","用事","件","觸發","當目錄","下","新增","檔案","觸發","同步","指令","監測目錄內檔案","是否是","新增","使用","inotifywait","指令","需要","先","安","裝","inotify","tools","sudo","apt","get","install","inotify","tools","撰寫偵測","指令","script","檔","vim","watch","sh","檔案內容","以下","bin","bashwhile","true","do","inotifywait","e","create","e","moved","to","r","監測目錄","amp","amp","usr","bin","unison","sync","done","更改","script","檔權限為","執行","chmod","a","x","watch","sh","背景","執行","script","來","常駐偵測動","作","watch","sh","amp","停止","偵測","注意","事項","停止","偵測動","作","時候","先","停止","script","執行","然後","停止","偵測","指令","先","查詢","script","process","id","ps","aux","grep","watch","sh","ubuntu","29247","0.0","0.2","11028","1384","pts","0","S","10","13","0","00","bin","bash","watch","sh","刪","script","process","kill","29247","查詢","inotifywait","process","id","ps","aux","grep","inotifywait","ubuntu","29466","0.0","0.1","6596","704","pts","0","S","10","15","0","00","inotifywait","e","crea","刪","偵測","process","kill","29466"]},{"title":"Less筆記","url":"https://soarlin.github.io/2016/08/28/Less%E7%AD%86%E8%A8%98/","content":"\n\n\nLess\n變數\n計算\n顏色處理\nmixins 混入\nRWD 寫法參考\n\n\n\n\n\n\n\nLess\n變數\n使用@符號當開頭命名變數, e.g.@link-color: #4281dc;\n\n@link-color:        #428bca; // sea blue// Usagea,.link &#123;    color: @link-color;&#125;\nSelectors// Variables@my-selector: banner;// Usage.@&#123;my-selector&#125; &#123;    font-weight: bold;    line-height: 40px;    margin: 0 auto;&#125;\nURLs\n// Variables@images: &quot;../img&quot;;// Usagebody &#123;    color: #444;    background: url(&quot;@&#123;images&#125;/white-sand.png&quot;);&#125;\nImport Statements// Variables@themes: &quot;../../src/themes&quot;;// Usage@import &quot;@&#123;themes&#125;/tidal-wave.less&quot;;\n\nProperties@property: color;.widget &#123;    @&#123;property&#125;: #0ee;    background-@&#123;property&#125;: #999;&#125;\n\n\n計算\n雖然有 calc() 可以用，但是必須在前面加上 ~&quot; ... &quot; 來跳脫字符\n由於要以字串處理，所以裡面無法使用變數\n如果要使用變數，需要以 @&#123;變數&#125; 的方式使用\n\n@asideWidth: 30px;// error sample.post &#123;    width: calc(100% - @asideWidth);&#125;//correct sample, can&#x27;t use parameter.post &#123;    width: ~&quot;calc(100% - 30px)&quot;;&#125;// another way.post &#123;    width: ~&quot;calc(100% - @&#123;asideWidth&#125;)&quot;;&#125;\n\n\n顏色處理\n可參考 Color Channel Functions , Color Operation Functions\n一樣有 hue, saturation, lightness, lighten, darken …等處理方式\n\n\nmixins 混入\n定義時，與原本寫 class name 類似 .my-mixin or .my-mixin2()\n使用時，也是直接引用 .my-mixin or .my-mixin2\n\n.my-mixin &#123;    color: black;&#125;// 不會輸出 class.my-other-mixin() &#123;    background: white;&#125;.class &#123;    .my-mixin;    .my-other-mixin;&#125;----------- Output -----------.my-mixin &#123;    color: black;&#125;.class &#123;    color: black;    background: white;&#125;\n\n可帶入參數 .shadow(@color)\n\n.border-radius(@radius) &#123;  -webkit-border-radius: @radius;     -moz-border-radius: @radius;          border-radius: @radius;&#125;.header &#123;    .border-radius(4px);&#125;.button &#123;    .border-radius(6px);&#125;\n\n\nRWD 寫法參考\n直接寫@media條件式\n\nheader &#123;    color: red;    @media only screen and (min-width : 768px) &#123; color: green; &#125;    @media only screen and (min-width : 1024px) &#123; color: blue; &#125;&#125;\n\n\n透過變數宣告條件式\n\n@smartphones: ~&quot;only screen and (max-width: 479px)&quot;;.foo &#123;    font-size: 2.4em;    @media @smartphones &#123;        font-size: 1.8em;    &#125;&#125;\n\n@smartphones: ~&quot;only screen and (max-width: 479px)&quot;;@tablets: ~&quot;only screen and (min-width: 768px) and (max-width: 959px)&quot;;@font-size--large: 24px;@font-size--medium: 12px;.foo &#123;    font-size: @font-size--large;    @media @smartphones, @tablets &#123;        font-size: @font-size--medium;    &#125;&#125;","title_tokenize":["Less","筆記"],"content_tokenize":["Less","變數","計算","顏色處理","mixins","混入","RWD","寫","法","參","考","Less","變數","使用","符號當開頭","命名","變數","e","g","link","color","4281","dc","link","color","428","bca","sea","blue","Usagea","link","123","color","link-color","125","Selectors","Variables","my","selector","banner","Usage.@&#123","my","selector","125","123","font","weight","bold","line","height","40","px","margin","0","auto","125","URLs","Variables","images","quot","img","quot","Usagebody","123","color","444","background","url","quot","123","images","125","white","sand","png","quot","125","Import","Statements","Variables","themes","quot","src","themes","quot","Usage","import","quot","123","themes","125","tidal","wave","less","quot","Properties","property","color","widget","123","123","property","125","0","ee","background-@&#123","property","125","999","125","計算","雖然","calc","必","須","在前面","加上","quot","quot","來跳脫","字符","於要","字串","處理","裡","面","無","法","使用","變數","使用","變數","需要","123","變數","125","方式","使用","asideWidth","30","px","error","sample","post","123","width","calc","100%","asideWidth","125","correct","sample","can","x","27","t","use","parameter","post","123","width","quot","calc","100%","30","px","quot","125","another","way","post","123","width","quot","calc","100%","123","asideWidth","125","quot","125","顏色處理","參","考","Color","Channel","Functions","Color","Operation","Functions","1","樣","hue","saturation","lightness","lighten","darken","處理","方式","mixins","混入","定","義時","與","本来","寫","class","name","類似","my","mixin","or","my","mixin","2","使用","時","也是","直接","援用","my","mixin","or","my","mixin","2","my","mixin","123","color","black","125","不","會輸","出","class","my","other","mixin","123","background","white","125","class","123","my","mixin","my","other","mixin","125","Output","my","mixin","123","color","black","125","class","123","color","black","background","white","125","帶","入","參數","shadow","color","border","radius","radius","123","webkit","border","radius","radius","moz","border","radius","radius","border","radius","radius","125","header","123","border","radius","4","px","125","button","123","border","radius","6","px","125","RWD","寫","法","參","考","直接","寫","media","條","件","式","header","123","color","red","media","only","screen","and","min","width","768","px","123","color","green","125","media","only","screen","and","min","width","1024","px","123","color","blue","125","125","透過變數","宣布","條","件","式","smartphones","quot","only","screen","and","max","width","479","px","quot","foo","123","font","size","2.4","em","media","smartphones","123","font","size","1.8","em","125","125","smartphones","quot","only","screen","and","max","width","479","px","quot","tablets","quot","only","screen","and","min","width","768","px","and","max","width","959","px","quot","font","size","large","24","px","font","size","medium","12","px","foo","123","font","size","font","size","large","media","smartphones","tablets","123","font","size","font","size","medium","125","125"]},{"title":"PostCSS筆記","url":"https://soarlin.github.io/2016/08/28/PostCSS/","content":"\n\n\nPostCSS\n搭配 Plugin\n變數\n計算\n顏色處理\nmixins 混入\nRWD 寫法參考\n\n\n\n\n\n\nPostCSS\n搭配 Plugin\n需搭配安裝\npostcss-import\npostcss-mixins\npostcss-nested\npostcss-nextcss\nautoprefixer, 由於 postcss-next 已經自動加入這項功能，因此需要移除 autoprefixer\n\n\n\n\n變數\n定義在 :root &#123; &#125; 裡面\n使用時透過 var(變數) 來使用\n\n:root &#123;    --mainColor: #4fc5cf;    --fontColor: #eee;&#125;body &#123;    background-color: var(--mainColor);    color: var(--fontColor);&#125;\n\n\n計算\n使用function calc\n\n:root &#123;    --spaceUnit: 10px;&#125;.mt-20 &#123;    margin-top: calc(var(--spaceUnit) * 2);&#125;\n\n\n顏色處理\ncolor( [ &lt;color&gt; | &lt;hue&gt; ] &lt;color-adjuster&gt;* )\ncolor-adjuster\n[red( | green( | blue( | alpha( | a(] [&#39;+&#39; | &#39;-&#39;]? [&lt;number&gt; | &lt;percentage&gt;] )\n色調值 HSL中的H hue( | h(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;angle&gt; )\n飽和度 HSL中的S saturation( | s(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;percentage&gt; )\n亮度 HSL中的L lightness( | l(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;percentage&gt; )\n調白 whiteness( | w(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;percentage&gt; ) or tint( &lt;percentage&gt; )\n調黑 blackness( | b(] [&#39;+&#39; | &#39;-&#39; | &#39;*&#39;]? &lt;percentage&gt; ) or shade( &lt;percentage&gt; )\n\n\n\nwhatever &#123;    color: color(red a(10%));    background-color: color(red lightness(50%));    /* == color(red l(50%)); */    border-color: color(hsla(125, 50%, 50%, .4) saturation(+ 10%) w(- 20%));&#125;\n\n\nmixins 混入\n需安裝 postcss-mixins\n定義 @define-mixin 名稱 $param1, $param2(有預設值)\n使用 @mixin 名稱 $param1 or @mixin 名稱 $param1 $param2\n\n@define-mixin icon $network, $color: blue &#123;    .icon.is-$(network) &#123;        color: $color;        @mixin-content;    &#125;    .icon.is-$(network):hover &#123;        color: white;        background: $color;    &#125;&#125;@mixin icon twitter &#123;    background: url(twt.png);&#125;@mixin icon youtube, red &#123;    background: url(youtube.png);&#125;\n\n\nRWD 寫法參考\n定義不同尺寸 @custom-media --tablets (max-width: 992px);\n使用時 @media (--tablets) &#123; ... &#125;\n\n@custom-media --phone (width &lt; 768px);@custom-media --tablets (width &lt;= 992px);.banner &#123;    width: 666px;    @media(--tablets) &#123;        width: 100%;        max-width: 550px;    &#125;    @media(--phone) &#123;        width: 100%;    &#125;&#125;\n","title_tokenize":["PostCSS","筆記"],"content_tokenize":["PostCSS","搭配","Plugin","變數","計算","顏色處理","mixins","混入","RWD","寫","法","參","考","PostCSS","搭配","Plugin","需","搭配","安","裝","postcss","import","postcss","mixins","postcss","nested","postcss","nextcss","autoprefixer","於","postcss","next","已","經","動","加入","這項","功能","需要","移","autoprefixer","變數","定","義","root","123","125","裡","面","使用","時透過","var","變數","來","使用","root","123","mainColor","4","fc","5","cf","fontColor","eee","125","body","123","background","color","var","mainColor","color","var","fontColor","125","計算","使用","function","calc","root","123","spaceUnit","10","px","125","mt","20","123","margin","top","calc","var","spaceUnit","2","125","顏色處理","color","lt","color","gt","lt","hue","gt","lt","color","adjuster","gt","color","adjuster","red","green","blue","alpha","a","39","39","39","39","lt","number","gt","lt","percentage","gt","色調值","HSL","中的","H","hue","h","39","39","39","39","39","39","lt","angle","gt","飽","度","HSL","中的","S","saturation","s","39","39","39","39","39","39","lt","percentage","gt","亮度","HSL","中的","L","lightness","l","39","39","39","39","39","39","lt","percentage","gt","調白","whiteness","w","39","39","39","39","39","39","lt","percentage","gt","or","tint","lt","percentage","gt","調","黑","blackness","b","39","39","39","39","39","39","lt","percentage","gt","or","shade","lt","percentage","gt","whatever","123","color","color","red","a","10%","background","color","color","red","lightness","50%","color","red","l","50%","border","color","color","hsla","125","50%","50%","4","saturation","10%","w","20%","125","mixins","混入","需","安","裝","postcss","mixins","定","義","define-mixin","名","稱","param","1","param","2","預設值","使用","mixin","名","稱","param","1","or","mixin","名","稱","param","1","param","2","define-mixin","icon","network","color","blue","123","icon","is","network","123","color","color","mixin","content","125","icon","is","network","hover","123","color","white","background","color","125","125","mixin","icon","twitter","123","background","url","twt","png","125","mixin","icon","youtube","red","123","background","url","youtube","png","125","RWD","寫","法","參","考","定","義","不同","尺寸","custom-media","tablets","max","width","992","px","使用","時","media","tablets","123","125","custom-media","phone","width","lt","768","px","custom-media","tablets","width","lt","992","px","banner","123","width","666","px","media","tablets","123","width","100%","max","width","550","px","125","media","phone","123","width","100%","125","125"]},{"title":"Sass筆記","url":"https://soarlin.github.io/2016/08/28/Sass%E7%AD%86%E8%A8%98/","content":"\n\n\nSass\n變數\n計算\n顏色處理\nmixins 混入\nRWD 寫法參考\n\n\n\n\n\n\n\nSass\n變數\n開頭錢($)字號, e.g. $mainColor, $spaceUnit\n使用時，直接使用定義好的變數\n\n$warm_grey: #8b8a8a;h3.title &#123;    color: $warm_grey;&#125;\n\n\n計算\n支援+,-,*,/與%\n\n.container &#123; width: 100%; &#125;article[role=&quot;main&quot;] &#123;    float: left;    width: 600px / 960px * 100%;&#125;aside[role=&quot;complementary&quot;] &#123;    float: right;    width: 300px / 960px * 100%;&#125;\n\n\n迴圈處理 @for $i from 1 through 5 &#123; ... &#125; \n\n@for $i from 1 through 5 &#123;  .mt-#&#123;$i&#125;0 &#123; margin-top: 10px * $i; &#125;  .mb-#&#123;$i&#125;0 &#123; margin-bottom: 10px * $i; &#125;&#125;\n\n\n顏色處理\n調整亮度，HSL 模式中的 L\n調高亮度 lighten($base-color, 10%)\n降低亮度 darken($base-color, 10%)\n\n\n飽和度，HSL 模式中的 S\n調高飽和度 saturate( $base-color, 20% )\n降低飽和度 desaturate( $base-color, 20% )\n\n\n色調值，HSL 模式中的 H\n調整 adjust-hue( $base-color, 20% )\n\n\n透明度\nrgba( $base-color, .7 )\n\n\n色調與陰影 Tint &amp; Shade, 增加白色色調或黑色色調\n增加白色(Tint) tint( $base-color, 10% )\n增加黑色(Shade) shade( $base-color, 10% )\n\n\n\n\nmixins 混入\n定義時，用 @mixin mixin_name(param), param為可選\n引用時，使用 @include mixin_name\n\n@mixin shadow($color) &#123;    box-shadow: 1px 1px 0 1px darken($color, 15%);&#125;.button &#123;    @include shadow(#23abc1);&#125;\n\n\nRWD 寫法參考\n使用變數定義不同尺寸\n利用 @mixin Name 與 @content 兩個特性來達成\n使用 @include Name 來引用\n\n$padWidth: 992px;$phoneWidth: 415px;@mixin tablet &#123;    @media screen and (max-width: $padWidth) &#123;        @content;    &#125;&#125;@mixin phone &#123;    @media screen and (max-width: $phoneWidth) &#123;        @content;    &#125;&#125;.back-top &#123;    position: fixed;    right: 30px;    bottom: 30px;    @include tablet &#123;        right: 20px;        bottom: 20px;    &#125;    @include phone &#123;        right: 10px;        bottom: 10px;    &#125;&#125;","title_tokenize":["Sass","筆記"],"content_tokenize":["Sass","變數","計算","顏色處理","mixins","混入","RWD","寫","法","參","考","Sass","變數","開頭錢","字號","e","g","mainColor","spaceUnit","使用","時","直接","使用","定","義","好的","變數","warm","grey","8","b","8","a","8","a","h","3","title","123","color","warm","grey","125","計算","支援","與","container","123","width","100%","125","article","role","quot","main","quot","123","float","left","width","600","px","960","px","100%","125","aside","role","quot","complementary","quot","123","float","right","width","300","px","960","px","100%","125","迴","圈","處理","for","i","from","1","through","5","123","125","for","i","from","1","through","5","123","mt","123","i","125","0","123","margin","top","10","px","i","125","mb","123","i","125","0","123","margin","bottom","10","px","i","125","125","顏色處理","調整","亮度","HSL","模式","中的","L","調","高","亮度","lighten","base","color","10%","着落","亮度","darken","base","color","10%","飽","度","HSL","模式","中的","S","調","高飽","度","saturate","base","color","20%","着落","飽","度","desaturate","base","color","20%","色調值","HSL","模式","中的","H","調整","adjust","hue","base","color","20%","透明度","rgba","base","color","7","色調與陰影","Tint","amp","Shade","增加","白色","色調","黑色","色調","增加","白色","Tint","tint","base","color","10%","增加","黑色","Shade","shade","base","color","10%","mixins","混入","定","義時","mixin","mixin","name","param","param","為","選","援用","時","使用","include","mixin","name","mixin","shadow","color","123","box","shadow","1","px","1","px","0","1","px","darken","color","15%","125","button","123","include","shadow","23","abc","1","125","RWD","寫","法","參","考","使用","變數","定","義","不同","尺寸","利用","mixin","Name","與","content","兩個","特性","來達","成","使用","include","Name","來","援用","padWidth","992","px","phoneWidth","415","px","mixin","tablet","123","media","screen","and","max","width","padWidth","123","content","125","125","mixin","phone","123","media","screen","and","max","width","phoneWidth","123","content","125","125","back","top","123","position","fixed","right","30","px","bottom","30","px","include","tablet","123","right","20","px","bottom","20","px","125","include","phone","123","right","10","px","bottom","10","px","125","125"]},{"title":"Linux相關筆記","url":"https://soarlin.github.io/2016/08/28/Linux%E7%9B%B8%E9%97%9C%E7%AD%86%E8%A8%98/","content":"\n\n\nLinux 相關資料\n使用者磁碟限額  - 檢查使用者磁碟限額\n  - 啟動 / 關閉磁碟限額\n  - 編輯 使用者/群組 磁碟限額規則\n\n\n開機自動執行 script\n開機自動掛載遠端共享資料夾\n手動掛載指令步驟 :\n改為開機後自動掛載步驟：\n\n\n使用crontab幫工作排程\n建立群組共用目錄\nAWS EC2(Ubuntu)的使用者改用密碼登入\n\n\n\n\n\n\n\nLinux 相關資料\n使用者磁碟限額\n參考資料：\nquota - 磁碟配額\nLinux 磁碟配額 (Quota)\n\n\n\n檢查使用者磁碟限額sudo quota &lt;UserName&gt;\n\n啟動 / 關閉磁碟限額sudo quotaon -av  啟動sudo quotaoff -a    全部關閉sudo quotaoff -u &lt;UserName&gt;\n\n編輯 使用者/群組 磁碟限額規則jonny@gutsy:~$ sudo edquota -u UserName [Enter]jonny@gutsy:~$ sudo edquota -g GroupName [Enter]Disk quotas for user jonny (uid 1004):Filesystem  blocks  soft  hard inodes soft hard/dev/sda7   24     100000 102400   7  0  0// 此範例為限制 100 MB，如想限制 1 GB 請改用 1000000 及 1024000。\n\n\n各欄介紹\n第１欄 (Filesystem)：啟用 quota 的檔案系統名增。\n第２欄 (blocks)：使用者已使用的區塊數量。\n第３欄 (soft)：非強制性的磁碟空間限制，單位為 KB。\n第４欄 (hard)：強制性的磁碟空間限制，單位為 KB。\n第５欄 (inodes)：使用者已使用的檔案數目。\n第６欄 (soft)：非強制性的 inode 限制。\n第７欄 (hard)：強制性的 inode 限制。\n\n\n\n\n開機自動執行 script在 Debian 及 Ubuntu 開機後, 如果想自動執行一些 shell script 或指令, 可以直接編輯 /etc/rc.local 檔案。\n以下是 /etc/rc.local 預設內容:\n#!/bin/sh -e## rc.local - executed at the end of each multiuser runlevel## Make sure that the script will &quot;exit 0&quot; on success or any other# value on error.\n\n要加入自動執行指令或 shell script 十分簡單, 只要直接加上要執行的指令即可，例如我要讓 solr-5.3.1 每次重開機後也被啟動，就加入/path/to/solr-5.3.1/bin/solr start\n#!/bin/sh -e## rc.local - executed at the end of each multiuser runlevel## Make sure that the script will &quot;exit 0&quot; on success or any other# value on error./home/ubuntu/solr-5.3.1/bin/solr start\n\n\n開機自動掛載遠端共享資料夾由於 Local 的資料備份是透過 mount nas 所分享的資料夾來備份資料所以每次重開機或 nas 出問題，mount 就會斷掉，必須手動在重新 mount 上\n\n手動掛載指令步驟 :\n請使用root來執行\nmount指令(20150826更新) : mount -t cifs -o username=oooo,password=oooo //192.168.68.101/homes/ubuntu /mnt/nas\n檢查指令 : df -h 或 df -Th /mnt/nas\nunmount指令 : umount /mnt/nas\n\n\n改為開機後自動掛載步驟：參考資料\n\n安裝 smbfs\n\nsudo apt-get install smbfs\n\n建立本機對應目錄\n\nsudo mkdir /mnt/nas\n\n加入遠端分享資料夾的帳號密碼\n\nsudo vim /root/.cifspwd# .cifspwd 檔案內容username=oooopassword=oooo\n\n修改 fstab (/etc/fstab) 來增加重開機後自動掛載的資料\n\n//192.168.68.101/homes/ubuntu /mnt/nas cifs user,uid=1000,gid=users,credentials=/root/.cifspwd 0 0# 當中的 uid 為 /mnt/nas 建立的初始帳戶 uid (soar:1000)# 使用 id -u username 去檢查 uid\n\n檢查是否成功\n如果已經掛載，先解除掛載 umount /mnt/nas\n然後在透過下列語法模擬開機後執行的 mount 動作 sudo mount -a\ndf -h 來檢查是否 mount 成功\n\n\n\n\n使用crontab幫工作排程\ncrontab -l : 列出目前使用者的排程工作\ncrontab -e : 編輯目前使用者的排程工作\n\n10 3 * * 6 /bin/bash -c &#x27;mysql_backup/backup.sh &gt;&gt; /mnt/nas/mysql_backup/backup.log 2&gt;&amp;1&#x27;30 3 * * 6 /bin/bash -c &#x27;weekly/backup.sh &gt;&gt; /mnt/nas/weekly/backup.log 2&gt;&amp;1&#x27;0 4 * * 6 /bin/sh -c &#x27;system_backup/backup.sh &gt;&gt; /mnt/nas/system_backup/backup.log 2&gt;&amp;1’\n\n\n\n建立群組共用目錄參考資料 (20190813已失效)\n請先切換成root帳號\n\n建立使用者帳號Iuseradd -s /bin/bash -G sudo -m -d /home/username username -p 密碼\n建立群組帳號，GID使用50000\n\ngroupadd -g 50000 &#123;group-name&#125;\n\n將使用者帳號加入群組\n\n使用指令「vigr」(vi /etc/group的意思)，接著大寫G到最下面\n會看到剛剛建立的群組名稱與GID\n\n  &#123;group-name&#125;:x:50000:\n在這行後面加上使用者帳號，多數使用者以逗號隔開\n\n\n&#123;group-name&#125;:x:50000:user1,user2,user3\n\n\n建立目錄來共享\n\nmkdir /home/&#123;group-name&#125;/shard-folder\n\n變更目錄權限\n\nhgrp &#123;group-name&#125;  /home/&#123;group-name&#125;/shard-folder\n\n變更目錄權限(其中的x表示其他賬戶的存取權限，4:可讀，5:可讀＋執行，7:可讀寫＋執行)\n\nchmod 277x /home/&#123;group-name&#125;/shard-folder\n\n\nAWS EC2(Ubuntu)的使用者改用密碼登入先使用正常的方式登入\nssh -i xxxx.pem ubuntu@ip\n\n修改 sshd_config 檔，將PasswordAuthentication 改成 yes 後存檔離開\nsudo vim /etc/ssh/sshd_configsudo service ssh restart (ssh服務重啟)\n\n重新改用使用者帳號登入，就需要打密碼了，前提是這個賬戶有設定密碼\n","title_tokenize":["Linux","相關筆記"],"content_tokenize":["Linux","相關資料","使用者","磁碟","限額","檢","查","使用者","磁碟","限額","啟動","關閉","磁碟","限額","編輯","使用者","群組","磁碟","限額規則","開機","動執行","script","開機","動掛載遠端","共享","資料夾","手","動掛載","指令","步","驟","改","為開機後","動掛載","步","驟","使用","crontab","幫","工作","排","程","建立","群組","共用","目錄","AWS","EC","2","Ubuntu","使用者","改用","密碼","登","入","Linux","相關資料","使用者","磁碟","限額","參","考","資料","quota","磁碟","配額","Linux","磁碟","配額","Quota","檢","查","使用者","磁碟","限額","sudo","quota","lt","UserName","gt","啟動","關閉","磁碟","限額","sudo","quotaon","av","啟動","sudo","quotaoff","a","全","部","關閉","sudo","quotaoff","u","lt","UserName","gt","編輯","使用者","群組","磁碟","限額規則","jonny@gutsy","sudo","edquota","u","UserName","Enter","jonny@gutsy","sudo","edquota","g","GroupName","Enter","Disk","quotas","for","user","jonny","uid","1004","Filesystem","blocks","soft","hard","i","node","s","soft","hard","dev","sda","7","24","100000","102400","7","0","0","範例為","限制","100","MB","想","限制","1","GB","請","改用","1000000","1024000","各欄介紹","１","欄","Filesystem","啟用","quota","檔案系統","名","增","２","欄","blocks","使用者","已","使用","區塊數","量","３","欄","soft","非","強制性","磁碟","空","間","限制","單","位","為","KB","４","欄","hard","強制性","磁碟","空","間","限制","單","位","為","KB","５","欄","i","node","s","使用者","已","使用","檔案數目","６","欄","soft","非","強制性","i","node","限制","７","欄","hard","強制性","i","node","限制","開機","動執行","script","Debian","Ubuntu","開機後","想","動執行","shell","script","指令","直接","編輯","etc","rc","local","檔案","以下","etc","rc","local","預設內容","bin","sh","e","rc","local","executed","at","the","end","of","each","multiuser","runlevel","Make","sure","that","the","script","will","quot","exit","0","quot","on","success","or","any","other","value","on","error","加入","動執行","指令","shell","script","十分","簡單","直接","加上","要執行","指令","即可","要讓","solr","5.3.1","每次","重","開機後","啟動","加入","path","to","solr","5.3.1","bin","solr","start","bin","sh","e","rc","local","executed","at","the","end","of","each","multiuser","runlevel","Make","sure","that","the","script","will","quot","exit","0","quot","on","success","or","any","other","value","on","error","home","ubuntu","solr","5.3.1","bin","solr","start","開機","動掛載遠端","共享","資料夾","於","Local","資料備","份","透過","mount","nas","分享","資料夾來備","份","資料","每次","重","開機","nas","出","問題","mount","會斷掉","必","須","手","動","重新","mount","上","手","動掛載","指令","步","驟","請","使用","root","來執行","mount","指令","20150826","更新","mount","t","cifs","o","username","oooo","password","oooo","192.168.68.101","homes","ubuntu","mnt","nas","檢","查","指令","df","h","df","Th","mnt","nas","unmount","指令","umount","mnt","nas","改","為開機後","動掛載","步","驟","參","考","資料","安","裝","smbfs","sudo","apt","get","install","smbfs","建立","機對應目錄","sudo","mkdir","mnt","nas","加入","遠端","分享","資料夾","帳號密碼","sudo","vim","root","cifspwd","cifspwd","檔案內容","username","oooopassword","oooo","修改","fstab","etc","fstab","來","增加","重","開機後","動掛載","資料","192.168.68.101","homes","ubuntu","mnt","nas","cifs","user","uid","1000","gid","users","credentials","root","cifspwd","0","0","當","中的","uid","為","mnt","nas","建立","初始","帳戶","uid","soar","1000","使用","id","u","username","去","檢","查","uid","檢","查","是否是","成功","已","經掛載","先","消除","掛載","umount","mnt","nas","然後","透過","以下","語","法","模擬開機後執行","mount","動","作","sudo","mount","a","df","h","來檢","查","是否是","mount","成功","使用","crontab","幫","工作","排","程","crontab","l","列出","目前","使用者","排","程工作","crontab","e","編輯","目前","使用者","排","程工作","10","3","6","bin","bash","c","x","27","mysql","backup","backup","sh","gt","gt","mnt","nas","mysql","backup","backup","log","2","gt","amp","1","x","27","30","3","6","bin","bash","c","x","27","weekly","backup","sh","gt","gt","mnt","nas","weekly","backup","log","2","gt","amp","1","x","27","0","4","6","bin","sh","c","x","27","system","backup","backup","sh","gt","gt","mnt","nas","system","backup","backup","log","2","gt","amp","1","建立","群組","共用","目錄參","考","資料","20190813","已","失效","請","先","切換","成","root","帳號","建立","使用者","帳號","Iuseradd","s","bin","bash","G","sudo","m","d","home","username","username","p","密碼","建立","群組帳號","GID","使用","50000","groupadd","g","50000","123","group","name","125","將","使用者","帳號","加入","群組","使用","指令","vigr","vi","etc","group","意思","接著","大","寫","G","最","下面","會","看到","剛剛","建立","群組","名","稱與","GID","123","group","name","125","x","50000","這行後","面","加上","使用者","帳號","多數","使用者","逗號隔開","123","group","name","125","x","50000","user","1","user","2","user","3","建立","目錄來","共享","mkdir","home","123","group","name","125","shard","folder","變","更","目錄權限","hgrp","123","group","name","125","home","123","group","name","125","shard","folder","變","更","目錄權限","中的","x","表示","賬戶","存取","權限","4","讀","5","讀","執行","7","讀寫","執行","chmod","277","x","home","123","group","name","125","shard","folder","AWS","EC","2","Ubuntu","使用者","改用","密碼","登","入","先","使用","正常的","方式","登","入","ssh","i","xxxx","pem","ubuntu","ip","修改","sshd","config","檔","將","PasswordAuthentication","改成","yes","後","存","檔離開","sudo","vim","etc","ssh","sshd","configsudo","service","ssh","restart","ssh","服務","重","啟","重新","改用","使用者","帳號","登","入","需要","密碼","条件","這個賬戶","設","定","密碼"]},{"title":"Laravel筆記","url":"https://soarlin.github.io/2016/08/27/Laravel%E7%AD%86%E8%A8%98/","content":"\n\n\nArtisan 操作\n建立 Controller\n建立 Model\n建立 Migration (建立資料表格)\n建立 Seeder (表格初始資料)\n使用 Elixir\n\n\n取出最後一筆Query\nLaravel 5\nLaravel 4\n\n\n\n\n\n\n\nArtisan 操作\n建立 Controller\nphp artisan make:controller 目錄/檔案名稱\n\n\n建立 Model\nphp artisan make:model Model/TableName(單數) -m\nmake:model 後面接著的 Model/TableName 會在 app 目錄下建立 Model 資料夾，然後再產生 XXXX 的 Model 檔案\n最後的 -m 為 Optional，使用的話可以同時產生 migration 檔案來建立表格\n\n\n\n\n建立 Migration (建立資料表格)\nphp artisan make:migration init_transfer_tool\nmigration 檔案名稱常用小寫英文[a-z]與底線[_]來命名\n建立出來的檔案 class 名稱則為首字大寫英文銜接 e.g. InitTransferTool\n\n\n執行全部未執行過的 migration php artisan migrate\n回朔最後一筆 migration php artisan migrate:rollback\n回朔所有 migration php artisan migrate:reset\n回朔所有 migration 並且重新執行 migrate php artisan migrate:refresh\n附帶執行 seeder，最後加上 –seed，php artisan migrate:refresh --seed\n\n\n檢查目前 migration 狀態 php artisan migrate:status\n\n\n建立 Seeder (表格初始資料)\nphp artisan make:seeder UsersTableSeeder\n建立 Seeder 的名稱慣用首字大寫英文銜接\n記得到 DatabaseSeeder 裡執行呼叫剛剛建立的 Seeder\n\n\n執行建立的 Seeder\n單個執行 php artisan db:seed --class=UsersTableSeeder\n全部執行 php artisan db:seed\n\n\n\n\n使用 Elixir\n安裝 Gulp\nnpm install --global gulp\n個人使用經驗，只裝 global 似乎不行，所以又裝在目錄下的 node_modules/\nnpm install --save gulp\n\n\n\n\n安裝 Elixir\nnpm install\n初始目錄下的 package.json 內已經有 laravel-elixir 等必須套件\n\n\nbabel 使用遇到問題\n安裝 babel-preset-es2015 與 babel-preset-react, npm install --save-dev babel-preset-es2015 babel-preset-react\n\n\n使用 eslint 檢查\n安裝 laravel-elixir-eslint 與 eslint-plugin-react (因為之前的 eslintrc 內有寫到)\nnpm install --save-dev laravel-elixir-eslint eslint-plugin-react\n增加 .eslintrc.json 檔案\n&#123;    &quot;env&quot;: &#123;        &quot;browser&quot;: true,        &quot;commonjs&quot;: true,        &quot;es6&quot;: true,        &quot;jquery&quot;: true    &#125;,    &quot;extends&quot;: [&quot;eslint:recommended&quot;, &quot;plugin:react/recommended&quot;],    &quot;parserOptions&quot;: &#123;        &quot;ecmaFeatures&quot;: &#123;            &quot;experimentalObjectRestSpread&quot;: true,            &quot;jsx&quot;: true,            &quot;globalReturn&quot;: true        &#125;,        &quot;sourceType&quot;: &quot;module&quot;    &#125;,    &quot;plugins&quot;: [        &quot;react&quot;    ],    &quot;rules&quot;: &#123;        &quot;indent&quot;: [            &quot;error&quot;,            4        ],        &quot;linebreak-style&quot;: [            &quot;error&quot;,            &quot;unix&quot;        ],        &quot;quotes&quot;: [            &quot;error&quot;,            &quot;single&quot;        ],        &quot;semi&quot;: [            &quot;error&quot;,            &quot;always&quot;        ],        &quot;react/no-danger&quot;: 0,        &quot;no-console&quot;: [&quot;error&quot;, &#123; &quot;allow&quot;: [&quot;log&quot;, &quot;warn&quot;, &quot;error&quot;] &#125;]    &#125;,    &quot;globals&quot;: &#123;        &quot;API&quot;: true    &#125;&#125;\n\n\n\n\n取出最後一筆Query\nLaravel 5\n(!) In Laravel 5 you should enable do DB::enableQueryLog(); first.\nThen after placing your final statement:\nDB::table(&#39;users&#39;)-&gt;where(&#39;name&#39;, &#39;=&#39;, &#39;Aknavi&#39;)-&gt;get(); just run:\ndd(DB::getQueryLog()); - it will return the SQL and the bindings of the last queries that were executed.\n\n\nLaravel 4In Laravel 4 queryLogging is enabled by default, so you should just do:dd(DB::getQueryLog());\n","title_tokenize":["Laravel","筆記"],"content_tokenize":["Artisan","操作","建立","Controller","建立","Model","建立","Migration","建立","資料","表格","建立","Seeder","表格","初始","資料","使用","Elixir","取出","最","後","1","筆","Query","Laravel","5","Laravel","4","Artisan","操作","建立","Controller","php","artisan","make","controller","目錄","檔案","名","稱","建立","Model","php","artisan","make","model","Model","TableName","單數","m","make","model","後","面","接著","Model","TableName","會","app","目錄","下","建立","Model","資料夾","然後再產生","XXXX","Model","檔案","最","後","m","為","Optional","使用","話","時產生","migration","檔案來","建立","表格","建立","Migration","建立","資料","表格","php","artisan","make","migration","init","transfer","tool","migration","檔案","名","稱","经常使用","小","寫","英文","a","z","與","底","線","來","命名","建立","出","來","檔案","class","名","稱則為","首字","大","寫","英文","銜接","e","g","InitTransferTool","執行","全","部","未","執行過","migration","php","artisan","migrate","回朔","最","後","1","筆","migration","php","artisan","migrate","rollback","回朔","所有","migration","php","artisan","migrate","reset","回朔","所有","migration","並","重新","執行","migrate","php","artisan","migrate","refresh","附","帶執行","seeder","最","後","加上","–","seed","php","artisan","migrate","refresh","seed","檢","查","目前","migration","狀態","php","artisan","migrate","status","建立","Seeder","表格","初始","資料","php","artisan","make","seeder","UsersTableSeeder","建立","Seeder","名","稱慣用","首字","大","寫","英文","銜接","記","DatabaseSeeder","裡執行","呼唤","剛剛","建立","Seeder","執行","建立","Seeder","單個執行","php","artisan","db","seed","class","UsersTableSeeder","全","部","執行","php","artisan","db","seed","使用","Elixir","安","裝","Gulp","npm","install","global","gulp","個人","使用","經驗","只","裝","global","恍如","不行","裝","目錄","下","node","modules","npm","install","save","gulp","安","裝","Elixir","npm","install","初始","目錄","下","package","json","內","已","經","laravel","elixir","必","須","套件","babel","使用","遇到","問題","安","裝","babel","preset","es","2015","與","babel","preset","react","npm","install","save","dev","babel","preset","es","2015","babel","preset","react","使用","eslint","檢","查","安","裝","laravel","elixir","eslint","與","eslint","plugin","react","為","之前","eslintrc","內","寫","npm","install","save","dev","laravel","elixir","eslint","eslint","plugin","react","增加","eslintrc","json","檔案","123","quot","env","quot","123","quot","browser","quot","true","quot","commonjs","quot","true","quot","es","6","quot","true","quot","jquery","quot","true","125","quot","extends","quot","quot","eslint","recommended","quot","quot","plugin","react","recommended","quot","quot","parserOptions","quot","123","quot","ecmaFeatures","quot","123","quot","experimentalObjectRestSpread","quot","true","quot","jsx","quot","true","quot","globalReturn","quot","true","125","quot","sourceType","quot","quot","module","quot","125","quot","plugins","quot","quot","react","quot","quot","rules","quot","123","quot","indent","quot","quot","error","quot","4","quot","linebreak","style","quot","quot","error","quot","quot","unix","quot","quot","quotes","quot","quot","error","quot","quot","single","quot","quot","semi","quot","quot","error","quot","quot","always","quot","quot","react","no","danger","quot","0","quot","no","console","quot","quot","error","quot","123","quot","allow","quot","quot","log","quot","quot","warn","quot","quot","error","quot","125","125","quot","globals","quot","123","quot","API","quot","true","125","125","取出","最","後","1","筆","Query","Laravel","5","In","Laravel","5","you","should","enable","do","DB","enableQueryLog","first","Then","after","placing","your","final","statement","DB","table","39","users","39","gt","where","39","name","39","39","39","39","Aknavi","39","gt","get","just","run","dd","DB","getQueryLog","it","will","return","the","SQL","and","the","bindings","of","the","last","queries","that","were","executed","Laravel","4","In","Laravel","4","queryLogging","is","enabled","by","default","so","you","should","just","do","dd","DB","getQueryLog"]},{"title":"CSS筆記","url":"https://soarlin.github.io/2016/08/27/CSS%E7%AD%86%E8%A8%98/","content":"\n\n\nCSS\nBackground 背景\nAnimation 動畫效果\nTransform 變化\nTransition 轉場\n\n\n\n\n\n\n\nCSS\nBackground 背景background: color image position/size repeat origin clip attachment initial|inherit;\n\nposition:\n水平(left, center, right, xpos)\n垂直(top, center, bottom, ypos)\n\n\nsize: audo, percentage, cover, contain\nrepeat: repeat|repeat-x|repeat-y|no-repeat\norigin: padding-box|border-box|content-box\nclip: border-box|padding-box|content-box (沒用過)\nattachment: scroll|fixed|local (沒用過)\n\n\nAnimation 動畫效果animation: @keyframes | duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name\n\n@keyframes: 定義動畫, 另外寫\n\n@keyframes identifier &#123;    0% &#123; top: 0; left: 0; &#125;    30% &#123; top: 50px; &#125;    68%, 72% &#123; left: 50px; &#125;    100% &#123; top: 100px; left: 100%; &#125;&#125;\n\n\nduration: 動畫一次週期的時間, e.g. 1s, 300ms\ntiming-function: 動畫轉變時時間的加速曲線, e.g. linear, ease, ease-in, ease-in-out, ease-out\ndelay: 定義元素讀取完畢到動畫開始的間隔時間\niteration-count: 定義動畫重複的次數, e.g. 1, 2, infinite\ndirection: 定義是否動畫播放完畢後將會反向播放, e.g. alternate(順,反,順,反)\nfill-mode: 定義元素在動畫播放外(動畫開始前及結束後)的狀態, e.g. forwards(停在最後)\nplay-state: 控制動畫的播放狀態。有 pause 和 running 兩種值，後者為預設值。\nname: keyframes 的名稱\nTransform 變化\n\ntransform: transform-functions\n\nscale(x,y), scale3d(x,y,z), scaleX(x), scaleY(y), scaleZ(z)\nskewX(angle), skewY(angle)\ntranslate(x,y), translate3d(x,y,z), translateX(x), translateY(y), translateZ(z)\nrotate(angle), rotate3d(x,y,z,angle), rotateX(angle), rotateY(angle), rotateZ(angle)\nmatrix(n,n,n,n,n,n), matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)\nperspective()\n\n\nTransition 轉場transition: name | duration | (timing function) | (delay) {, name | duration};\n\nname: keyframes 的名稱\nduration: 轉場時間\n動畫轉變時時間的加速曲線\n元素讀取完畢到動畫開始的延遲時間\n可以設定多組轉場\n\n","title_tokenize":["CSS","筆記"],"content_tokenize":["CSS","Background","背景","Animation","動畫","效果","Transform","變化","Transition","轉場","CSS","Background","背景","background","color","image","position","size","repeat","origin","clip","attachment","initial","inherit","position","水平","left","center","right","xpos","垂直","top","center","bottom","ypos","size","audo","percentage","cover","contain","repeat","repeat","repeat","x","repeat","y","no","repeat","origin","padding","box","border","box","content","box","clip","border","box","padding","box","content","box","沒用過","attachment","scroll","fixed","local","沒用過","Animation","動畫","效果","animation","keyframes","duration","timing","function","delay","iteration","count","direction","fill","mode","play","state","name","keyframes","定","義動畫","寫","keyframes","identifier","123","0%","123","top","0","left","0","125","30%","123","top","50","px","125","68%","72%","123","left","50","px","125","100%","123","top","100","px","left","100%","125","125","duration","動畫","一次","週","期","時間","e","g","1","s","300","ms","timing","function","動畫轉變時時間","加速","曲線","e","g","linear","ease","ease","in","ease","in","out","ease","out","delay","定","義","元素","讀","取","完畢","動畫開始","間隔時間","iteration","count","定","義動畫","重","複","次","數","e","g","1","2","infinite","direction","定","義","是否是","動畫","播放","完畢後將會","反向","播放","e","g","alternate","順","反","順","反","fill","mode","定","義","元素","動畫","播放","外","動畫開始","前","結束後","狀態","e","g","forwards","停","最","後","play","state","控制","動畫","播放","狀態","pause","running","兩種值","後者為預設值","name","keyframes","名","稱","Transform","變化","transform","transform","functions","scale","x","y","scale","3","d","x","y","z","scaleX","x","scaleY","y","scaleZ","z","skewX","angle","skewY","angle","translate","x","y","translate","3","d","x","y","z","translateX","x","translateY","y","translateZ","z","rotate","angle","rotate","3","d","x","y","z","angle","rotateX","angle","rotateY","angle","rotateZ","angle","matrix","n","n","n","n","n","n","matrix","3","d","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","n","perspective","Transition","轉場","transition","name","duration","timing","function","delay","name","duration","name","keyframes","名","稱","duration","轉場時間","動畫轉變時時間","加速","曲線","元素","讀","取","完畢","動畫開始","延遲時間","設","定","多組轉場"]},{"title":"Hello World","url":"https://soarlin.github.io/2016/08/26/hello-world/","content":"\n\n\nQuick Start\nCreate a new post\nRun server\nGenerate static files\nDeploy to remote sites\n\n\n\n\n\n\nWelcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\n\nQuick Start\nCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\n\nRun server$ hexo server\n\nMore info: Server\n\nGenerate static files$ hexo generate\n\nMore info: Generating\n\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","title_tokenize":["Hello","World"],"content_tokenize":["Quick","Start","Create","a","new","post","Run","server","Generate","static","files","Deploy","to","remote","sites","Welcome","to","Hexo","This","is","your","very","first","post","Check","documentation","for","more","info","If","you","get","any","problems","when","using","Hexo","you","can","find","the","answer","in","troubleshooting","or","you","can","ask","me","on","GitHub","Quick","Start","Create","a","new","post","hexo","new","quot","My","New","Post","quot","More","info","Writing","Run","server","hexo","server","More","info","Server","Generate","static","files","hexo","generate","More","info","Generating","Deploy","to","remote","sites","hexo","deploy","More","info","Deployment"]}]